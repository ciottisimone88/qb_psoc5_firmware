ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10445
 458 01dc 04000000 		.word	rx_queue.10449
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10447
 461 01e8 08000000 		.word	data_packet_index.10446
 462 01ec 0C000000 		.word	data_packet_buffer.10448
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a C64B     		ldr	r3, .L79
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 282 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 286 0
 530 0054 C44B     		ldr	r3, .L79+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 287 0
 535 005c C24B     		ldr	r3, .L79+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 288 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 291 0
 542 0066 C14B     		ldr	r3, .L79+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F20A82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 6B010000 		.word	.L38+1
 552 0080 79030000 		.word	.L39+1
 553 0084 79030000 		.word	.L39+1
 554 0088 6B010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 16


 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 297 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 561 0096 B549     		ldr	r1, .L79+8
 562 0098 1346     		mov	r3, r2
 563 009a DB00     		lsls	r3, r3, #3
 564 009c 9B1A     		subs	r3, r3, r2
 565 009e 1B01     		lsls	r3, r3, #4
 566 00a0 0B44     		add	r3, r3, r1
 567 00a2 03F58873 		add	r3, r3, #272
 568 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 00a8 1A46     		mov	r2, r3
 570 00aa B14B     		ldr	r3, .L79+12
 571 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 572 00ae 002B     		cmp	r3, #0
 573 00b0 2BD0     		beq	.L40
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 574              		.loc 1 299 0
 575 00b2 07F58843 		add	r3, r7, #17408
 576 00b6 03F15E03 		add	r3, r3, #94
 577 00ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 578 00bc AB49     		ldr	r1, .L79+8
 579 00be 1346     		mov	r3, r2
 580 00c0 DB00     		lsls	r3, r3, #3
 581 00c2 9B1A     		subs	r3, r3, r2
 582 00c4 1B01     		lsls	r3, r3, #4
 583 00c6 0B44     		add	r3, r3, r1
 584 00c8 03F58873 		add	r3, r3, #272
 585 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 00ce 1846     		mov	r0, r3
 587 00d0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 588              		.loc 1 301 0
 589 00d4 07F58843 		add	r3, r7, #17408
 590 00d8 03F15E03 		add	r3, r3, #94
 591 00dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 592 00de A349     		ldr	r1, .L79+8
 593 00e0 1346     		mov	r3, r2
 594 00e2 DB00     		lsls	r3, r3, #3
 595 00e4 9B1A     		subs	r3, r3, r2
 596 00e6 1B01     		lsls	r3, r3, #4
 597 00e8 0B44     		add	r3, r3, r1
 598 00ea 03F58873 		add	r3, r3, #272
 599 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f0 0021     		movs	r1, #0
 601 00f2 1846     		mov	r0, r3
 602 00f4 FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 603              		.loc 1 305 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 17


 604 00f8 9B4B     		ldr	r3, .L79+4
 605 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606 00fc 002B     		cmp	r3, #0
 607 00fe 04D0     		beq	.L40
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 608              		.loc 1 306 0
 609 0100 994B     		ldr	r3, .L79+4
 610 0102 0022     		movs	r2, #0
 611 0104 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 612              		.loc 1 307 0
 613 0106 FFF7FEFF 		bl	interrupt_manager
 614              	.L40:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             
 313:..\src/interruptions.c ****             motor_control_SH();
 615              		.loc 1 313 0
 616 010a FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****             
 315:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 316:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 617              		.loc 1 316 0
 618 010e 07F58843 		add	r3, r7, #17408
 619 0112 03F15E03 		add	r3, r3, #94
 620 0116 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 621 0118 9449     		ldr	r1, .L79+8
 622 011a 1346     		mov	r3, r2
 623 011c DB00     		lsls	r3, r3, #3
 624 011e 9B1A     		subs	r3, r3, r2
 625 0120 1B01     		lsls	r3, r3, #4
 626 0122 0B44     		add	r3, r3, r1
 627 0124 03F58973 		add	r3, r3, #274
 628 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 629 012a 012B     		cmp	r3, #1
 630 012c 12D1     		bne	.L41
 317:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 631              		.loc 1 317 0
 632 012e 07F58843 		add	r3, r7, #17408
 633 0132 03F15E03 		add	r3, r3, #94
 634 0136 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 635 0138 8C49     		ldr	r1, .L79+8
 636 013a 1346     		mov	r3, r2
 637 013c DB00     		lsls	r3, r3, #3
 638 013e 9B1A     		subs	r3, r3, r2
 639 0140 1B01     		lsls	r3, r3, #4
 640 0142 0B44     		add	r3, r3, r1
 641 0144 03F58773 		add	r3, r3, #270
 642 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 643 014a 002B     		cmp	r3, #0
 644 014c 02D1     		bne	.L41
 318:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 645              		.loc 1 318 0
 646 014e 894B     		ldr	r3, .L79+16
 647 0150 0022     		movs	r2, #0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 18


 648 0152 1A70     		strb	r2, [r3]
 649              	.L41:
 319:..\src/interruptions.c ****                 }   
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 650              		.loc 1 324 0
 651 0154 844B     		ldr	r3, .L79+4
 652 0156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 653 0158 002B     		cmp	r3, #0
 654 015a 00F08781 		beq	.L76
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 655              		.loc 1 325 0
 656 015e 824B     		ldr	r3, .L79+4
 657 0160 0022     		movs	r2, #0
 658 0162 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 659              		.loc 1 326 0
 660 0164 FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 661              		.loc 1 328 0
 662 0168 80E1     		b	.L76
 663              	.L38:
 664              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 665              		.loc 1 333 0
 666 016a 0023     		movs	r3, #0
 667 016c 07F58842 		add	r2, r7, #17408
 668 0170 02F15F02 		add	r2, r2, #95
 669 0174 1370     		strb	r3, [r2]
 670 0176 7DE0     		b	.L43
 671              	.L48:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 672              		.loc 1 334 0
 673 0178 07F58843 		add	r3, r7, #17408
 674 017c 03F15F03 		add	r3, r3, #95
 675 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 676 0182 7B4A     		ldr	r2, .L79+12
 677 0184 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 678 0186 002B     		cmp	r3, #0
 679 0188 69D0     		beq	.L44
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 680              		.loc 1 336 0
 681 018a 07F58843 		add	r3, r7, #17408
 682 018e 03F15F03 		add	r3, r3, #95
 683 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 0194 1846     		mov	r0, r3
 685 0196 FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 19


 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 686              		.loc 1 338 0
 687 019a 07F58843 		add	r3, r7, #17408
 688 019e 03F15E03 		add	r3, r3, #94
 689 01a2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 690 01a4 7149     		ldr	r1, .L79+8
 691 01a6 1346     		mov	r3, r2
 692 01a8 DB00     		lsls	r3, r3, #3
 693 01aa 9B1A     		subs	r3, r3, r2
 694 01ac 1B01     		lsls	r3, r3, #4
 695 01ae 0B44     		add	r3, r3, r1
 696 01b0 03F58873 		add	r3, r3, #272
 697 01b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 01b6 07F58842 		add	r2, r7, #17408
 699 01ba 02F15F02 		add	r2, r2, #95
 700 01be 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 701 01c0 9A42     		cmp	r2, r3
 702 01c2 0ED1     		bne	.L45
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 703              		.loc 1 340 0
 704 01c4 07F58843 		add	r3, r7, #17408
 705 01c8 03F15E03 		add	r3, r3, #94
 706 01cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 01ce 07F58843 		add	r3, r7, #17408
 708 01d2 03F15F03 		add	r3, r3, #95
 709 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 710 01d8 1146     		mov	r1, r2
 711 01da 1846     		mov	r0, r3
 712 01dc FFF7FEFF 		bl	encoder_reading_SPI
 713 01e0 34E0     		b	.L46
 714              	.L45:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 715              		.loc 1 343 0
 716 01e2 07F58843 		add	r3, r7, #17408
 717 01e6 03F15D03 		add	r3, r3, #93
 718 01ea 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 719 01ec 5F49     		ldr	r1, .L79+8
 720 01ee 1346     		mov	r3, r2
 721 01f0 DB00     		lsls	r3, r3, #3
 722 01f2 9B1A     		subs	r3, r3, r2
 723 01f4 1B01     		lsls	r3, r3, #4
 724 01f6 0B44     		add	r3, r3, r1
 725 01f8 03F58873 		add	r3, r3, #272
 726 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01fe 07F58842 		add	r2, r7, #17408
 728 0202 02F15F02 		add	r2, r2, #95
 729 0206 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 730 0208 9A42     		cmp	r2, r3
 731 020a 0ED1     		bne	.L47
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 732              		.loc 1 345 0
 733 020c 07F58843 		add	r3, r7, #17408
 734 0210 03F15D03 		add	r3, r3, #93
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 20


 735 0214 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 736 0216 07F58843 		add	r3, r7, #17408
 737 021a 03F15F03 		add	r3, r3, #95
 738 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 739 0220 1146     		mov	r1, r2
 740 0222 1846     		mov	r0, r3
 741 0224 FFF7FEFF 		bl	encoder_reading_SPI
 742 0228 10E0     		b	.L46
 743              	.L47:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 744              		.loc 1 349 0
 745 022a 07F58843 		add	r3, r7, #17408
 746 022e 03F15F03 		add	r3, r3, #95
 747 0232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 748 0234 4E4A     		ldr	r2, .L79+12
 749 0236 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 750 0238 1A46     		mov	r2, r3
 751 023a 07F58843 		add	r3, r7, #17408
 752 023e 03F15F03 		add	r3, r3, #95
 753 0242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 754 0244 1946     		mov	r1, r3
 755 0246 1046     		mov	r0, r2
 756 0248 FFF7FEFF 		bl	ReadEncoderLine
 757              	.L46:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 758              		.loc 1 356 0
 759 024c 464B     		ldr	r3, .L79+4
 760 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 761 0250 002B     		cmp	r3, #0
 762 0252 04D0     		beq	.L44
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 763              		.loc 1 357 0
 764 0254 444B     		ldr	r3, .L79+4
 765 0256 0022     		movs	r2, #0
 766 0258 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****                         interrupt_manager();
 767              		.loc 1 358 0
 768 025a FFF7FEFF 		bl	interrupt_manager
 769              	.L44:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 770              		.loc 1 333 0 discriminator 2
 771 025e 07F58843 		add	r3, r7, #17408
 772 0262 03F15F03 		add	r3, r3, #95
 773 0266 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 0268 0133     		adds	r3, r3, #1
 775 026a 07F58842 		add	r2, r7, #17408
 776 026e 02F15F02 		add	r2, r2, #95
 777 0272 1370     		strb	r3, [r2]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 21


 778              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 779              		.loc 1 333 0 is_stmt 0 discriminator 1
 780 0274 07F58843 		add	r3, r7, #17408
 781 0278 03F15F03 		add	r3, r3, #95
 782 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 783 027e 012B     		cmp	r3, #1
 784 0280 7FF67AAF 		bls	.L48
 785              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 786              		.loc 1 366 0 is_stmt 1
 787 0284 07F58843 		add	r3, r7, #17408
 788 0288 03F15E03 		add	r3, r3, #94
 789 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 790 028e 1846     		mov	r0, r3
 791 0290 FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 369:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 792              		.loc 1 369 0
 793 0294 07F58843 		add	r3, r7, #17408
 794 0298 03F15E03 		add	r3, r3, #94
 795 029c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 796 029e 3349     		ldr	r1, .L79+8
 797 02a0 1346     		mov	r3, r2
 798 02a2 DB00     		lsls	r3, r3, #3
 799 02a4 9B1A     		subs	r3, r3, r2
 800 02a6 1B01     		lsls	r3, r3, #4
 801 02a8 0B44     		add	r3, r3, r1
 802 02aa 03F58973 		add	r3, r3, #274
 803 02ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 804 02b0 012B     		cmp	r3, #1
 805 02b2 12D1     		bne	.L49
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 806              		.loc 1 370 0
 807 02b4 07F58843 		add	r3, r7, #17408
 808 02b8 03F15E03 		add	r3, r3, #94
 809 02bc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 810 02be 2B49     		ldr	r1, .L79+8
 811 02c0 1346     		mov	r3, r2
 812 02c2 DB00     		lsls	r3, r3, #3
 813 02c4 9B1A     		subs	r3, r3, r2
 814 02c6 1B01     		lsls	r3, r3, #4
 815 02c8 0B44     		add	r3, r3, r1
 816 02ca 03F58773 		add	r3, r3, #270
 817 02ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 818 02d0 002B     		cmp	r3, #0
 819 02d2 02D1     		bne	.L49
 371:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 820              		.loc 1 371 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 22


 821 02d4 274B     		ldr	r3, .L79+16
 822 02d6 0022     		movs	r2, #0
 823 02d8 1A70     		strb	r2, [r3]
 824              	.L49:
 372:..\src/interruptions.c ****                 }   
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****             
 375:..\src/interruptions.c ****             // Check Interrupt 
 376:..\src/interruptions.c **** 
 377:..\src/interruptions.c ****             if (interrupt_flag){
 825              		.loc 1 377 0
 826 02da 234B     		ldr	r3, .L79+4
 827 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 828 02de 002B     		cmp	r3, #0
 829 02e0 04D0     		beq	.L50
 378:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 830              		.loc 1 378 0
 831 02e2 214B     		ldr	r3, .L79+4
 832 02e4 0022     		movs	r2, #0
 833 02e6 1A70     		strb	r2, [r3]
 379:..\src/interruptions.c ****                 interrupt_manager();
 834              		.loc 1 379 0
 835 02e8 FFF7FEFF 		bl	interrupt_manager
 836              	.L50:
 380:..\src/interruptions.c ****             }
 381:..\src/interruptions.c ****             
 382:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 383:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 837              		.loc 1 383 0
 838 02ec 1F4B     		ldr	r3, .L79+8
 839 02ee 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 840 02f2 012B     		cmp	r3, #1
 841 02f4 40F0BC80 		bne	.L77
 384:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 842              		.loc 1 384 0
 843 02f8 07F58843 		add	r3, r7, #17408
 844 02fc 03F15D03 		add	r3, r3, #93
 845 0300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 846 0302 1846     		mov	r0, r3
 847 0304 FFF7FEFF 		bl	motor_control_generic
 385:..\src/interruptions.c ****                 
 386:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 387:..\src/interruptions.c ****                 if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 848              		.loc 1 387 0
 849 0308 07F58843 		add	r3, r7, #17408
 850 030c 03F15D03 		add	r3, r3, #93
 851 0310 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 852 0312 1649     		ldr	r1, .L79+8
 853 0314 1346     		mov	r3, r2
 854 0316 DB00     		lsls	r3, r3, #3
 855 0318 9B1A     		subs	r3, r3, r2
 856 031a 1B01     		lsls	r3, r3, #4
 857 031c 0B44     		add	r3, r3, r1
 858 031e 03F58973 		add	r3, r3, #274
 859 0322 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 860 0324 012B     		cmp	r3, #1
 861 0326 12D1     		bne	.L52
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 23


 388:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 862              		.loc 1 388 0
 863 0328 07F58843 		add	r3, r7, #17408
 864 032c 03F15D03 		add	r3, r3, #93
 865 0330 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 866 0332 0E49     		ldr	r1, .L79+8
 867 0334 1346     		mov	r3, r2
 868 0336 DB00     		lsls	r3, r3, #3
 869 0338 9B1A     		subs	r3, r3, r2
 870 033a 1B01     		lsls	r3, r3, #4
 871 033c 0B44     		add	r3, r3, r1
 872 033e 03F58773 		add	r3, r3, #270
 873 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 874 0344 002B     		cmp	r3, #0
 875 0346 02D1     		bne	.L52
 389:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 876              		.loc 1 389 0
 877 0348 0A4B     		ldr	r3, .L79+16
 878 034a 0022     		movs	r2, #0
 879 034c 1A70     		strb	r2, [r3]
 880              	.L52:
 390:..\src/interruptions.c ****                     }   
 391:..\src/interruptions.c ****                 }
 392:..\src/interruptions.c ****                 
 393:..\src/interruptions.c ****                 // Check Interrupt 
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****                 if (interrupt_flag){
 881              		.loc 1 395 0
 882 034e 064B     		ldr	r3, .L79+4
 883 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 884 0352 002B     		cmp	r3, #0
 885 0354 00F08C80 		beq	.L77
 396:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 886              		.loc 1 396 0
 887 0358 034B     		ldr	r3, .L79+4
 888 035a 0022     		movs	r2, #0
 889 035c 1A70     		strb	r2, [r3]
 397:..\src/interruptions.c ****                     interrupt_manager();
 890              		.loc 1 397 0
 891 035e FFF7FEFF 		bl	interrupt_manager
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****             }  
 400:..\src/interruptions.c ****             break;
 892              		.loc 1 400 0
 893 0362 85E0     		b	.L77
 894              	.L80:
 895              		.align	2
 896              	.L79:
 897 0364 00000000 		.word	timer_value0
 898 0368 00000000 		.word	interrupt_flag
 899 036c 00000000 		.word	c_mem
 900 0370 00000000 		.word	N_Encoder_Line_Connected
 901 0374 00000000 		.word	change_ext_ref_flag
 902              	.L39:
 401:..\src/interruptions.c ****             
 402:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 403:..\src/interruptions.c ****             
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 24


 404:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 405:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 903              		.loc 1 405 0
 904 0378 3E4B     		ldr	r3, .L81
 905 037a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 037c 002B     		cmp	r3, #0
 907 037e 38D0     		beq	.L53
 908              		.loc 1 405 0 is_stmt 0 discriminator 1
 909 0380 3D4B     		ldr	r3, .L81+4
 910 0382 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 911 0386 002B     		cmp	r3, #0
 912 0388 33D0     		beq	.L53
 406:..\src/interruptions.c ****                 
 407:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 913              		.loc 1 407 0 is_stmt 1
 914 038a 3B4B     		ldr	r3, .L81+4
 915 038c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 916 0390 022B     		cmp	r3, #2
 917 0392 08D1     		bne	.L54
 408:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 918              		.loc 1 408 0
 919 0394 07F58843 		add	r3, r7, #17408
 920 0398 03F15D03 		add	r3, r3, #93
 921 039c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 922 039e 1846     		mov	r0, r3
 923 03a0 FFF7FEFF 		bl	air_chambers_control
 924 03a4 07E0     		b	.L55
 925              	.L54:
 409:..\src/interruptions.c ****                 }
 410:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 411:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 926              		.loc 1 411 0
 927 03a6 07F58843 		add	r3, r7, #17408
 928 03aa 03F15D03 		add	r3, r3, #93
 929 03ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 930 03b0 1846     		mov	r0, r3
 931 03b2 FFF7FEFF 		bl	otbk_act_wrist_control
 932              	.L55:
 412:..\src/interruptions.c ****                 }
 413:..\src/interruptions.c **** 
 414:..\src/interruptions.c ****                 // Check Interrupt 
 415:..\src/interruptions.c **** 
 416:..\src/interruptions.c ****                 if (interrupt_flag){
 933              		.loc 1 416 0
 934 03b6 314B     		ldr	r3, .L81+8
 935 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 936 03ba 002B     		cmp	r3, #0
 937 03bc 04D0     		beq	.L56
 417:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 938              		.loc 1 417 0
 939 03be 2F4B     		ldr	r3, .L81+8
 940 03c0 0022     		movs	r2, #0
 941 03c2 1A70     		strb	r2, [r3]
 418:..\src/interruptions.c ****                     interrupt_manager();
 942              		.loc 1 418 0
 943 03c4 FFF7FEFF 		bl	interrupt_manager
 944              	.L56:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 25


 419:..\src/interruptions.c ****                 }
 420:..\src/interruptions.c ****             
 421:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 945              		.loc 1 421 0
 946 03c8 2B4B     		ldr	r3, .L81+4
 947 03ca 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 948 03ce 07F58843 		add	r3, r7, #17408
 949 03d2 03F15D03 		add	r3, r3, #93
 950 03d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 951 03d8 1146     		mov	r1, r2
 952 03da 1846     		mov	r0, r3
 953 03dc FFF7FEFF 		bl	drive_slave
 422:..\src/interruptions.c ****             
 423:..\src/interruptions.c ****                 // Check Interrupt 
 424:..\src/interruptions.c **** 
 425:..\src/interruptions.c ****                 if (interrupt_flag){
 954              		.loc 1 425 0
 955 03e0 264B     		ldr	r3, .L81+8
 956 03e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957 03e4 002B     		cmp	r3, #0
 958 03e6 04D0     		beq	.L53
 426:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 959              		.loc 1 426 0
 960 03e8 244B     		ldr	r3, .L81+8
 961 03ea 0022     		movs	r2, #0
 962 03ec 1A70     		strb	r2, [r3]
 427:..\src/interruptions.c ****                     interrupt_manager();
 963              		.loc 1 427 0
 964 03ee FFF7FEFF 		bl	interrupt_manager
 965              	.L53:
 428:..\src/interruptions.c ****                 }
 429:..\src/interruptions.c ****             }
 430:..\src/interruptions.c ****             if (!master_mode){
 966              		.loc 1 430 0
 967 03f2 204B     		ldr	r3, .L81
 968 03f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 03f6 002B     		cmp	r3, #0
 970 03f8 11D1     		bne	.L57
 431:..\src/interruptions.c ****                 
 432:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 971              		.loc 1 432 0
 972 03fa 1F4B     		ldr	r3, .L81+4
 973 03fc 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 974 0400 002B     		cmp	r3, #0
 975 0402 01D0     		beq	.L58
 433:..\src/interruptions.c ****                     // Stop feedback motors
 434:..\src/interruptions.c ****                     stop_master_device();
 976              		.loc 1 434 0
 977 0404 FFF7FEFF 		bl	stop_master_device
 978              	.L58:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****                 // Disable slave or motors
 437:..\src/interruptions.c ****                 deactivate_slaves();
 979              		.loc 1 437 0
 980 0408 FFF7FEFF 		bl	deactivate_slaves
 438:..\src/interruptions.c ****                         
 439:..\src/interruptions.c ****                 // Check Interrupt 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 26


 440:..\src/interruptions.c ****                 if (interrupt_flag){
 981              		.loc 1 440 0
 982 040c 1B4B     		ldr	r3, .L81+8
 983 040e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 984 0410 002B     		cmp	r3, #0
 985 0412 04D0     		beq	.L57
 441:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 986              		.loc 1 441 0
 987 0414 194B     		ldr	r3, .L81+8
 988 0416 0022     		movs	r2, #0
 989 0418 1A70     		strb	r2, [r3]
 442:..\src/interruptions.c ****                     interrupt_manager();
 990              		.loc 1 442 0
 991 041a FFF7FEFF 		bl	interrupt_manager
 992              	.L57:
 443:..\src/interruptions.c ****                 } 
 444:..\src/interruptions.c ****             }
 445:..\src/interruptions.c ****     
 446:..\src/interruptions.c ****             // Control Master device main motor 
 447:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 448:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 993              		.loc 1 448 0
 994 041e 07F58843 		add	r3, r7, #17408
 995 0422 03F15E03 		add	r3, r3, #94
 996 0426 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 997 0428 1846     		mov	r0, r3
 998 042a FFF7FEFF 		bl	motor_control_generic
 449:..\src/interruptions.c ****                         
 450:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 451:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 999              		.loc 1 451 0
 1000 042e 124B     		ldr	r3, .L81+4
 1001 0430 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1002 0434 032B     		cmp	r3, #3
 1003 0436 0FD1     		bne	.L59
 452:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1004              		.loc 1 452 0
 1005 0438 114B     		ldr	r3, .L81+12
 1006 043a 9B68     		ldr	r3, [r3, #8]
 1007 043c 432B     		cmp	r3, #67
 1008 043e 02DD     		ble	.L60
 453:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1009              		.loc 1 453 0
 1010 0440 0F4B     		ldr	r3, .L81+12
 1011 0442 4322     		movs	r2, #67
 1012 0444 9A60     		str	r2, [r3, #8]
 1013              	.L60:
 454:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1014              		.loc 1 454 0
 1015 0446 0E4B     		ldr	r3, .L81+12
 1016 0448 9B68     		ldr	r3, [r3, #8]
 1017 044a 13F1430F 		cmn	r3, #67
 1018 044e 03DA     		bge	.L59
 455:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1019              		.loc 1 455 0
 1020 0450 0B4B     		ldr	r3, .L81+12
 1021 0452 6FF04202 		mvn	r2, #66
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 27


 1022 0456 9A60     		str	r2, [r3, #8]
 1023              	.L59:
 456:..\src/interruptions.c ****             }
 457:..\src/interruptions.c ****             
 458:..\src/interruptions.c ****             // Check Interrupt 
 459:..\src/interruptions.c **** 
 460:..\src/interruptions.c ****             if (interrupt_flag){
 1024              		.loc 1 460 0
 1025 0458 084B     		ldr	r3, .L81+8
 1026 045a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1027 045c 002B     		cmp	r3, #0
 1028 045e 11D0     		beq	.L78
 461:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1029              		.loc 1 461 0
 1030 0460 064B     		ldr	r3, .L81+8
 1031 0462 0022     		movs	r2, #0
 1032 0464 1A70     		strb	r2, [r3]
 462:..\src/interruptions.c ****                 interrupt_manager();
 1033              		.loc 1 462 0
 1034 0466 FFF7FEFF 		bl	interrupt_manager
 463:..\src/interruptions.c ****             }
 464:..\src/interruptions.c ****             
 465:..\src/interruptions.c ****             break;
 1035              		.loc 1 465 0
 1036 046a 0BE0     		b	.L78
 1037              	.L76:
 328:..\src/interruptions.c ****             
 1038              		.loc 1 328 0
 1039 046c 00BF     		nop
 1040 046e 0AE0     		b	.L35
 1041              	.L77:
 400:..\src/interruptions.c ****             
 1042              		.loc 1 400 0
 1043 0470 00BF     		nop
 1044 0472 08E0     		b	.L35
 1045              	.L82:
 1046              		.align	2
 1047              	.L81:
 1048 0474 00000000 		.word	master_mode
 1049 0478 00000000 		.word	c_mem
 1050 047c 00000000 		.word	interrupt_flag
 1051 0480 00000000 		.word	g_refNew
 1052              	.L78:
 1053              		.loc 1 465 0
 1054 0484 00BF     		nop
 1055              	.L35:
 466:..\src/interruptions.c ****     }
 467:..\src/interruptions.c **** 
 468:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****     analog_read_end();
 1056              		.loc 1 470 0
 1057 0486 FFF7FEFF 		bl	analog_read_end
 471:..\src/interruptions.c **** 
 472:..\src/interruptions.c ****     if (interrupt_flag){
 1058              		.loc 1 472 0
 1059 048a A74B     		ldr	r3, .L83
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 28


 1060 048c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1061 048e 002B     		cmp	r3, #0
 1062 0490 04D0     		beq	.L62
 473:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1063              		.loc 1 473 0
 1064 0492 A54B     		ldr	r3, .L83
 1065 0494 0022     		movs	r2, #0
 1066 0496 1A70     		strb	r2, [r3]
 474:..\src/interruptions.c ****         interrupt_manager();
 1067              		.loc 1 474 0
 1068 0498 FFF7FEFF 		bl	interrupt_manager
 1069              	.L62:
 475:..\src/interruptions.c ****     }
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 478:..\src/interruptions.c **** 
 479:..\src/interruptions.c ****     overcurrent_control();
 1070              		.loc 1 479 0
 1071 049c FFF7FEFF 		bl	overcurrent_control
 480:..\src/interruptions.c ****     
 481:..\src/interruptions.c ****     // Check Interrupt 
 482:..\src/interruptions.c ****     
 483:..\src/interruptions.c ****     if (interrupt_flag){
 1072              		.loc 1 483 0
 1073 04a0 A14B     		ldr	r3, .L83
 1074 04a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1075 04a4 002B     		cmp	r3, #0
 1076 04a6 04D0     		beq	.L63
 484:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1077              		.loc 1 484 0
 1078 04a8 9F4B     		ldr	r3, .L83
 1079 04aa 0022     		movs	r2, #0
 1080 04ac 1A70     		strb	r2, [r3]
 485:..\src/interruptions.c ****         interrupt_manager();
 1081              		.loc 1 485 0
 1082 04ae FFF7FEFF 		bl	interrupt_manager
 1083              	.L63:
 486:..\src/interruptions.c ****     }
 487:..\src/interruptions.c **** 
 488:..\src/interruptions.c ****     //---------------------------------- Calibration 
 489:..\src/interruptions.c **** 
 490:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 491:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1084              		.loc 1 491 0
 1085 04b2 9E4B     		ldr	r3, .L83+4
 1086 04b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1087 04b6 012B     		cmp	r3, #1
 1088 04b8 0ED1     		bne	.L64
 492:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1089              		.loc 1 492 0
 1090 04ba 9D4B     		ldr	r3, .L83+8
 1091 04bc 1B88     		ldrh	r3, [r3]
 1092 04be 0A2B     		cmp	r3, #10
 1093 04c0 04D1     		bne	.L65
 493:..\src/interruptions.c ****             calibration();
 1094              		.loc 1 493 0
 1095 04c2 FFF7FEFF 		bl	calibration
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 29


 494:..\src/interruptions.c ****             counter_calibration = 0;
 1096              		.loc 1 494 0
 1097 04c6 9A4B     		ldr	r3, .L83+8
 1098 04c8 0022     		movs	r2, #0
 1099 04ca 1A80     		strh	r2, [r3]	@ movhi
 1100              	.L65:
 495:..\src/interruptions.c ****         }
 496:..\src/interruptions.c ****         counter_calibration++;
 1101              		.loc 1 496 0
 1102 04cc 984B     		ldr	r3, .L83+8
 1103 04ce 1B88     		ldrh	r3, [r3]
 1104 04d0 0133     		adds	r3, r3, #1
 1105 04d2 9AB2     		uxth	r2, r3
 1106 04d4 964B     		ldr	r3, .L83+8
 1107 04d6 1A80     		strh	r2, [r3]	@ movhi
 1108              	.L64:
 497:..\src/interruptions.c ****     }
 498:..\src/interruptions.c **** 
 499:..\src/interruptions.c ****     // Check Interrupt 
 500:..\src/interruptions.c ****     
 501:..\src/interruptions.c ****     if (interrupt_flag){
 1109              		.loc 1 501 0
 1110 04d8 934B     		ldr	r3, .L83
 1111 04da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 04dc 002B     		cmp	r3, #0
 1113 04de 04D0     		beq	.L66
 502:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1114              		.loc 1 502 0
 1115 04e0 914B     		ldr	r3, .L83
 1116 04e2 0022     		movs	r2, #0
 1117 04e4 1A70     		strb	r2, [r3]
 503:..\src/interruptions.c ****         interrupt_manager();
 1118              		.loc 1 503 0
 1119 04e6 FFF7FEFF 		bl	interrupt_manager
 1120              	.L66:
 504:..\src/interruptions.c ****     }
 505:..\src/interruptions.c ****     
 506:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1121              		.loc 1 506 0
 1122 04ea 924B     		ldr	r3, .L83+12
 1123 04ec 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1124 04f0 002B     		cmp	r3, #0
 1125 04f2 1CD1     		bne	.L67
 507:..\src/interruptions.c ****     
 508:..\src/interruptions.c ****         //---------------------------------- Rest position check
 509:..\src/interruptions.c **** 
 510:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 511:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1126              		.loc 1 511 0
 1127 04f4 8F4B     		ldr	r3, .L83+12
 1128 04f6 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1129 04fa 012B     		cmp	r3, #1
 1130 04fc 17D1     		bne	.L67
 512:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1131              		.loc 1 512 0
 1132 04fe 8C4B     		ldr	r3, .L83+8
 1133 0500 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 30


 1134 0502 0A2B     		cmp	r3, #10
 1135 0504 04D1     		bne	.L68
 513:..\src/interruptions.c ****                     check_rest_position();
 1136              		.loc 1 513 0
 1137 0506 FFF7FEFF 		bl	check_rest_position
 514:..\src/interruptions.c ****                     counter_calibration = 0;
 1138              		.loc 1 514 0
 1139 050a 894B     		ldr	r3, .L83+8
 1140 050c 0022     		movs	r2, #0
 1141 050e 1A80     		strh	r2, [r3]	@ movhi
 1142              	.L68:
 515:..\src/interruptions.c ****             }
 516:..\src/interruptions.c ****             counter_calibration++;
 1143              		.loc 1 516 0
 1144 0510 874B     		ldr	r3, .L83+8
 1145 0512 1B88     		ldrh	r3, [r3]
 1146 0514 0133     		adds	r3, r3, #1
 1147 0516 9AB2     		uxth	r2, r3
 1148 0518 854B     		ldr	r3, .L83+8
 1149 051a 1A80     		strh	r2, [r3]	@ movhi
 517:..\src/interruptions.c **** 
 518:..\src/interruptions.c ****             // Check Interrupt     
 519:..\src/interruptions.c ****             if (interrupt_flag){
 1150              		.loc 1 519 0
 1151 051c 824B     		ldr	r3, .L83
 1152 051e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1153 0520 002B     		cmp	r3, #0
 1154 0522 04D0     		beq	.L67
 520:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1155              		.loc 1 520 0
 1156 0524 804B     		ldr	r3, .L83
 1157 0526 0022     		movs	r2, #0
 1158 0528 1A70     		strb	r2, [r3]
 521:..\src/interruptions.c ****                 interrupt_manager();
 1159              		.loc 1 521 0
 1160 052a FFF7FEFF 		bl	interrupt_manager
 1161              	.L67:
 522:..\src/interruptions.c ****             }
 523:..\src/interruptions.c ****         }
 524:..\src/interruptions.c ****         
 525:..\src/interruptions.c ****     }
 526:..\src/interruptions.c ****     
 527:..\src/interruptions.c ****      
 528:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 529:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1162              		.loc 1 529 0
 1163 052e 814B     		ldr	r3, .L83+12
 1164 0530 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1165 0534 002B     		cmp	r3, #0
 1166 0536 0AD0     		beq	.L69
 530:..\src/interruptions.c ****         
 531:..\src/interruptions.c ****         update_EMG_history();
 1167              		.loc 1 531 0
 1168 0538 FFF7FEFF 		bl	update_EMG_history
 532:..\src/interruptions.c **** 
 533:..\src/interruptions.c ****         // Check Interrupt 
 534:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 31


 535:..\src/interruptions.c ****         if (interrupt_flag){
 1169              		.loc 1 535 0
 1170 053c 7A4B     		ldr	r3, .L83
 1171 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1172 0540 002B     		cmp	r3, #0
 1173 0542 04D0     		beq	.L69
 536:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1174              		.loc 1 536 0
 1175 0544 784B     		ldr	r3, .L83
 1176 0546 0022     		movs	r2, #0
 1177 0548 1A70     		strb	r2, [r3]
 537:..\src/interruptions.c ****             interrupt_manager();
 1178              		.loc 1 537 0
 1179 054a FFF7FEFF 		bl	interrupt_manager
 1180              	.L69:
 538:..\src/interruptions.c ****         }
 539:..\src/interruptions.c ****     }
 540:..\src/interruptions.c **** 
 541:..\src/interruptions.c ****     
 542:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 543:..\src/interruptions.c **** 
 544:..\src/interruptions.c ****     cycles_counter_update();
 1181              		.loc 1 544 0
 1182 054e FFF7FEFF 		bl	cycles_counter_update
 545:..\src/interruptions.c **** 
 546:..\src/interruptions.c ****     // Check Cycles Interrupt 
 547:..\src/interruptions.c ****     
 548:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1183              		.loc 1 548 0
 1184 0552 794B     		ldr	r3, .L83+16
 1185 0554 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1186 0556 002B     		cmp	r3, #0
 1187 0558 5BD0     		beq	.L70
 549:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1188              		.loc 1 549 0
 1189 055a 774B     		ldr	r3, .L83+16
 1190 055c 0022     		movs	r2, #0
 1191 055e 1A70     		strb	r2, [r3]
 550:..\src/interruptions.c **** 
 551:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 552:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 553:..\src/interruptions.c ****         if(can_write) {
 1192              		.loc 1 553 0
 1193 0560 764B     		ldr	r3, .L83+20
 1194 0562 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1195 0564 002B     		cmp	r3, #0
 1196 0566 54D0     		beq	.L70
 554:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1197              		.loc 1 554 0
 1198 0568 754B     		ldr	r3, .L83+24
 1199 056a 0022     		movs	r2, #0
 1200 056c 1A70     		strb	r2, [r3]
 555:..\src/interruptions.c ****             
 556:..\src/interruptions.c ****             //Update time variable
 557:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1201              		.loc 1 557 0
 1202 056e 754B     		ldr	r3, .L83+28
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 32


 1203 0570 9B6D     		ldr	r3, [r3, #88]
 1204 0572 7833     		adds	r3, r3, #120
 1205 0574 734A     		ldr	r2, .L83+28
 1206 0576 9365     		str	r3, [r2, #88]
 558:..\src/interruptions.c ****             
 559:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1207              		.loc 1 559 0
 1208 0578 6E4B     		ldr	r3, .L83+12
 1209 057a 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1210 057e 012B     		cmp	r3, #1
 1211 0580 47D1     		bne	.L70
 560:..\src/interruptions.c ****                 
 561:..\src/interruptions.c ****                 store_RTC_current_time();
 1212              		.loc 1 561 0
 1213 0582 FFF7FEFF 		bl	store_RTC_current_time
 562:..\src/interruptions.c ****                 
 563:..\src/interruptions.c ****                 //Write in SD card
 564:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1214              		.loc 1 564 0
 1215 0586 07F56A53 		add	r3, r7, #14976
 1216 058a 03F11803 		add	r3, r3, #24
 1217 058e 1846     		mov	r0, r3
 1218 0590 FFF7FEFF 		bl	prepare_SD_info
 565:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1219              		.loc 1 565 0
 1220 0594 6C4B     		ldr	r3, .L83+32
 1221 0596 1C68     		ldr	r4, [r3]
 1222 0598 07F56A53 		add	r3, r7, #14976
 1223 059c 03F11803 		add	r3, r3, #24
 1224 05a0 1846     		mov	r0, r3
 1225 05a2 FFF7FEFF 		bl	strlen
 1226 05a6 0246     		mov	r2, r0
 1227 05a8 07F56A53 		add	r3, r7, #14976
 1228 05ac 03F11803 		add	r3, r3, #24
 1229 05b0 1946     		mov	r1, r3
 1230 05b2 2046     		mov	r0, r4
 1231 05b4 FFF7FEFF 		bl	FS_Write
 566:..\src/interruptions.c ****                 
 567:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1232              		.loc 1 567 0
 1233 05b8 5E4B     		ldr	r3, .L83+12
 1234 05ba 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1235 05be 002B     		cmp	r3, #0
 1236 05c0 27D0     		beq	.L70
 1237              	.LBB3:
 568:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1238              		.loc 1 568 0
 1239 05c2 07F16003 		add	r3, r7, #96
 1240 05c6 603B     		subs	r3, r3, #96
 1241 05c8 0022     		movs	r2, #0
 1242 05ca 1A60     		str	r2, [r3]
 1243 05cc 0433     		adds	r3, r3, #4
 1244 05ce 43F69422 		movw	r2, #14996
 1245 05d2 0021     		movs	r1, #0
 1246 05d4 1846     		mov	r0, r3
 1247 05d6 FFF7FEFF 		bl	memset
 569:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 33


 1248              		.loc 1 569 0
 1249 05da 5C4B     		ldr	r3, .L83+36
 1250 05dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1251 05de 07F16003 		add	r3, r7, #96
 1252 05e2 603B     		subs	r3, r3, #96
 1253 05e4 1A70     		strb	r2, [r3]
 570:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1254              		.loc 1 570 0
 1255 05e6 07F16003 		add	r3, r7, #96
 1256 05ea 603B     		subs	r3, r3, #96
 1257 05ec 1846     		mov	r0, r3
 1258 05ee FFF7FEFF 		bl	prepare_SD_EMG_history
 571:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1259              		.loc 1 571 0
 1260 05f2 574B     		ldr	r3, .L83+40
 1261 05f4 1C68     		ldr	r4, [r3]
 1262 05f6 07F16003 		add	r3, r7, #96
 1263 05fa 603B     		subs	r3, r3, #96
 1264 05fc 1846     		mov	r0, r3
 1265 05fe FFF7FEFF 		bl	strlen
 1266 0602 0246     		mov	r2, r0
 1267 0604 07F16003 		add	r3, r7, #96
 1268 0608 603B     		subs	r3, r3, #96
 1269 060a 1946     		mov	r1, r3
 1270 060c 2046     		mov	r0, r4
 1271 060e FFF7FEFF 		bl	FS_Write
 1272              	.L70:
 1273              	.LBE3:
 572:..\src/interruptions.c ****                 }
 573:..\src/interruptions.c ****             }
 574:..\src/interruptions.c ****         }
 575:..\src/interruptions.c ****     }
 576:..\src/interruptions.c ****     
 577:..\src/interruptions.c ****     // Check Interrupt 
 578:..\src/interruptions.c ****     
 579:..\src/interruptions.c ****     if (interrupt_flag){
 1274              		.loc 1 579 0
 1275 0612 454B     		ldr	r3, .L83
 1276 0614 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1277 0616 002B     		cmp	r3, #0
 1278 0618 04D0     		beq	.L71
 580:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1279              		.loc 1 580 0
 1280 061a 434B     		ldr	r3, .L83
 1281 061c 0022     		movs	r2, #0
 1282 061e 1A70     		strb	r2, [r3]
 581:..\src/interruptions.c ****         interrupt_manager();
 1283              		.loc 1 581 0
 1284 0620 FFF7FEFF 		bl	interrupt_manager
 1285              	.L71:
 582:..\src/interruptions.c ****     }
 583:..\src/interruptions.c ****     
 584:..\src/interruptions.c ****     
 585:..\src/interruptions.c ****     //---------------------------------- Check battery
 586:..\src/interruptions.c **** 
 587:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 588:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 34


 1286              		.loc 1 588 0
 1287 0624 4B4B     		ldr	r3, .L83+44
 1288 0626 1B88     		ldrh	r3, [r3]
 1289 0628 0A2B     		cmp	r3, #10
 1290 062a 04D1     		bne	.L72
 589:..\src/interruptions.c ****         battery_management();   
 1291              		.loc 1 589 0
 1292 062c FFF7FEFF 		bl	battery_management
 590:..\src/interruptions.c ****         counter_tension_func = 0;
 1293              		.loc 1 590 0
 1294 0630 484B     		ldr	r3, .L83+44
 1295 0632 0022     		movs	r2, #0
 1296 0634 1A80     		strh	r2, [r3]	@ movhi
 1297              	.L72:
 591:..\src/interruptions.c ****     }
 592:..\src/interruptions.c ****     counter_tension_func++;
 1298              		.loc 1 592 0
 1299 0636 474B     		ldr	r3, .L83+44
 1300 0638 1B88     		ldrh	r3, [r3]
 1301 063a 0133     		adds	r3, r3, #1
 1302 063c 9AB2     		uxth	r2, r3
 1303 063e 454B     		ldr	r3, .L83+44
 1304 0640 1A80     		strh	r2, [r3]	@ movhi
 593:..\src/interruptions.c **** 
 594:..\src/interruptions.c ****     // Check Interrupt 
 595:..\src/interruptions.c ****     
 596:..\src/interruptions.c ****     if (interrupt_flag){
 1305              		.loc 1 596 0
 1306 0642 394B     		ldr	r3, .L83
 1307 0644 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1308 0646 002B     		cmp	r3, #0
 1309 0648 04D0     		beq	.L73
 597:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1310              		.loc 1 597 0
 1311 064a 374B     		ldr	r3, .L83
 1312 064c 0022     		movs	r2, #0
 1313 064e 1A70     		strb	r2, [r3]
 598:..\src/interruptions.c ****         interrupt_manager();
 1314              		.loc 1 598 0
 1315 0650 FFF7FEFF 		bl	interrupt_manager
 1316              	.L73:
 599:..\src/interruptions.c ****     }
 600:..\src/interruptions.c ****    
 601:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 602:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1317              		.loc 1 602 0
 1318 0654 374B     		ldr	r3, .L83+12
 1319 0656 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1320 065a 002B     		cmp	r3, #0
 1321 065c 0AD0     		beq	.L74
 603:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1322              		.loc 1 603 0
 1323 065e FFF7FEFF 		bl	ReadAllIMUs
 604:..\src/interruptions.c ****         
 605:..\src/interruptions.c ****         if (interrupt_flag){
 1324              		.loc 1 605 0
 1325 0662 314B     		ldr	r3, .L83
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 35


 1326 0664 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1327 0666 002B     		cmp	r3, #0
 1328 0668 04D0     		beq	.L74
 606:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1329              		.loc 1 606 0
 1330 066a 2F4B     		ldr	r3, .L83
 1331 066c 0022     		movs	r2, #0
 1332 066e 1A70     		strb	r2, [r3]
 607:..\src/interruptions.c ****             interrupt_manager();
 1333              		.loc 1 607 0
 1334 0670 FFF7FEFF 		bl	interrupt_manager
 1335              	.L74:
 608:..\src/interruptions.c ****         }
 609:..\src/interruptions.c ****     }
 610:..\src/interruptions.c ****    
 611:..\src/interruptions.c ****     //---------------------------------- Update States
 612:..\src/interruptions.c ****     
 613:..\src/interruptions.c ****     // Load k-1 state
 614:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1336              		.loc 1 614 0
 1337 0674 384A     		ldr	r2, .L83+48
 1338 0676 394B     		ldr	r3, .L83+52
 1339 0678 1446     		mov	r4, r2
 1340 067a 1D46     		mov	r5, r3
 1341 067c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1342 067e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1343 0680 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1344 0682 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1345 0684 95E80300 		ldmia	r5, {r0, r1}
 1346 0688 84E80300 		stmia	r4, {r0, r1}
 615:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1347              		.loc 1 615 0
 1348 068c 344A     		ldr	r2, .L83+56
 1349 068e 354B     		ldr	r3, .L83+60
 1350 0690 1046     		mov	r0, r2
 1351 0692 1946     		mov	r1, r3
 1352 0694 6823     		movs	r3, #104
 1353 0696 1A46     		mov	r2, r3
 1354 0698 FFF7FEFF 		bl	memcpy
 616:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1355              		.loc 1 616 0
 1356 069c 324A     		ldr	r2, .L83+64
 1357 069e 334B     		ldr	r3, .L83+68
 1358 06a0 1446     		mov	r4, r2
 1359 06a2 1D46     		mov	r5, r3
 1360 06a4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1361 06a6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1362 06a8 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1363 06ac 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 617:..\src/interruptions.c **** 
 618:..\src/interruptions.c ****     // Load k+1 state        
 619:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1364              		.loc 1 619 0
 1365 06b0 2E4A     		ldr	r2, .L83+68
 1366 06b2 2F4B     		ldr	r3, .L83+72
 1367 06b4 1446     		mov	r4, r2
 1368 06b6 1D46     		mov	r5, r3
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 36


 1369 06b8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1370 06ba 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1371 06bc 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1372 06c0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 620:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1373              		.loc 1 620 0
 1374 06c4 2B4A     		ldr	r2, .L83+76
 1375 06c6 2C4B     		ldr	r3, .L83+80
 1376 06c8 1046     		mov	r0, r2
 1377 06ca 1946     		mov	r1, r3
 1378 06cc C823     		movs	r3, #200
 1379 06ce 1A46     		mov	r2, r3
 1380 06d0 FFF7FEFF 		bl	memcpy
 621:..\src/interruptions.c ****                 
 622:..\src/interruptions.c ****     if (interrupt_flag){
 1381              		.loc 1 622 0
 1382 06d4 144B     		ldr	r3, .L83
 1383 06d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1384 06d8 002B     		cmp	r3, #0
 1385 06da 04D0     		beq	.L75
 623:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1386              		.loc 1 623 0
 1387 06dc 124B     		ldr	r3, .L83
 1388 06de 0022     		movs	r2, #0
 1389 06e0 1A70     		strb	r2, [r3]
 624:..\src/interruptions.c ****         interrupt_manager();
 1390              		.loc 1 624 0
 1391 06e2 FFF7FEFF 		bl	interrupt_manager
 1392              	.L75:
 625:..\src/interruptions.c ****     }
 626:..\src/interruptions.c **** 
 627:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1393              		.loc 1 627 0
 1394 06e6 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1395 06ea 0346     		mov	r3, r0
 1396 06ec 1A46     		mov	r2, r3
 1397 06ee 234B     		ldr	r3, .L83+84
 1398 06f0 1A80     		strh	r2, [r3]	@ movhi
 628:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1399              		.loc 1 628 0
 1400 06f2 234B     		ldr	r3, .L83+88
 1401 06f4 1B88     		ldrh	r3, [r3]
 1402 06f6 1A46     		mov	r2, r3
 1403 06f8 204B     		ldr	r3, .L83+84
 1404 06fa 1B88     		ldrh	r3, [r3]
 1405 06fc D31A     		subs	r3, r2, r3
 1406 06fe 1846     		mov	r0, r3
 1407 0700 FFF7FEFF 		bl	__aeabi_i2f
 1408 0704 0346     		mov	r3, r0
 1409 0706 1F49     		ldr	r1, .L83+92
 1410 0708 1846     		mov	r0, r3
 1411 070a FFF7FEFF 		bl	__aeabi_fdiv
 1412 070e 0346     		mov	r3, r0
 1413 0710 1A46     		mov	r2, r3
 1414 0712 1D4B     		ldr	r3, .L83+96
 1415 0714 1A60     		str	r2, [r3]	@ float
 629:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 37


 1416              		.loc 1 629 0
 1417 0716 0120     		movs	r0, #1
 1418 0718 FFF7FEFF 		bl	MY_TIMER_REG_Write
 630:..\src/interruptions.c **** 
 631:..\src/interruptions.c **** }
 1419              		.loc 1 631 0
 1420 071c 00BF     		nop
 1421 071e 07F58847 		add	r7, r7, #17408
 1422 0722 6037     		adds	r7, r7, #96
 1423              		.cfi_def_cfa_offset 16
 1424 0724 BD46     		mov	sp, r7
 1425              		.cfi_def_cfa_register 13
 1426              		@ sp needed
 1427 0726 B0BD     		pop	{r4, r5, r7, pc}
 1428              	.L84:
 1429              		.align	2
 1430              	.L83:
 1431 0728 00000000 		.word	interrupt_flag
 1432 072c 00000000 		.word	calib
 1433 0730 00000000 		.word	counter_calibration.10465
 1434 0734 00000000 		.word	c_mem
 1435 0738 00000000 		.word	cycles_interrupt_flag
 1436 073c 00000000 		.word	can_write
 1437 0740 00000000 		.word	cycles_status
 1438 0744 00000000 		.word	g_mem
 1439 0748 00000000 		.word	pFile
 1440 074c 20000000 		.word	.LC0
 1441 0750 00000000 		.word	pEMGHFile
 1442 0754 02000000 		.word	counter_tension_func.10466
 1443 0758 00000000 		.word	g_adc_measOld
 1444 075c 00000000 		.word	g_adc_meas
 1445 0760 00000000 		.word	g_measOld
 1446 0764 00000000 		.word	g_meas
 1447 0768 00000000 		.word	g_refOld
 1448 076c 00000000 		.word	g_ref
 1449 0770 00000000 		.word	g_refNew
 1450 0774 00000000 		.word	g_imu
 1451 0778 00000000 		.word	g_imuNew
 1452 077c 00000000 		.word	timer_value
 1453 0780 00000000 		.word	timer_value0
 1454 0784 00247449 		.word	1232348160
 1455 0788 00000000 		.word	cycle_time
 1456              		.cfi_endproc
 1457              	.LFE67:
 1458              		.size	function_scheduler, .-function_scheduler
 1459              		.section	.text.compute_reference,"ax",%progbits
 1460              		.align	2
 1461              		.global	compute_reference
 1462              		.thumb
 1463              		.thumb_func
 1464              		.type	compute_reference, %function
 1465              	compute_reference:
 1466              	.LFB68:
 632:..\src/interruptions.c **** 
 633:..\src/interruptions.c **** //==============================================================================
 634:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 635:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 38


 636:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1467              		.loc 1 636 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 40
 1470              		@ frame_needed = 1, uses_anonymous_args = 0
 1471 0000 80B5     		push	{r7, lr}
 1472              		.cfi_def_cfa_offset 8
 1473              		.cfi_offset 7, -8
 1474              		.cfi_offset 14, -4
 1475 0002 8CB0     		sub	sp, sp, #48
 1476              		.cfi_def_cfa_offset 56
 1477 0004 02AF     		add	r7, sp, #8
 1478              		.cfi_def_cfa 7, 48
 1479 0006 0346     		mov	r3, r0
 1480 0008 B960     		str	r1, [r7, #8]
 1481 000a 7A60     		str	r2, [r7, #4]
 1482 000c FB73     		strb	r3, [r7, #15]
 637:..\src/interruptions.c ****     
 638:..\src/interruptions.c ****     int32 CYDATA handle_value;
 639:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 640:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1483              		.loc 1 640 0
 1484 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1485 0010 1346     		mov	r3, r2
 1486 0012 DB00     		lsls	r3, r3, #3
 1487 0014 9B1A     		subs	r3, r3, r2
 1488 0016 1B01     		lsls	r3, r3, #4
 1489 0018 B033     		adds	r3, r3, #176
 1490 001a A74A     		ldr	r2, .L149
 1491 001c 1344     		add	r3, r3, r2
 1492 001e 3B62     		str	r3, [r7, #32]
 641:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1493              		.loc 1 641 0
 1494 0020 3B6A     		ldr	r3, [r7, #32]
 1495 0022 93F86030 		ldrb	r3, [r3, #96]
 1496 0026 FB77     		strb	r3, [r7, #31]
 642:..\src/interruptions.c ****     
 643:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 644:..\src/interruptions.c ****                                                         // 1 EMG 1
 645:..\src/interruptions.c ****                                                         // 2 EMG 2
 646:..\src/interruptions.c ****                                                         // wait for both to get down
 647:..\src/interruptions.c ****     
 648:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1497              		.loc 1 648 0
 1498 0028 A44B     		ldr	r3, .L149+4
 1499 002a 1B68     		ldr	r3, [r3]
 1500 002c A24A     		ldr	r2, .L149
 1501 002e B2F8F021 		ldrh	r2, [r2, #496]
 1502 0032 9B1A     		subs	r3, r3, r2
 1503 0034 BB61     		str	r3, [r7, #24]
 649:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1504              		.loc 1 649 0
 1505 0036 A14B     		ldr	r3, .L149+4
 1506 0038 5B68     		ldr	r3, [r3, #4]
 1507 003a 9F4A     		ldr	r2, .L149
 1508 003c B2F8F221 		ldrh	r2, [r2, #498]
 1509 0040 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 39


 1510 0042 7B61     		str	r3, [r7, #20]
 650:..\src/interruptions.c ****     
 651:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 652:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1511              		.loc 1 652 0
 1512 0044 3B6A     		ldr	r3, [r7, #32]
 1513 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1514 004a 013B     		subs	r3, r3, #1
 1515 004c 062B     		cmp	r3, #6
 1516 004e 00F25182 		bhi	.L141
 1517 0052 01A2     		adr	r2, .L88
 1518 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1519              		.p2align 2
 1520              	.L88:
 1521 0058 75000000 		.word	.L87+1
 1522 005c 21020000 		.word	.L89+1
 1523 0060 C9020000 		.word	.L90+1
 1524 0064 31030000 		.word	.L91+1
 1525 0068 11040000 		.word	.L92+1
 1526 006c 4D010000 		.word	.L93+1
 1527 0070 5B020000 		.word	.L94+1
 1528              		.p2align 1
 1529              	.L87:
 653:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 654:..\src/interruptions.c **** 
 655:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 656:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 657:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1530              		.loc 1 657 0
 1531 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1532 0076 9049     		ldr	r1, .L149
 1533 0078 1346     		mov	r3, r2
 1534 007a 5B00     		lsls	r3, r3, #1
 1535 007c 1344     		add	r3, r3, r2
 1536 007e 1B01     		lsls	r3, r3, #4
 1537 0080 0B44     		add	r3, r3, r1
 1538 0082 03F5D873 		add	r3, r3, #432
 1539 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1540 0088 002B     		cmp	r3, #0
 1541 008a 19D0     		beq	.L95
 658:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1542              		.loc 1 658 0
 1543 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1544 008e 8C4A     		ldr	r2, .L149+8
 1545 0090 3421     		movs	r1, #52
 1546 0092 01FB03F3 		mul	r3, r1, r3
 1547 0096 1344     		add	r3, r3, r2
 1548 0098 0833     		adds	r3, r3, #8
 1549 009a 1968     		ldr	r1, [r3]
 1550 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1551 009e 8648     		ldr	r0, .L149
 1552 00a0 1346     		mov	r3, r2
 1553 00a2 5B00     		lsls	r3, r3, #1
 1554 00a4 1344     		add	r3, r3, r2
 1555 00a6 1B01     		lsls	r3, r3, #4
 1556 00a8 0344     		add	r3, r3, r0
 1557 00aa 03F5DA73 		add	r3, r3, #436
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 40


 1558 00ae 93F90030 		ldrsb	r3, [r3]
 1559 00b2 03FB01F2 		mul	r2, r3, r1
 1560 00b6 3B6A     		ldr	r3, [r7, #32]
 1561 00b8 5B6B     		ldr	r3, [r3, #52]
 1562 00ba 1344     		add	r3, r3, r2
 1563 00bc 7B62     		str	r3, [r7, #36]
 1564 00be 18E0     		b	.L96
 1565              	.L95:
 659:..\src/interruptions.c ****             else
 660:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1566              		.loc 1 660 0
 1567 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1568 00c2 7F4A     		ldr	r2, .L149+8
 1569 00c4 3421     		movs	r1, #52
 1570 00c6 01FB03F3 		mul	r3, r1, r3
 1571 00ca 1344     		add	r3, r3, r2
 1572 00cc 0433     		adds	r3, r3, #4
 1573 00ce 1968     		ldr	r1, [r3]
 1574 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1575 00d2 7948     		ldr	r0, .L149
 1576 00d4 1346     		mov	r3, r2
 1577 00d6 5B00     		lsls	r3, r3, #1
 1578 00d8 1344     		add	r3, r3, r2
 1579 00da 1B01     		lsls	r3, r3, #4
 1580 00dc 0344     		add	r3, r3, r0
 1581 00de 03F5DA73 		add	r3, r3, #436
 1582 00e2 93F90030 		ldrsb	r3, [r3]
 1583 00e6 03FB01F2 		mul	r2, r3, r1
 1584 00ea 3B6A     		ldr	r3, [r7, #32]
 1585 00ec 5B6B     		ldr	r3, [r3, #52]
 1586 00ee 1344     		add	r3, r3, r2
 1587 00f0 7B62     		str	r3, [r7, #36]
 1588              	.L96:
 661:..\src/interruptions.c ****             
 662:..\src/interruptions.c **** 
 663:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 664:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1589              		.loc 1 664 0
 1590 00f2 7B68     		ldr	r3, [r7, #4]
 1591 00f4 1B68     		ldr	r3, [r3]
 1592 00f6 7A6A     		ldr	r2, [r7, #36]
 1593 00f8 D21A     		subs	r2, r2, r3
 1594 00fa 3B6A     		ldr	r3, [r7, #32]
 1595 00fc 1B6C     		ldr	r3, [r3, #64]
 1596 00fe 9A42     		cmp	r2, r3
 1597 0100 0BDD     		ble	.L97
 1598              		.loc 1 664 0 is_stmt 0 discriminator 1
 1599 0102 3B6A     		ldr	r3, [r7, #32]
 1600 0104 1B6C     		ldr	r3, [r3, #64]
 1601 0106 002B     		cmp	r3, #0
 1602 0108 07D0     		beq	.L97
 665:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1603              		.loc 1 665 0 is_stmt 1
 1604 010a BB68     		ldr	r3, [r7, #8]
 1605 010c 1A68     		ldr	r2, [r3]
 1606 010e 3B6A     		ldr	r3, [r7, #32]
 1607 0110 1B6C     		ldr	r3, [r3, #64]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 41


 1608 0112 1A44     		add	r2, r2, r3
 1609 0114 BB68     		ldr	r3, [r7, #8]
 1610 0116 1A60     		str	r2, [r3]
 1611 0118 17E0     		b	.L98
 1612              	.L97:
 666:..\src/interruptions.c ****             else {
 667:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1613              		.loc 1 667 0
 1614 011a 7B68     		ldr	r3, [r7, #4]
 1615 011c 1B68     		ldr	r3, [r3]
 1616 011e 7A6A     		ldr	r2, [r7, #36]
 1617 0120 D21A     		subs	r2, r2, r3
 1618 0122 3B6A     		ldr	r3, [r7, #32]
 1619 0124 DB6B     		ldr	r3, [r3, #60]
 1620 0126 9A42     		cmp	r2, r3
 1621 0128 0BDA     		bge	.L99
 1622              		.loc 1 667 0 is_stmt 0 discriminator 1
 1623 012a 3B6A     		ldr	r3, [r7, #32]
 1624 012c DB6B     		ldr	r3, [r3, #60]
 1625 012e 002B     		cmp	r3, #0
 1626 0130 07D0     		beq	.L99
 668:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1627              		.loc 1 668 0 is_stmt 1
 1628 0132 BB68     		ldr	r3, [r7, #8]
 1629 0134 1A68     		ldr	r2, [r3]
 1630 0136 3B6A     		ldr	r3, [r7, #32]
 1631 0138 DB6B     		ldr	r3, [r3, #60]
 1632 013a 1A44     		add	r2, r2, r3
 1633 013c BB68     		ldr	r3, [r7, #8]
 1634 013e 1A60     		str	r2, [r3]
 1635 0140 03E0     		b	.L98
 1636              	.L99:
 669:..\src/interruptions.c ****                 else
 670:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1637              		.loc 1 670 0
 1638 0142 BB68     		ldr	r3, [r7, #8]
 1639 0144 7A6A     		ldr	r2, [r7, #36]
 1640 0146 1A60     		str	r2, [r3]
 671:..\src/interruptions.c ****             }
 672:..\src/interruptions.c ****             break;
 1641              		.loc 1 672 0
 1642 0148 DFE1     		b	.L100
 1643              	.L98:
 1644 014a DEE1     		b	.L100
 1645              	.L93:
 673:..\src/interruptions.c ****         
 674:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 675:..\src/interruptions.c ****             
 676:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1646              		.loc 1 676 0
 1647 014c 5A4B     		ldr	r3, .L149
 1648 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1649 0152 002B     		cmp	r3, #0
 1650 0154 57D1     		bne	.L101
 677:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 678:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1651              		.loc 1 678 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 42


 1652 0156 7B68     		ldr	r3, [r7, #4]
 1653 0158 1A68     		ldr	r2, [r3]
 1654 015a BB68     		ldr	r3, [r7, #8]
 1655 015c 1A60     		str	r2, [r3]
 679:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1656              		.loc 1 679 0
 1657 015e 574B     		ldr	r3, .L149+4
 1658 0160 1B6A     		ldr	r3, [r3, #32]
 1659 0162 B3F52F7F 		cmp	r3, #700
 1660 0166 45DC     		bgt	.L102
 1661              	.LBB4:
 680:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1662              		.loc 1 680 0
 1663 0168 544B     		ldr	r3, .L149+4
 1664 016a 1B6A     		ldr	r3, [r3, #32]
 1665 016c 524A     		ldr	r2, .L149
 1666 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1667 0172 9B1A     		subs	r3, r3, r2
 1668 0174 3B61     		str	r3, [r7, #16]
 681:..\src/interruptions.c **** 
 682:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1669              		.loc 1 682 0
 1670 0176 514B     		ldr	r3, .L149+4
 1671 0178 1B6A     		ldr	r3, [r3, #32]
 1672 017a 4F4A     		ldr	r2, .L149
 1673 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1674 0180 9342     		cmp	r3, r2
 1675 0182 13DD     		ble	.L103
 683:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1676              		.loc 1 683 0
 1677 0184 BB68     		ldr	r3, [r7, #8]
 1678 0186 1A68     		ldr	r2, [r3]
 1679 0188 4B4B     		ldr	r3, .L149
 1680 018a B3F8B032 		ldrh	r3, [r3, #688]
 1681 018e 1946     		mov	r1, r3
 1682 0190 3B69     		ldr	r3, [r7, #16]
 1683 0192 03FB01F1 		mul	r1, r3, r1
 1684 0196 484B     		ldr	r3, .L149
 1685 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1686 019c C3F58063 		rsb	r3, r3, #1024
 1687 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1688 01a4 1A44     		add	r2, r2, r3
 1689 01a6 BB68     		ldr	r3, [r7, #8]
 1690 01a8 1A60     		str	r2, [r3]
 1691              	.LBE4:
 684:..\src/interruptions.c ****                     }
 685:..\src/interruptions.c ****                     else {
 686:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 687:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 688:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 689:..\src/interruptions.c ****                         }
 690:..\src/interruptions.c ****                     }
 691:..\src/interruptions.c ****                 }
 692:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 693:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 694:..\src/interruptions.c ****                 }
 695:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 43


 696:..\src/interruptions.c ****             else {
 697:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 698:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 699:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 700:..\src/interruptions.c ****                 }
 701:..\src/interruptions.c ****             }
 702:..\src/interruptions.c ****             break;
 1692              		.loc 1 702 0
 1693 01aa A5E1     		b	.L142
 1694              	.L103:
 1695              	.LBB5:
 686:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1696              		.loc 1 686 0
 1697 01ac 434B     		ldr	r3, .L149+4
 1698 01ae 1B6A     		ldr	r3, [r3, #32]
 1699 01b0 414A     		ldr	r2, .L149
 1700 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1701 01b6 1344     		add	r3, r3, r2
 1702 01b8 3B61     		str	r3, [r7, #16]
 687:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1703              		.loc 1 687 0
 1704 01ba 404B     		ldr	r3, .L149+4
 1705 01bc 1A6A     		ldr	r2, [r3, #32]
 1706 01be 3E4B     		ldr	r3, .L149
 1707 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1708 01c4 5B42     		negs	r3, r3
 1709 01c6 9A42     		cmp	r2, r3
 1710 01c8 80F29681 		bge	.L142
 688:..\src/interruptions.c ****                         }
 1711              		.loc 1 688 0
 1712 01cc BB68     		ldr	r3, [r7, #8]
 1713 01ce 1A68     		ldr	r2, [r3]
 1714 01d0 394B     		ldr	r3, .L149
 1715 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1716 01d6 1946     		mov	r1, r3
 1717 01d8 3B69     		ldr	r3, [r7, #16]
 1718 01da 03FB01F1 		mul	r1, r3, r1
 1719 01de 364B     		ldr	r3, .L149
 1720 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1721 01e4 C3F58063 		rsb	r3, r3, #1024
 1722 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1723 01ec 1A44     		add	r2, r2, r3
 1724 01ee BB68     		ldr	r3, [r7, #8]
 1725 01f0 1A60     		str	r2, [r3]
 1726              	.LBE5:
 1727              		.loc 1 702 0
 1728 01f2 81E1     		b	.L142
 1729              	.L102:
 693:..\src/interruptions.c ****                 }
 1730              		.loc 1 693 0
 1731 01f4 BB68     		ldr	r3, [r7, #8]
 1732 01f6 1B68     		ldr	r3, [r3]
 1733 01f8 324A     		ldr	r2, .L149+12
 1734 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1735 01fe 9A1A     		subs	r2, r3, r2
 1736 0200 BB68     		ldr	r3, [r7, #8]
 1737 0202 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 44


 1738              		.loc 1 702 0
 1739 0204 78E1     		b	.L142
 1740              	.L101:
 698:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1741              		.loc 1 698 0
 1742 0206 2C4B     		ldr	r3, .L149
 1743 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1744 020c 042B     		cmp	r3, #4
 1745 020e 40F07381 		bne	.L142
 699:..\src/interruptions.c ****                 }
 1746              		.loc 1 699 0
 1747 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1748 0214 7A68     		ldr	r2, [r7, #4]
 1749 0216 B968     		ldr	r1, [r7, #8]
 1750 0218 1846     		mov	r0, r3
 1751 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1752              		.loc 1 702 0
 1753 021e 6BE1     		b	.L142
 1754              	.L89:
 703:..\src/interruptions.c ****             
 704:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 705:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1755              		.loc 1 705 0
 1756 0220 BB69     		ldr	r3, [r7, #24]
 1757 0222 002B     		cmp	r3, #0
 1758 0224 15DD     		ble	.L107
 706:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1759              		.loc 1 706 0
 1760 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1761 0228 2649     		ldr	r1, .L149+12
 1762 022a 1346     		mov	r3, r2
 1763 022c DB00     		lsls	r3, r3, #3
 1764 022e 9B1A     		subs	r3, r3, r2
 1765 0230 1B01     		lsls	r3, r3, #4
 1766 0232 0B44     		add	r3, r3, r1
 1767 0234 E833     		adds	r3, r3, #232
 1768 0236 1B68     		ldr	r3, [r3]
 1769 0238 BA69     		ldr	r2, [r7, #24]
 1770 023a 02FB03F2 		mul	r2, r2, r3
 1771 023e 1E4B     		ldr	r3, .L149
 1772 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1773 0244 C3F58063 		rsb	r3, r3, #1024
 1774 0248 92FBF3F2 		sdiv	r2, r2, r3
 1775 024c BB68     		ldr	r3, [r7, #8]
 1776 024e 1A60     		str	r2, [r3]
 707:..\src/interruptions.c ****             else
 708:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 709:..\src/interruptions.c ****             break;
 1777              		.loc 1 709 0
 1778 0250 5BE1     		b	.L100
 1779              	.L107:
 708:..\src/interruptions.c ****             break;
 1780              		.loc 1 708 0
 1781 0252 BB68     		ldr	r3, [r7, #8]
 1782 0254 0022     		movs	r2, #0
 1783 0256 1A60     		str	r2, [r3]
 1784              		.loc 1 709 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 45


 1785 0258 57E1     		b	.L100
 1786              	.L94:
 710:..\src/interruptions.c ****         
 711:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 712:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1787              		.loc 1 712 0
 1788 025a BB69     		ldr	r3, [r7, #24]
 1789 025c 002B     		cmp	r3, #0
 1790 025e 1FDD     		ble	.L109
 713:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1791              		.loc 1 713 0
 1792 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1793 0262 1849     		ldr	r1, .L149+12
 1794 0264 1346     		mov	r3, r2
 1795 0266 DB00     		lsls	r3, r3, #3
 1796 0268 9B1A     		subs	r3, r3, r2
 1797 026a 1B01     		lsls	r3, r3, #4
 1798 026c 0B44     		add	r3, r3, r1
 1799 026e E833     		adds	r3, r3, #232
 1800 0270 1968     		ldr	r1, [r3]
 1801 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1802 0274 1348     		ldr	r0, .L149+12
 1803 0276 1346     		mov	r3, r2
 1804 0278 DB00     		lsls	r3, r3, #3
 1805 027a 9B1A     		subs	r3, r3, r2
 1806 027c 1B01     		lsls	r3, r3, #4
 1807 027e 0344     		add	r3, r3, r0
 1808 0280 E833     		adds	r3, r3, #232
 1809 0282 1B68     		ldr	r3, [r3]
 1810 0284 BA69     		ldr	r2, [r7, #24]
 1811 0286 02FB03F2 		mul	r2, r2, r3
 1812 028a 0B4B     		ldr	r3, .L149
 1813 028c B3F8F031 		ldrh	r3, [r3, #496]
 1814 0290 C3F58063 		rsb	r3, r3, #1024
 1815 0294 92FBF3F3 		sdiv	r3, r2, r3
 1816 0298 CA1A     		subs	r2, r1, r3
 1817 029a BB68     		ldr	r3, [r7, #8]
 1818 029c 1A60     		str	r2, [r3]
 714:..\src/interruptions.c ****             else
 715:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 716:..\src/interruptions.c ****             break;
 1819              		.loc 1 716 0
 1820 029e 34E1     		b	.L100
 1821              	.L109:
 715:..\src/interruptions.c ****             break;
 1822              		.loc 1 715 0
 1823 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1824 02a2 0849     		ldr	r1, .L149+12
 1825 02a4 1346     		mov	r3, r2
 1826 02a6 DB00     		lsls	r3, r3, #3
 1827 02a8 9B1A     		subs	r3, r3, r2
 1828 02aa 1B01     		lsls	r3, r3, #4
 1829 02ac 0B44     		add	r3, r3, r1
 1830 02ae E833     		adds	r3, r3, #232
 1831 02b0 1A68     		ldr	r2, [r3]
 1832 02b2 BB68     		ldr	r3, [r7, #8]
 1833 02b4 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 46


 1834              		.loc 1 716 0
 1835 02b6 28E1     		b	.L100
 1836              	.L150:
 1837              		.align	2
 1838              	.L149:
 1839 02b8 00000000 		.word	c_mem
 1840 02bc 00000000 		.word	g_adc_meas
 1841 02c0 00000000 		.word	g_meas
 1842 02c4 00000000 		.word	g_mem
 1843              	.L90:
 717:..\src/interruptions.c **** 
 718:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 719:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1844              		.loc 1 719 0
 1845 02c8 7B68     		ldr	r3, [r7, #4]
 1846 02ca 1A68     		ldr	r2, [r3]
 1847 02cc BB68     		ldr	r3, [r7, #8]
 1848 02ce 1A60     		str	r2, [r3]
 720:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1849              		.loc 1 720 0
 1850 02d0 BB69     		ldr	r3, [r7, #24]
 1851 02d2 002B     		cmp	r3, #0
 1852 02d4 13DD     		ble	.L111
 721:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1853              		.loc 1 721 0
 1854 02d6 7B68     		ldr	r3, [r7, #4]
 1855 02d8 1A68     		ldr	r2, [r3]
 1856 02da 884B     		ldr	r3, .L151
 1857 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1858 02e0 1946     		mov	r1, r3
 1859 02e2 BB69     		ldr	r3, [r7, #24]
 1860 02e4 03FB01F3 		mul	r3, r3, r1
 1861 02e8 5900     		lsls	r1, r3, #1
 1862 02ea 854B     		ldr	r3, .L151+4
 1863 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1864 02f0 C3F58063 		rsb	r3, r3, #1024
 1865 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1866 02f8 1A44     		add	r2, r2, r3
 1867 02fa BB68     		ldr	r3, [r7, #8]
 1868 02fc 1A60     		str	r2, [r3]
 1869              	.L111:
 722:..\src/interruptions.c ****             }
 723:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1870              		.loc 1 723 0
 1871 02fe 7B69     		ldr	r3, [r7, #20]
 1872 0300 002B     		cmp	r3, #0
 1873 0302 40F30181 		ble	.L143
 724:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1874              		.loc 1 724 0
 1875 0306 7B68     		ldr	r3, [r7, #4]
 1876 0308 1A68     		ldr	r2, [r3]
 1877 030a 7C4B     		ldr	r3, .L151
 1878 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1879 0310 1946     		mov	r1, r3
 1880 0312 7B69     		ldr	r3, [r7, #20]
 1881 0314 03FB01F3 		mul	r3, r3, r1
 1882 0318 5900     		lsls	r1, r3, #1
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 47


 1883 031a 794B     		ldr	r3, .L151+4
 1884 031c B3F8F231 		ldrh	r3, [r3, #498]
 1885 0320 C3F58063 		rsb	r3, r3, #1024
 1886 0324 91FBF3F3 		sdiv	r3, r1, r3
 1887 0328 D21A     		subs	r2, r2, r3
 1888 032a BB68     		ldr	r3, [r7, #8]
 1889 032c 1A60     		str	r2, [r3]
 725:..\src/interruptions.c ****             }
 726:..\src/interruptions.c ****             break;
 1890              		.loc 1 726 0
 1891 032e EBE0     		b	.L143
 1892              	.L91:
 727:..\src/interruptions.c **** 
 728:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 729:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1893              		.loc 1 729 0
 1894 0330 7B68     		ldr	r3, [r7, #4]
 1895 0332 1A68     		ldr	r2, [r3]
 1896 0334 BB68     		ldr	r3, [r7, #8]
 1897 0336 1A60     		str	r2, [r3]
 730:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1898              		.loc 1 730 0
 1899 0338 714B     		ldr	r3, .L151+4
 1900 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1901 033e 042B     		cmp	r3, #4
 1902 0340 5BD0     		beq	.L113
 731:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1903              		.loc 1 731 0
 1904 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1905 0344 6F4A     		ldr	r2, .L151+8
 1906 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1907 0348 012B     		cmp	r3, #1
 1908 034a 1CD0     		beq	.L115
 1909 034c 022B     		cmp	r3, #2
 1910 034e 37D0     		beq	.L116
 1911 0350 002B     		cmp	r3, #0
 1912 0352 00D0     		beq	.L117
 732:..\src/interruptions.c ****                     case 0:
 733:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 734:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 735:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 736:..\src/interruptions.c ****                             break;
 737:..\src/interruptions.c ****                         }
 738:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 739:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 740:..\src/interruptions.c ****                             break;
 741:..\src/interruptions.c ****                         }
 742:..\src/interruptions.c ****                         break;
 743:..\src/interruptions.c **** 
 744:..\src/interruptions.c ****                     case 1:
 745:..\src/interruptions.c ****                         // EMG 1 is first
 746:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 747:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 748:..\src/interruptions.c ****                             break;
 749:..\src/interruptions.c ****                         }
 750:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 751:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 48


 752:..\src/interruptions.c **** 
 753:..\src/interruptions.c ****                     case 2:
 754:..\src/interruptions.c ****                         // EMG 2 is first
 755:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 756:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 757:..\src/interruptions.c ****                             break;
 758:..\src/interruptions.c ****                         }
 759:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 760:..\src/interruptions.c ****                         break;
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c ****                     default:
 763:..\src/interruptions.c ****                         break;
 1913              		.loc 1 763 0
 1914 0354 5BE0     		b	.L123
 1915              	.L117:
 734:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1916              		.loc 1 734 0
 1917 0356 BB69     		ldr	r3, [r7, #24]
 1918 0358 002B     		cmp	r3, #0
 1919 035a 08DD     		ble	.L118
 734:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1920              		.loc 1 734 0 is_stmt 0 discriminator 1
 1921 035c BA69     		ldr	r2, [r7, #24]
 1922 035e 7B69     		ldr	r3, [r7, #20]
 1923 0360 9A42     		cmp	r2, r3
 1924 0362 04DD     		ble	.L118
 735:..\src/interruptions.c ****                             break;
 1925              		.loc 1 735 0 is_stmt 1
 1926 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1927 0366 674A     		ldr	r2, .L151+8
 1928 0368 0121     		movs	r1, #1
 1929 036a D154     		strb	r1, [r2, r3]
 736:..\src/interruptions.c ****                         }
 1930              		.loc 1 736 0
 1931 036c 4FE0     		b	.L123
 1932              	.L118:
 738:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1933              		.loc 1 738 0
 1934 036e 7B69     		ldr	r3, [r7, #20]
 1935 0370 002B     		cmp	r3, #0
 1936 0372 4BDD     		ble	.L144
 738:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1937              		.loc 1 738 0 is_stmt 0 discriminator 1
 1938 0374 7A69     		ldr	r2, [r7, #20]
 1939 0376 BB69     		ldr	r3, [r7, #24]
 1940 0378 9A42     		cmp	r2, r3
 1941 037a 47DD     		ble	.L144
 739:..\src/interruptions.c ****                             break;
 1942              		.loc 1 739 0 is_stmt 1
 1943 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1944 037e 614A     		ldr	r2, .L151+8
 1945 0380 0221     		movs	r1, #2
 1946 0382 D154     		strb	r1, [r2, r3]
 740:..\src/interruptions.c ****                         }
 1947              		.loc 1 740 0
 1948 0384 43E0     		b	.L123
 1949              	.L115:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 49


 746:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1950              		.loc 1 746 0
 1951 0386 BB69     		ldr	r3, [r7, #24]
 1952 0388 002B     		cmp	r3, #0
 1953 038a 04DA     		bge	.L121
 747:..\src/interruptions.c ****                             break;
 1954              		.loc 1 747 0
 1955 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1956 038e 5D4A     		ldr	r2, .L151+8
 1957 0390 0021     		movs	r1, #0
 1958 0392 D154     		strb	r1, [r2, r3]
 748:..\src/interruptions.c ****                         }
 1959              		.loc 1 748 0
 1960 0394 3BE0     		b	.L123
 1961              	.L121:
 750:..\src/interruptions.c ****                         break;
 1962              		.loc 1 750 0
 1963 0396 7B68     		ldr	r3, [r7, #4]
 1964 0398 1A68     		ldr	r2, [r3]
 1965 039a 584B     		ldr	r3, .L151
 1966 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1967 03a0 1946     		mov	r1, r3
 1968 03a2 BB69     		ldr	r3, [r7, #24]
 1969 03a4 03FB01F3 		mul	r3, r3, r1
 1970 03a8 9900     		lsls	r1, r3, #2
 1971 03aa 554B     		ldr	r3, .L151+4
 1972 03ac B3F8F031 		ldrh	r3, [r3, #496]
 1973 03b0 C3F58063 		rsb	r3, r3, #1024
 1974 03b4 91FBF3F3 		sdiv	r3, r1, r3
 1975 03b8 1A44     		add	r2, r2, r3
 1976 03ba BB68     		ldr	r3, [r7, #8]
 1977 03bc 1A60     		str	r2, [r3]
 751:..\src/interruptions.c **** 
 1978              		.loc 1 751 0
 1979 03be 26E0     		b	.L123
 1980              	.L116:
 755:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1981              		.loc 1 755 0
 1982 03c0 7B69     		ldr	r3, [r7, #20]
 1983 03c2 002B     		cmp	r3, #0
 1984 03c4 04DA     		bge	.L122
 756:..\src/interruptions.c ****                             break;
 1985              		.loc 1 756 0
 1986 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1987 03c8 4E4A     		ldr	r2, .L151+8
 1988 03ca 0021     		movs	r1, #0
 1989 03cc D154     		strb	r1, [r2, r3]
 757:..\src/interruptions.c ****                         }
 1990              		.loc 1 757 0
 1991 03ce 1EE0     		b	.L123
 1992              	.L122:
 759:..\src/interruptions.c ****                         break;
 1993              		.loc 1 759 0
 1994 03d0 7B68     		ldr	r3, [r7, #4]
 1995 03d2 1A68     		ldr	r2, [r3]
 1996 03d4 494B     		ldr	r3, .L151
 1997 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 50


 1998 03da 1946     		mov	r1, r3
 1999 03dc 7B69     		ldr	r3, [r7, #20]
 2000 03de 03FB01F3 		mul	r3, r3, r1
 2001 03e2 9900     		lsls	r1, r3, #2
 2002 03e4 464B     		ldr	r3, .L151+4
 2003 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 2004 03ea C3F58063 		rsb	r3, r3, #1024
 2005 03ee 91FBF3F3 		sdiv	r3, r1, r3
 2006 03f2 D21A     		subs	r2, r2, r3
 2007 03f4 BB68     		ldr	r3, [r7, #8]
 2008 03f6 1A60     		str	r2, [r3]
 760:..\src/interruptions.c **** 
 2009              		.loc 1 760 0
 2010 03f8 09E0     		b	.L123
 2011              	.L113:
 764:..\src/interruptions.c ****                 }
 765:..\src/interruptions.c ****             }
 766:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 767:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 768:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2012              		.loc 1 768 0
 2013 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2014 03fc 7B69     		ldr	r3, [r7, #20]
 2015 03fe 0093     		str	r3, [sp]
 2016 0400 BB69     		ldr	r3, [r7, #24]
 2017 0402 7A68     		ldr	r2, [r7, #4]
 2018 0404 B968     		ldr	r1, [r7, #8]
 2019 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 769:..\src/interruptions.c ****             }
 770:..\src/interruptions.c ****             break;
 2020              		.loc 1 770 0
 2021 040a 7EE0     		b	.L100
 2022              	.L144:
 742:..\src/interruptions.c **** 
 2023              		.loc 1 742 0
 2024 040c 00BF     		nop
 2025              	.L123:
 2026              		.loc 1 770 0 discriminator 5
 2027 040e 7CE0     		b	.L100
 2028              	.L92:
 771:..\src/interruptions.c **** 
 772:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 773:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2029              		.loc 1 773 0
 2030 0410 7B68     		ldr	r3, [r7, #4]
 2031 0412 1A68     		ldr	r2, [r3]
 2032 0414 BB68     		ldr	r3, [r7, #8]
 2033 0416 1A60     		str	r2, [r3]
 774:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2034              		.loc 1 774 0
 2035 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2036 041a 3A4A     		ldr	r2, .L151+8
 2037 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2038 041e 012B     		cmp	r3, #1
 2039 0420 1CD0     		beq	.L125
 2040 0422 022B     		cmp	r3, #2
 2041 0424 3DD0     		beq	.L126
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 51


 2042 0426 002B     		cmp	r3, #0
 2043 0428 00D0     		beq	.L127
 775:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 776:..\src/interruptions.c ****                 case 0:
 777:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 778:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 779:..\src/interruptions.c ****                         break;
 780:..\src/interruptions.c ****                     }
 781:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 782:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 783:..\src/interruptions.c ****                         break;
 784:..\src/interruptions.c ****                     }
 785:..\src/interruptions.c ****                     break;
 786:..\src/interruptions.c **** 
 787:..\src/interruptions.c ****                 // EMG 1 is first
 788:..\src/interruptions.c ****                 case 1:
 789:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 790:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 791:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 792:..\src/interruptions.c ****                         break;
 793:..\src/interruptions.c ****                     }
 794:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 795:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 796:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 797:..\src/interruptions.c ****                     
 798:..\src/interruptions.c ****                     break;
 799:..\src/interruptions.c **** 
 800:..\src/interruptions.c ****                 // EMG 2 is first
 801:..\src/interruptions.c ****                 case 2:
 802:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 803:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 804:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 805:..\src/interruptions.c ****                         break;
 806:..\src/interruptions.c ****                     }
 807:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 808:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 809:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 810:..\src/interruptions.c ****                     }
 811:..\src/interruptions.c ****                     break;
 812:..\src/interruptions.c **** 
 813:..\src/interruptions.c ****                 default:
 814:..\src/interruptions.c ****                     break;
 2044              		.loc 1 814 0
 2045 042a 62E0     		b	.L129
 2046              	.L127:
 777:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2047              		.loc 1 777 0
 2048 042c BB69     		ldr	r3, [r7, #24]
 2049 042e 002B     		cmp	r3, #0
 2050 0430 08DD     		ble	.L128
 777:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2051              		.loc 1 777 0 is_stmt 0 discriminator 1
 2052 0432 BA69     		ldr	r2, [r7, #24]
 2053 0434 7B69     		ldr	r3, [r7, #20]
 2054 0436 9A42     		cmp	r2, r3
 2055 0438 04DD     		ble	.L128
 778:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 52


 2056              		.loc 1 778 0 is_stmt 1
 2057 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2058 043c 314A     		ldr	r2, .L151+8
 2059 043e 0121     		movs	r1, #1
 2060 0440 D154     		strb	r1, [r2, r3]
 779:..\src/interruptions.c ****                     }
 2061              		.loc 1 779 0
 2062 0442 56E0     		b	.L129
 2063              	.L128:
 781:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2064              		.loc 1 781 0
 2065 0444 7B69     		ldr	r3, [r7, #20]
 2066 0446 002B     		cmp	r3, #0
 2067 0448 4EDD     		ble	.L145
 781:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2068              		.loc 1 781 0 is_stmt 0 discriminator 1
 2069 044a 7A69     		ldr	r2, [r7, #20]
 2070 044c BB69     		ldr	r3, [r7, #24]
 2071 044e 9A42     		cmp	r2, r3
 2072 0450 4ADD     		ble	.L145
 782:..\src/interruptions.c ****                         break;
 2073              		.loc 1 782 0 is_stmt 1
 2074 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2075 0454 2B4A     		ldr	r2, .L151+8
 2076 0456 0221     		movs	r1, #2
 2077 0458 D154     		strb	r1, [r2, r3]
 783:..\src/interruptions.c ****                     }
 2078              		.loc 1 783 0
 2079 045a 4AE0     		b	.L129
 2080              	.L125:
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2081              		.loc 1 790 0
 2082 045c BB69     		ldr	r3, [r7, #24]
 2083 045e 002B     		cmp	r3, #0
 2084 0460 07DA     		bge	.L131
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2085              		.loc 1 790 0 is_stmt 0 discriminator 1
 2086 0462 7B69     		ldr	r3, [r7, #20]
 2087 0464 002B     		cmp	r3, #0
 2088 0466 04DA     		bge	.L131
 791:..\src/interruptions.c ****                         break;
 2089              		.loc 1 791 0 is_stmt 1
 2090 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2091 046a 264A     		ldr	r2, .L151+8
 2092 046c 0021     		movs	r1, #0
 2093 046e D154     		strb	r1, [r2, r3]
 792:..\src/interruptions.c ****                     }
 2094              		.loc 1 792 0
 2095 0470 3FE0     		b	.L129
 2096              	.L131:
 795:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2097              		.loc 1 795 0
 2098 0472 BB69     		ldr	r3, [r7, #24]
 2099 0474 002B     		cmp	r3, #0
 2100 0476 39DD     		ble	.L146
 796:..\src/interruptions.c ****                     
 2101              		.loc 1 796 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 53


 2102 0478 7B68     		ldr	r3, [r7, #4]
 2103 047a 1A68     		ldr	r2, [r3]
 2104 047c 1F4B     		ldr	r3, .L151
 2105 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2106 0482 1946     		mov	r1, r3
 2107 0484 BB69     		ldr	r3, [r7, #24]
 2108 0486 03FB01F3 		mul	r3, r3, r1
 2109 048a 9900     		lsls	r1, r3, #2
 2110 048c 1C4B     		ldr	r3, .L151+4
 2111 048e B3F8F031 		ldrh	r3, [r3, #496]
 2112 0492 C3F58063 		rsb	r3, r3, #1024
 2113 0496 91FBF3F3 		sdiv	r3, r1, r3
 2114 049a 1A44     		add	r2, r2, r3
 2115 049c BB68     		ldr	r3, [r7, #8]
 2116 049e 1A60     		str	r2, [r3]
 798:..\src/interruptions.c **** 
 2117              		.loc 1 798 0
 2118 04a0 24E0     		b	.L146
 2119              	.L126:
 803:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2120              		.loc 1 803 0
 2121 04a2 BB69     		ldr	r3, [r7, #24]
 2122 04a4 002B     		cmp	r3, #0
 2123 04a6 07DA     		bge	.L133
 803:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2124              		.loc 1 803 0 is_stmt 0 discriminator 1
 2125 04a8 7B69     		ldr	r3, [r7, #20]
 2126 04aa 002B     		cmp	r3, #0
 2127 04ac 04DA     		bge	.L133
 804:..\src/interruptions.c ****                         break;
 2128              		.loc 1 804 0 is_stmt 1
 2129 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2130 04b0 144A     		ldr	r2, .L151+8
 2131 04b2 0021     		movs	r1, #0
 2132 04b4 D154     		strb	r1, [r2, r3]
 805:..\src/interruptions.c ****                     }
 2133              		.loc 1 805 0
 2134 04b6 1CE0     		b	.L129
 2135              	.L133:
 808:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 2136              		.loc 1 808 0
 2137 04b8 7B69     		ldr	r3, [r7, #20]
 2138 04ba 002B     		cmp	r3, #0
 2139 04bc 18DD     		ble	.L147
 809:..\src/interruptions.c ****                     }
 2140              		.loc 1 809 0
 2141 04be 7B68     		ldr	r3, [r7, #4]
 2142 04c0 1A68     		ldr	r2, [r3]
 2143 04c2 0F4B     		ldr	r3, .L151+4
 2144 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2145 04c8 1946     		mov	r1, r3
 2146 04ca 7B69     		ldr	r3, [r7, #20]
 2147 04cc 03FB01F3 		mul	r3, r3, r1
 2148 04d0 9900     		lsls	r1, r3, #2
 2149 04d2 0B4B     		ldr	r3, .L151+4
 2150 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 2151 04d8 C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 54


 2152 04dc 91FBF3F3 		sdiv	r3, r1, r3
 2153 04e0 D21A     		subs	r2, r2, r3
 2154 04e2 BB68     		ldr	r3, [r7, #8]
 2155 04e4 1A60     		str	r2, [r3]
 811:..\src/interruptions.c **** 
 2156              		.loc 1 811 0
 2157 04e6 03E0     		b	.L147
 2158              	.L145:
 785:..\src/interruptions.c **** 
 2159              		.loc 1 785 0
 2160 04e8 00BF     		nop
 2161 04ea 0EE0     		b	.L100
 2162              	.L146:
 798:..\src/interruptions.c **** 
 2163              		.loc 1 798 0
 2164 04ec 00BF     		nop
 2165 04ee 0CE0     		b	.L100
 2166              	.L147:
 811:..\src/interruptions.c **** 
 2167              		.loc 1 811 0
 2168 04f0 00BF     		nop
 2169              	.L129:
 815:..\src/interruptions.c ****             }
 816:..\src/interruptions.c ****             break;
 2170              		.loc 1 816 0 discriminator 6
 2171 04f2 0AE0     		b	.L100
 2172              	.L141:
 817:..\src/interruptions.c **** 
 818:..\src/interruptions.c ****         default:
 819:..\src/interruptions.c ****             break;
 2173              		.loc 1 819 0
 2174 04f4 00BF     		nop
 2175 04f6 08E0     		b	.L100
 2176              	.L142:
 702:..\src/interruptions.c ****             
 2177              		.loc 1 702 0
 2178 04f8 00BF     		nop
 2179 04fa 06E0     		b	.L100
 2180              	.L152:
 2181              		.align	2
 2182              	.L151:
 2183 04fc 00000000 		.word	g_mem
 2184 0500 00000000 		.word	c_mem
 2185 0504 8C000000 		.word	current_emg.10491
 2186              	.L143:
 726:..\src/interruptions.c **** 
 2187              		.loc 1 726 0
 2188 0508 00BF     		nop
 2189              	.L100:
 820:..\src/interruptions.c ****     }
 821:..\src/interruptions.c **** 
 822:..\src/interruptions.c ****     // Position limit saturation
 823:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2190              		.loc 1 823 0
 2191 050a 3B6A     		ldr	r3, [r7, #32]
 2192 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2193 0510 002B     		cmp	r3, #0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 55


 2194 0512 13D0     		beq	.L135
 824:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2195              		.loc 1 824 0
 2196 0514 BB68     		ldr	r3, [r7, #8]
 2197 0516 1A68     		ldr	r2, [r3]
 2198 0518 3B6A     		ldr	r3, [r7, #32]
 2199 051a 5B6B     		ldr	r3, [r3, #52]
 2200 051c 9A42     		cmp	r2, r3
 2201 051e 03DA     		bge	.L136
 825:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2202              		.loc 1 825 0
 2203 0520 3B6A     		ldr	r3, [r7, #32]
 2204 0522 5A6B     		ldr	r2, [r3, #52]
 2205 0524 BB68     		ldr	r3, [r7, #8]
 2206 0526 1A60     		str	r2, [r3]
 2207              	.L136:
 826:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2208              		.loc 1 826 0
 2209 0528 BB68     		ldr	r3, [r7, #8]
 2210 052a 1A68     		ldr	r2, [r3]
 2211 052c 3B6A     		ldr	r3, [r7, #32]
 2212 052e 9B6B     		ldr	r3, [r3, #56]
 2213 0530 9A42     		cmp	r2, r3
 2214 0532 03DD     		ble	.L135
 827:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2215              		.loc 1 827 0
 2216 0534 3B6A     		ldr	r3, [r7, #32]
 2217 0536 9A6B     		ldr	r2, [r3, #56]
 2218 0538 BB68     		ldr	r3, [r7, #8]
 2219 053a 1A60     		str	r2, [r3]
 2220              	.L135:
 828:..\src/interruptions.c ****     }
 829:..\src/interruptions.c ****     
 830:..\src/interruptions.c ****     // SAFETY
 831:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2221              		.loc 1 831 0
 2222 053c 1D4B     		ldr	r3, .L153
 2223 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2224 0540 012B     		cmp	r3, #1
 2225 0542 02D1     		bne	.L137
 832:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 833:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2226              		.loc 1 833 0
 2227 0544 BB68     		ldr	r3, [r7, #8]
 2228 0546 0022     		movs	r2, #0
 2229 0548 1A60     		str	r2, [r3]
 2230              	.L137:
 834:..\src/interruptions.c ****     }      
 835:..\src/interruptions.c ****     
 836:..\src/interruptions.c ****        
 837:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2231              		.loc 1 837 0
 2232 054a 1B4B     		ldr	r3, .L153+4
 2233 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2234 0550 012B     		cmp	r3, #1
 2235 0552 2AD1     		bne	.L148
 838:..\src/interruptions.c ****         if (rest_enabled == 1){
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 56


 2236              		.loc 1 838 0
 2237 0554 194B     		ldr	r3, .L153+8
 2238 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2239 0558 012B     		cmp	r3, #1
 2240 055a 03D1     		bne	.L139
 839:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 840:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2241              		.loc 1 840 0
 2242 055c 184B     		ldr	r3, .L153+12
 2243 055e 1A68     		ldr	r2, [r3]
 2244 0560 BB68     		ldr	r3, [r7, #8]
 2245 0562 1A60     		str	r2, [r3]
 2246              	.L139:
 841:..\src/interruptions.c ****         }
 842:..\src/interruptions.c ****         
 843:..\src/interruptions.c ****         if (forced_open == 1) {
 2247              		.loc 1 843 0
 2248 0564 174B     		ldr	r3, .L153+16
 2249 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2250 0568 012B     		cmp	r3, #1
 2251 056a 1ED1     		bne	.L148
 844:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 845:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2252              		.loc 1 845 0
 2253 056c 7B69     		ldr	r3, [r7, #20]
 2254 056e 002B     		cmp	r3, #0
 2255 0570 13DD     		ble	.L140
 846:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2256              		.loc 1 846 0
 2257 0572 154B     		ldr	r3, .L153+20
 2258 0574 D3F8A022 		ldr	r2, [r3, #672]
 2259 0578 134B     		ldr	r3, .L153+20
 2260 057a D3F8A032 		ldr	r3, [r3, #672]
 2261 057e 7969     		ldr	r1, [r7, #20]
 2262 0580 01FB03F1 		mul	r1, r1, r3
 2263 0584 0C4B     		ldr	r3, .L153+4
 2264 0586 B3F8F231 		ldrh	r3, [r3, #498]
 2265 058a C3F58063 		rsb	r3, r3, #1024
 2266 058e 91FBF3F3 		sdiv	r3, r1, r3
 2267 0592 D21A     		subs	r2, r2, r3
 2268 0594 BB68     		ldr	r3, [r7, #8]
 2269 0596 1A60     		str	r2, [r3]
 847:..\src/interruptions.c ****             else {
 848:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 849:..\src/interruptions.c ****                 forced_open = 0;
 850:..\src/interruptions.c ****             }
 851:..\src/interruptions.c ****         }
 852:..\src/interruptions.c ****     }
 853:..\src/interruptions.c **** }
 2270              		.loc 1 853 0
 2271 0598 07E0     		b	.L148
 2272              	.L140:
 848:..\src/interruptions.c ****                 forced_open = 0;
 2273              		.loc 1 848 0
 2274 059a 0B4B     		ldr	r3, .L153+20
 2275 059c D3F8A022 		ldr	r2, [r3, #672]
 2276 05a0 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 57


 2277 05a2 1A60     		str	r2, [r3]
 849:..\src/interruptions.c ****             }
 2278              		.loc 1 849 0
 2279 05a4 074B     		ldr	r3, .L153+16
 2280 05a6 0022     		movs	r2, #0
 2281 05a8 1A70     		strb	r2, [r3]
 2282              	.L148:
 2283              		.loc 1 853 0
 2284 05aa 00BF     		nop
 2285 05ac 2837     		adds	r7, r7, #40
 2286              		.cfi_def_cfa_offset 8
 2287 05ae BD46     		mov	sp, r7
 2288              		.cfi_def_cfa_register 13
 2289              		@ sp needed
 2290 05b0 80BD     		pop	{r7, pc}
 2291              	.L154:
 2292 05b2 00BF     		.align	2
 2293              	.L153:
 2294 05b4 00000000 		.word	battery_low_SoC
 2295 05b8 00000000 		.word	c_mem
 2296 05bc 00000000 		.word	rest_enabled
 2297 05c0 00000000 		.word	rest_pos_curr_ref
 2298 05c4 00000000 		.word	forced_open
 2299 05c8 00000000 		.word	g_mem
 2300              		.cfi_endproc
 2301              	.LFE68:
 2302              		.size	compute_reference, .-compute_reference
 2303              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2304              		.align	2
 2305              		.global	compute_SoftHand_2_motors_joystick_reference
 2306              		.thumb
 2307              		.thumb_func
 2308              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2309              	compute_SoftHand_2_motors_joystick_reference:
 2310              	.LFB69:
 854:..\src/interruptions.c **** 
 855:..\src/interruptions.c **** 
 856:..\src/interruptions.c **** //==============================================================================
 857:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 858:..\src/interruptions.c **** //==============================================================================
 859:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2311              		.loc 1 859 0
 2312              		.cfi_startproc
 2313              		@ args = 0, pretend = 0, frame = 32
 2314              		@ frame_needed = 1, uses_anonymous_args = 0
 2315              		@ link register save eliminated.
 2316 0000 80B4     		push	{r7}
 2317              		.cfi_def_cfa_offset 4
 2318              		.cfi_offset 7, -4
 2319 0002 89B0     		sub	sp, sp, #36
 2320              		.cfi_def_cfa_offset 40
 2321 0004 00AF     		add	r7, sp, #0
 2322              		.cfi_def_cfa_register 7
 2323 0006 0346     		mov	r3, r0
 2324 0008 B960     		str	r1, [r7, #8]
 2325 000a 7A60     		str	r2, [r7, #4]
 2326 000c FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 58


 860:..\src/interruptions.c ****     
 861:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2327              		.loc 1 861 0
 2328 000e B04B     		ldr	r3, .L176
 2329 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2330 0014 062B     		cmp	r3, #6
 2331 0016 40F08581 		bne	.L174
 2332              		.loc 1 861 0 is_stmt 0 discriminator 1
 2333 001a AD4B     		ldr	r3, .L176
 2334 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2335 0020 062B     		cmp	r3, #6
 2336 0022 40F07F81 		bne	.L174
 862:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2337              		.loc 1 862 0 is_stmt 1
 2338 0026 7B68     		ldr	r3, [r7, #4]
 2339 0028 1A68     		ldr	r2, [r3]
 2340 002a BB68     		ldr	r3, [r7, #8]
 2341 002c 1A60     		str	r2, [r3]
 863:..\src/interruptions.c ****     
 864:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2342              		.loc 1 864 0
 2343 002e A94B     		ldr	r3, .L176+4
 2344 0030 1B6A     		ldr	r3, [r3, #32]
 2345 0032 B3F52F7F 		cmp	r3, #700
 2346 0036 00F3C280 		bgt	.L157
 2347              	.LBB6:
 865:..\src/interruptions.c ****              
 866:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2348              		.loc 1 866 0
 2349 003a 0023     		movs	r3, #0
 2350 003c FB61     		str	r3, [r7, #28]
 867:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2351              		.loc 1 867 0
 2352 003e 0023     		movs	r3, #0
 2353 0040 BB61     		str	r3, [r7, #24]
 868:..\src/interruptions.c ****         
 869:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2354              		.loc 1 869 0
 2355 0042 A44B     		ldr	r3, .L176+4
 2356 0044 1B6A     		ldr	r3, [r3, #32]
 2357 0046 A24A     		ldr	r2, .L176
 2358 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2359 004c 9342     		cmp	r3, r2
 2360 004e 1ADD     		ble	.L158
 870:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2361              		.loc 1 870 0
 2362 0050 A04B     		ldr	r3, .L176+4
 2363 0052 1B6A     		ldr	r3, [r3, #32]
 2364 0054 9E4A     		ldr	r2, .L176
 2365 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2366 005a 9B1A     		subs	r3, r3, r2
 2367 005c FB61     		str	r3, [r7, #28]
 871:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2368              		.loc 1 871 0
 2369 005e BB68     		ldr	r3, [r7, #8]
 2370 0060 1A68     		ldr	r2, [r3]
 2371 0062 9B4B     		ldr	r3, .L176
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 59


 2372 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2373 0068 1946     		mov	r1, r3
 2374 006a FB69     		ldr	r3, [r7, #28]
 2375 006c 03FB01F1 		mul	r1, r3, r1
 2376 0070 974B     		ldr	r3, .L176
 2377 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2378 0076 C3F58063 		rsb	r3, r3, #1024
 2379 007a 91FBF3F3 		sdiv	r3, r1, r3
 2380 007e 1A44     		add	r2, r2, r3
 2381 0080 BB68     		ldr	r3, [r7, #8]
 2382 0082 1A60     		str	r2, [r3]
 2383 0084 21E0     		b	.L159
 2384              	.L158:
 872:..\src/interruptions.c ****             }
 873:..\src/interruptions.c ****             else {
 874:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2385              		.loc 1 874 0
 2386 0086 934B     		ldr	r3, .L176+4
 2387 0088 1A6A     		ldr	r2, [r3, #32]
 2388 008a 914B     		ldr	r3, .L176
 2389 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2390 0090 5B42     		negs	r3, r3
 2391 0092 9A42     		cmp	r2, r3
 2392 0094 19DA     		bge	.L159
 875:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2393              		.loc 1 875 0
 2394 0096 8F4B     		ldr	r3, .L176+4
 2395 0098 1B6A     		ldr	r3, [r3, #32]
 2396 009a 8D4A     		ldr	r2, .L176
 2397 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2398 00a0 1344     		add	r3, r3, r2
 2399 00a2 FB61     		str	r3, [r7, #28]
 876:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2400              		.loc 1 876 0
 2401 00a4 BB68     		ldr	r3, [r7, #8]
 2402 00a6 1A68     		ldr	r2, [r3]
 2403 00a8 894B     		ldr	r3, .L176
 2404 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2405 00ae 1946     		mov	r1, r3
 2406 00b0 FB69     		ldr	r3, [r7, #28]
 2407 00b2 03FB01F1 		mul	r1, r3, r1
 2408 00b6 864B     		ldr	r3, .L176
 2409 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2410 00bc C3F58063 		rsb	r3, r3, #1024
 2411 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2412 00c4 1A44     		add	r2, r2, r3
 2413 00c6 BB68     		ldr	r3, [r7, #8]
 2414 00c8 1A60     		str	r2, [r3]
 2415              	.L159:
 877:..\src/interruptions.c ****                 }
 878:..\src/interruptions.c ****             }
 879:..\src/interruptions.c **** 
 880:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2416              		.loc 1 880 0
 2417 00ca 824B     		ldr	r3, .L176+4
 2418 00cc 5B6A     		ldr	r3, [r3, #36]
 2419 00ce 804A     		ldr	r2, .L176
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 60


 2420 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2421 00d4 9342     		cmp	r3, r2
 2422 00d6 34DD     		ble	.L160
 881:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2423              		.loc 1 881 0
 2424 00d8 7E4B     		ldr	r3, .L176+4
 2425 00da 5B6A     		ldr	r3, [r3, #36]
 2426 00dc 7C4A     		ldr	r2, .L176
 2427 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2428 00e2 9B1A     		subs	r3, r3, r2
 2429 00e4 BB61     		str	r3, [r7, #24]
 882:..\src/interruptions.c ****                 if (motor_idx == 0){
 2430              		.loc 1 882 0
 2431 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2432 00e8 002B     		cmp	r3, #0
 2433 00ea 12D1     		bne	.L161
 883:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2434              		.loc 1 883 0
 2435 00ec BB68     		ldr	r3, [r7, #8]
 2436 00ee 1A68     		ldr	r2, [r3]
 2437 00f0 774B     		ldr	r3, .L176
 2438 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2439 00f6 1946     		mov	r1, r3
 2440 00f8 BB69     		ldr	r3, [r7, #24]
 2441 00fa 03FB01F1 		mul	r1, r3, r1
 2442 00fe 744B     		ldr	r3, .L176
 2443 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2444 0104 C3F58063 		rsb	r3, r3, #1024
 2445 0108 91FBF3F3 		sdiv	r3, r1, r3
 2446 010c 1A44     		add	r2, r2, r3
 2447 010e BB68     		ldr	r3, [r7, #8]
 2448 0110 1A60     		str	r2, [r3]
 2449              	.L161:
 884:..\src/interruptions.c ****                 }
 885:..\src/interruptions.c ****                 if (motor_idx == 1){
 2450              		.loc 1 885 0
 2451 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2452 0114 012B     		cmp	r3, #1
 2453 0116 40F00581 		bne	.L174
 886:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2454              		.loc 1 886 0
 2455 011a BB68     		ldr	r3, [r7, #8]
 2456 011c 1A68     		ldr	r2, [r3]
 2457 011e 6C4B     		ldr	r3, .L176
 2458 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2459 0124 1946     		mov	r1, r3
 2460 0126 BB69     		ldr	r3, [r7, #24]
 2461 0128 03FB01F1 		mul	r1, r3, r1
 2462 012c 684B     		ldr	r3, .L176
 2463 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2464 0132 C3F58063 		rsb	r3, r3, #1024
 2465 0136 91FBF3F3 		sdiv	r3, r1, r3
 2466 013a D21A     		subs	r2, r2, r3
 2467 013c BB68     		ldr	r3, [r7, #8]
 2468 013e 1A60     		str	r2, [r3]
 2469              	.LBE6:
 887:..\src/interruptions.c ****                 }          
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 61


 888:..\src/interruptions.c ****             }
 889:..\src/interruptions.c ****             else {
 890:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 891:..\src/interruptions.c ****                     
 892:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 893:..\src/interruptions.c ****                     if (motor_idx == 0){
 894:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 895:..\src/interruptions.c ****                     }
 896:..\src/interruptions.c ****                     if (motor_idx == 1){
 897:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 898:..\src/interruptions.c ****                     }
 899:..\src/interruptions.c ****                 }
 900:..\src/interruptions.c ****             }
 901:..\src/interruptions.c ****         }
 902:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 903:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 904:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 905:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 906:..\src/interruptions.c **** 
 907:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 908:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 909:..\src/interruptions.c ****                     if (motor_idx == 1){
 910:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 911:..\src/interruptions.c ****                     }
 912:..\src/interruptions.c ****                     if (motor_idx == 0){
 913:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 914:..\src/interruptions.c ****                     }                    
 915:..\src/interruptions.c ****                 }
 916:..\src/interruptions.c ****                 else {
 917:..\src/interruptions.c ****                     if (motor_idx == 0){
 918:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 919:..\src/interruptions.c ****                     }
 920:..\src/interruptions.c ****                     if (motor_idx == 1){
 921:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 922:..\src/interruptions.c ****                     }
 923:..\src/interruptions.c ****                 }
 924:..\src/interruptions.c ****                 
 925:..\src/interruptions.c ****             }
 926:..\src/interruptions.c ****             else {
 927:..\src/interruptions.c ****                 if(pos_sum > 0) {
 928:..\src/interruptions.c ****                     if (motor_idx == 0){
 929:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 930:..\src/interruptions.c ****                     }
 931:..\src/interruptions.c ****                     if (motor_idx == 1){
 932:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 933:..\src/interruptions.c ****                     }
 934:..\src/interruptions.c ****                     
 935:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 936:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 937:..\src/interruptions.c ****                     }
 938:..\src/interruptions.c ****                 }
 939:..\src/interruptions.c ****             }
 940:..\src/interruptions.c ****         }
 941:..\src/interruptions.c ****     }           
 942:..\src/interruptions.c **** }
 2470              		.loc 1 942 0
 2471 0140 F0E0     		b	.L174
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 62


 2472              	.L160:
 2473              	.LBB7:
 890:..\src/interruptions.c ****                     
 2474              		.loc 1 890 0
 2475 0142 644B     		ldr	r3, .L176+4
 2476 0144 5A6A     		ldr	r2, [r3, #36]
 2477 0146 624B     		ldr	r3, .L176
 2478 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2479 014c 5B42     		negs	r3, r3
 2480 014e 9A42     		cmp	r2, r3
 2481 0150 80F2E880 		bge	.L174
 892:..\src/interruptions.c ****                     if (motor_idx == 0){
 2482              		.loc 1 892 0
 2483 0154 5F4B     		ldr	r3, .L176+4
 2484 0156 5B6A     		ldr	r3, [r3, #36]
 2485 0158 5D4A     		ldr	r2, .L176
 2486 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2487 015e 1344     		add	r3, r3, r2
 2488 0160 BB61     		str	r3, [r7, #24]
 893:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2489              		.loc 1 893 0
 2490 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2491 0164 002B     		cmp	r3, #0
 2492 0166 12D1     		bne	.L164
 894:..\src/interruptions.c ****                     }
 2493              		.loc 1 894 0
 2494 0168 BB68     		ldr	r3, [r7, #8]
 2495 016a 1A68     		ldr	r2, [r3]
 2496 016c 584B     		ldr	r3, .L176
 2497 016e B3F8B032 		ldrh	r3, [r3, #688]
 2498 0172 1946     		mov	r1, r3
 2499 0174 BB69     		ldr	r3, [r7, #24]
 2500 0176 03FB01F1 		mul	r1, r3, r1
 2501 017a 554B     		ldr	r3, .L176
 2502 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2503 0180 C3F58063 		rsb	r3, r3, #1024
 2504 0184 91FBF3F3 		sdiv	r3, r1, r3
 2505 0188 1A44     		add	r2, r2, r3
 2506 018a BB68     		ldr	r3, [r7, #8]
 2507 018c 1A60     		str	r2, [r3]
 2508              	.L164:
 896:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2509              		.loc 1 896 0
 2510 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2511 0190 012B     		cmp	r3, #1
 2512 0192 40F0C780 		bne	.L174
 897:..\src/interruptions.c ****                     }
 2513              		.loc 1 897 0
 2514 0196 BB68     		ldr	r3, [r7, #8]
 2515 0198 1A68     		ldr	r2, [r3]
 2516 019a 4D4B     		ldr	r3, .L176
 2517 019c B3F8B032 		ldrh	r3, [r3, #688]
 2518 01a0 1946     		mov	r1, r3
 2519 01a2 BB69     		ldr	r3, [r7, #24]
 2520 01a4 03FB01F1 		mul	r1, r3, r1
 2521 01a8 494B     		ldr	r3, .L176
 2522 01aa B3F9B232 		ldrsh	r3, [r3, #690]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 63


 2523 01ae C3F58063 		rsb	r3, r3, #1024
 2524 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2525 01b6 D21A     		subs	r2, r2, r3
 2526 01b8 BB68     		ldr	r3, [r7, #8]
 2527 01ba 1A60     		str	r2, [r3]
 2528              	.LBE7:
 2529              		.loc 1 942 0
 2530 01bc B2E0     		b	.L174
 2531              	.L157:
 2532              	.LBB8:
 904:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2533              		.loc 1 904 0
 2534 01be 444B     		ldr	r3, .L176
 2535 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2536 01c4 1946     		mov	r1, r3
 2537 01c6 444A     		ldr	r2, .L176+8
 2538 01c8 3423     		movs	r3, #52
 2539 01ca 03FB01F3 		mul	r3, r3, r1
 2540 01ce 1344     		add	r3, r3, r2
 2541 01d0 1A68     		ldr	r2, [r3]
 2542 01d2 3F4B     		ldr	r3, .L176
 2543 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2544 01d8 1846     		mov	r0, r3
 2545 01da 3F49     		ldr	r1, .L176+8
 2546 01dc 3423     		movs	r3, #52
 2547 01de 03FB00F3 		mul	r3, r3, r0
 2548 01e2 0B44     		add	r3, r3, r1
 2549 01e4 0433     		adds	r3, r3, #4
 2550 01e6 1B68     		ldr	r3, [r3]
 2551 01e8 D21A     		subs	r2, r2, r3
 2552 01ea 394B     		ldr	r3, .L176
 2553 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2554 01f0 1846     		mov	r0, r3
 2555 01f2 3749     		ldr	r1, .L176
 2556 01f4 0346     		mov	r3, r0
 2557 01f6 5B00     		lsls	r3, r3, #1
 2558 01f8 0344     		add	r3, r3, r0
 2559 01fa 1B01     		lsls	r3, r3, #4
 2560 01fc 0B44     		add	r3, r3, r1
 2561 01fe 03F29513 		addw	r3, r3, #405
 2562 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2563 0204 42FA03F3 		asr	r3, r2, r3
 2564 0208 7B61     		str	r3, [r7, #20]
 905:..\src/interruptions.c **** 
 2565              		.loc 1 905 0
 2566 020a 314B     		ldr	r3, .L176
 2567 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2568 0210 1946     		mov	r1, r3
 2569 0212 314A     		ldr	r2, .L176+8
 2570 0214 3423     		movs	r3, #52
 2571 0216 03FB01F3 		mul	r3, r3, r1
 2572 021a 1344     		add	r3, r3, r2
 2573 021c 1A68     		ldr	r2, [r3]
 2574 021e 2C4B     		ldr	r3, .L176
 2575 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2576 0224 1846     		mov	r0, r3
 2577 0226 2C49     		ldr	r1, .L176+8
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 64


 2578 0228 3423     		movs	r3, #52
 2579 022a 03FB00F3 		mul	r3, r3, r0
 2580 022e 0B44     		add	r3, r3, r1
 2581 0230 0433     		adds	r3, r3, #4
 2582 0232 1B68     		ldr	r3, [r3]
 2583 0234 1A44     		add	r2, r2, r3
 2584 0236 264B     		ldr	r3, .L176
 2585 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2586 023c 1846     		mov	r0, r3
 2587 023e 2449     		ldr	r1, .L176
 2588 0240 0346     		mov	r3, r0
 2589 0242 5B00     		lsls	r3, r3, #1
 2590 0244 0344     		add	r3, r3, r0
 2591 0246 1B01     		lsls	r3, r3, #4
 2592 0248 0B44     		add	r3, r3, r1
 2593 024a 03F29513 		addw	r3, r3, #405
 2594 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2595 0250 42FA03F3 		asr	r3, r2, r3
 2596 0254 3B61     		str	r3, [r7, #16]
 907:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2597              		.loc 1 907 0
 2598 0256 7B69     		ldr	r3, [r7, #20]
 2599 0258 B3F5FA7F 		cmp	r3, #500
 2600 025c 03DC     		bgt	.L165
 907:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2601              		.loc 1 907 0 is_stmt 0 discriminator 1
 2602 025e 7B69     		ldr	r3, [r7, #20]
 2603 0260 13F5FA7F 		cmn	r3, #500
 2604 0264 3ADA     		bge	.L166
 2605              	.L165:
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2606              		.loc 1 908 0 is_stmt 1
 2607 0266 7B69     		ldr	r3, [r7, #20]
 2608 0268 002B     		cmp	r3, #0
 2609 026a 18DB     		blt	.L167
 909:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2610              		.loc 1 909 0
 2611 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2612 026e 012B     		cmp	r3, #1
 2613 0270 07D1     		bne	.L168
 910:..\src/interruptions.c ****                     }
 2614              		.loc 1 910 0
 2615 0272 BB68     		ldr	r3, [r7, #8]
 2616 0274 1B68     		ldr	r3, [r3]
 2617 0276 164A     		ldr	r2, .L176
 2618 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2619 027c 1A44     		add	r2, r2, r3
 2620 027e BB68     		ldr	r3, [r7, #8]
 2621 0280 1A60     		str	r2, [r3]
 2622              	.L168:
 912:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2623              		.loc 1 912 0
 2624 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2625 0284 002B     		cmp	r3, #0
 2626 0286 4CD1     		bne	.L175
 913:..\src/interruptions.c ****                     }                    
 2627              		.loc 1 913 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 65


 2628 0288 BB68     		ldr	r3, [r7, #8]
 2629 028a 1B68     		ldr	r3, [r3]
 2630 028c 104A     		ldr	r2, .L176
 2631 028e B2F8B022 		ldrh	r2, [r2, #688]
 2632 0292 5208     		lsrs	r2, r2, #1
 2633 0294 92B2     		uxth	r2, r2
 2634 0296 9A1A     		subs	r2, r3, r2
 2635 0298 BB68     		ldr	r3, [r7, #8]
 2636 029a 1A60     		str	r2, [r3]
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2637              		.loc 1 908 0
 2638 029c 41E0     		b	.L175
 2639              	.L167:
 917:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2640              		.loc 1 917 0
 2641 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2642 02a0 002B     		cmp	r3, #0
 2643 02a2 07D1     		bne	.L171
 918:..\src/interruptions.c ****                     }
 2644              		.loc 1 918 0
 2645 02a4 BB68     		ldr	r3, [r7, #8]
 2646 02a6 1B68     		ldr	r3, [r3]
 2647 02a8 094A     		ldr	r2, .L176
 2648 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2649 02ae 1A44     		add	r2, r2, r3
 2650 02b0 BB68     		ldr	r3, [r7, #8]
 2651 02b2 1A60     		str	r2, [r3]
 2652              	.L171:
 920:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2653              		.loc 1 920 0
 2654 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2655 02b6 012B     		cmp	r3, #1
 2656 02b8 33D1     		bne	.L175
 921:..\src/interruptions.c ****                     }
 2657              		.loc 1 921 0
 2658 02ba BB68     		ldr	r3, [r7, #8]
 2659 02bc 1B68     		ldr	r3, [r3]
 2660 02be 044A     		ldr	r2, .L176
 2661 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2662 02c4 5208     		lsrs	r2, r2, #1
 2663 02c6 92B2     		uxth	r2, r2
 2664 02c8 9A1A     		subs	r2, r3, r2
 2665 02ca BB68     		ldr	r3, [r7, #8]
 2666 02cc 1A60     		str	r2, [r3]
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2667              		.loc 1 908 0
 2668 02ce 28E0     		b	.L175
 2669              	.L177:
 2670              		.align	2
 2671              	.L176:
 2672 02d0 00000000 		.word	c_mem
 2673 02d4 00000000 		.word	g_adc_meas
 2674 02d8 00000000 		.word	g_meas
 2675              	.L166:
 927:..\src/interruptions.c ****                     if (motor_idx == 0){
 2676              		.loc 1 927 0
 2677 02dc 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 66


 2678 02de 002B     		cmp	r3, #0
 2679 02e0 20DD     		ble	.L174
 928:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2680              		.loc 1 928 0
 2681 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2682 02e4 002B     		cmp	r3, #0
 2683 02e6 08D1     		bne	.L172
 929:..\src/interruptions.c ****                     }
 2684              		.loc 1 929 0
 2685 02e8 BB68     		ldr	r3, [r7, #8]
 2686 02ea 1A68     		ldr	r2, [r3]
 2687 02ec 104B     		ldr	r3, .L178
 2688 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2689 02f2 5B00     		lsls	r3, r3, #1
 2690 02f4 D21A     		subs	r2, r2, r3
 2691 02f6 BB68     		ldr	r3, [r7, #8]
 2692 02f8 1A60     		str	r2, [r3]
 2693              	.L172:
 931:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2694              		.loc 1 931 0
 2695 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2696 02fc 012B     		cmp	r3, #1
 2697 02fe 08D1     		bne	.L173
 932:..\src/interruptions.c ****                     }
 2698              		.loc 1 932 0
 2699 0300 BB68     		ldr	r3, [r7, #8]
 2700 0302 1A68     		ldr	r2, [r3]
 2701 0304 0A4B     		ldr	r3, .L178
 2702 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2703 030a 5B00     		lsls	r3, r3, #1
 2704 030c D21A     		subs	r2, r2, r3
 2705 030e BB68     		ldr	r3, [r7, #8]
 2706 0310 1A60     		str	r2, [r3]
 2707              	.L173:
 935:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2708              		.loc 1 935 0
 2709 0312 BB68     		ldr	r3, [r7, #8]
 2710 0314 1B68     		ldr	r3, [r3]
 2711 0316 002B     		cmp	r3, #0
 2712 0318 04DA     		bge	.L174
 936:..\src/interruptions.c ****                     }
 2713              		.loc 1 936 0
 2714 031a BB68     		ldr	r3, [r7, #8]
 2715 031c 0022     		movs	r2, #0
 2716 031e 1A60     		str	r2, [r3]
 2717              	.LBE8:
 2718              		.loc 1 942 0
 2719 0320 00E0     		b	.L174
 2720              	.L175:
 2721              	.LBB9:
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2722              		.loc 1 908 0
 2723 0322 00BF     		nop
 2724              	.L174:
 2725              	.LBE9:
 2726              		.loc 1 942 0
 2727 0324 00BF     		nop
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 67


 2728 0326 2437     		adds	r7, r7, #36
 2729              		.cfi_def_cfa_offset 4
 2730 0328 BD46     		mov	sp, r7
 2731              		.cfi_def_cfa_register 13
 2732              		@ sp needed
 2733 032a 80BC     		pop	{r7}
 2734              		.cfi_restore 7
 2735              		.cfi_def_cfa_offset 0
 2736 032c 7047     		bx	lr
 2737              	.L179:
 2738 032e 00BF     		.align	2
 2739              	.L178:
 2740 0330 00000000 		.word	c_mem
 2741              		.cfi_endproc
 2742              	.LFE69:
 2743              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2744              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2745              		.align	2
 2746              		.global	compute_SoftHand_2_motors_emg_reference
 2747              		.thumb
 2748              		.thumb_func
 2749              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2750              	compute_SoftHand_2_motors_emg_reference:
 2751              	.LFB70:
 943:..\src/interruptions.c **** 
 944:..\src/interruptions.c **** 
 945:..\src/interruptions.c **** //==============================================================================
 946:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 947:..\src/interruptions.c **** //==============================================================================
 948:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 949:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2752              		.loc 1 949 0
 2753              		.cfi_startproc
 2754              		@ args = 4, pretend = 0, frame = 16
 2755              		@ frame_needed = 1, uses_anonymous_args = 0
 2756 0000 80B5     		push	{r7, lr}
 2757              		.cfi_def_cfa_offset 8
 2758              		.cfi_offset 7, -8
 2759              		.cfi_offset 14, -4
 2760 0002 84B0     		sub	sp, sp, #16
 2761              		.cfi_def_cfa_offset 24
 2762 0004 00AF     		add	r7, sp, #0
 2763              		.cfi_def_cfa_register 7
 2764 0006 B960     		str	r1, [r7, #8]
 2765 0008 7A60     		str	r2, [r7, #4]
 2766 000a 3B60     		str	r3, [r7]
 2767 000c 0346     		mov	r3, r0
 2768 000e FB73     		strb	r3, [r7, #15]
 950:..\src/interruptions.c ****     
 951:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 952:..\src/interruptions.c ****     static uint8 fsm_state;     
 953:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2769              		.loc 1 953 0
 2770 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2771 0012 002B     		cmp	r3, #0
 2772 0014 05D1     		bne	.L181
 954:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 68


 2773              		.loc 1 954 0
 2774 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2775 001a 0346     		mov	r3, r0
 2776 001c 1A46     		mov	r2, r3
 2777 001e 614B     		ldr	r3, .L196
 2778 0020 1A70     		strb	r2, [r3]
 2779              	.L181:
 955:..\src/interruptions.c ****     }
 956:..\src/interruptions.c ****        
 957:..\src/interruptions.c ****     switch (fsm_state){
 2780              		.loc 1 957 0
 2781 0022 604B     		ldr	r3, .L196
 2782 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2783 0026 032B     		cmp	r3, #3
 2784 0028 00F2B780 		bhi	.L193
 2785 002c 01A2     		adr	r2, .L184
 2786 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2787 0032 00BF     		.p2align 2
 2788              	.L184:
 2789 0034 45000000 		.word	.L183+1
 2790 0038 45000000 		.word	.L183+1
 2791 003c BF000000 		.word	.L185+1
 2792 0040 4F000000 		.word	.L186+1
 2793              		.p2align 1
 2794              	.L183:
 958:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 959:..\src/interruptions.c ****              
 960:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2795              		.loc 1 960 0
 2796 0044 7B68     		ldr	r3, [r7, #4]
 2797 0046 1A68     		ldr	r2, [r3]
 2798 0048 BB68     		ldr	r3, [r7, #8]
 2799 004a 1A60     		str	r2, [r3]
 961:..\src/interruptions.c ****     
 962:..\src/interruptions.c ****             break;
 2800              		.loc 1 962 0
 2801 004c A5E0     		b	.L182
 2802              	.L186:
 963:..\src/interruptions.c ****         
 964:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 965:..\src/interruptions.c **** 
 966:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2803              		.loc 1 966 0
 2804 004e 3B68     		ldr	r3, [r7]
 2805 0050 002B     		cmp	r3, #0
 2806 0052 17DD     		ble	.L187
 2807              		.loc 1 966 0 is_stmt 0 discriminator 1
 2808 0054 3A68     		ldr	r2, [r7]
 2809 0056 BB69     		ldr	r3, [r7, #24]
 2810 0058 9A42     		cmp	r2, r3
 2811 005a 13DD     		ble	.L187
 967:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2812              		.loc 1 967 0 is_stmt 1
 2813 005c 7B68     		ldr	r3, [r7, #4]
 2814 005e 1A68     		ldr	r2, [r3]
 2815 0060 514B     		ldr	r3, .L196+4
 2816 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 69


 2817 0066 1946     		mov	r1, r3
 2818 0068 3B68     		ldr	r3, [r7]
 2819 006a 03FB01F3 		mul	r3, r3, r1
 2820 006e 9900     		lsls	r1, r3, #2
 2821 0070 4E4B     		ldr	r3, .L196+8
 2822 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2823 0076 C3F58063 		rsb	r3, r3, #1024
 2824 007a 91FBF3F3 		sdiv	r3, r1, r3
 2825 007e 1A44     		add	r2, r2, r3
 2826 0080 BB68     		ldr	r3, [r7, #8]
 2827 0082 1A60     		str	r2, [r3]
 2828              	.L187:
 968:..\src/interruptions.c ****             }
 969:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2829              		.loc 1 969 0
 2830 0084 BB69     		ldr	r3, [r7, #24]
 2831 0086 002B     		cmp	r3, #0
 2832 0088 40F38480 		ble	.L194
 2833              		.loc 1 969 0 is_stmt 0 discriminator 1
 2834 008c BA69     		ldr	r2, [r7, #24]
 2835 008e 3B68     		ldr	r3, [r7]
 2836 0090 9A42     		cmp	r2, r3
 2837 0092 7FDD     		ble	.L194
 970:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2838              		.loc 1 970 0 is_stmt 1
 2839 0094 7B68     		ldr	r3, [r7, #4]
 2840 0096 1A68     		ldr	r2, [r3]
 2841 0098 434B     		ldr	r3, .L196+4
 2842 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2843 009e 1946     		mov	r1, r3
 2844 00a0 BB69     		ldr	r3, [r7, #24]
 2845 00a2 03FB01F3 		mul	r3, r3, r1
 2846 00a6 9900     		lsls	r1, r3, #2
 2847 00a8 404B     		ldr	r3, .L196+8
 2848 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2849 00ae C3F58063 		rsb	r3, r3, #1024
 2850 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2851 00b6 D21A     		subs	r2, r2, r3
 2852 00b8 BB68     		ldr	r3, [r7, #8]
 2853 00ba 1A60     		str	r2, [r3]
 971:..\src/interruptions.c ****             }
 972:..\src/interruptions.c ****             
 973:..\src/interruptions.c ****             break;
 2854              		.loc 1 973 0
 2855 00bc 6AE0     		b	.L194
 2856              	.L185:
 974:..\src/interruptions.c ****             
 975:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 976:..\src/interruptions.c ****             
 977:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2857              		.loc 1 977 0
 2858 00be 3B68     		ldr	r3, [r7]
 2859 00c0 002B     		cmp	r3, #0
 2860 00c2 31DD     		ble	.L189
 2861              		.loc 1 977 0 is_stmt 0 discriminator 1
 2862 00c4 3A68     		ldr	r2, [r7]
 2863 00c6 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 70


 2864 00c8 9A42     		cmp	r2, r3
 2865 00ca 2DDD     		ble	.L189
 978:..\src/interruptions.c ****                 if (motor_idx == 0){
 2866              		.loc 1 978 0 is_stmt 1
 2867 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2868 00ce 002B     		cmp	r3, #0
 2869 00d0 13D1     		bne	.L190
 979:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2870              		.loc 1 979 0
 2871 00d2 7B68     		ldr	r3, [r7, #4]
 2872 00d4 1A68     		ldr	r2, [r3]
 2873 00d6 344B     		ldr	r3, .L196+4
 2874 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2875 00dc 1946     		mov	r1, r3
 2876 00de 3B68     		ldr	r3, [r7]
 2877 00e0 03FB01F3 		mul	r3, r3, r1
 2878 00e4 9900     		lsls	r1, r3, #2
 2879 00e6 314B     		ldr	r3, .L196+8
 2880 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2881 00ec C3F58063 		rsb	r3, r3, #1024
 2882 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2883 00f4 1A44     		add	r2, r2, r3
 2884 00f6 BB68     		ldr	r3, [r7, #8]
 2885 00f8 1A60     		str	r2, [r3]
 2886              	.L190:
 980:..\src/interruptions.c ****                 }
 981:..\src/interruptions.c ****                 if (motor_idx == 1){
 2887              		.loc 1 981 0
 2888 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2889 00fc 012B     		cmp	r3, #1
 2890 00fe 13D1     		bne	.L189
 982:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2891              		.loc 1 982 0
 2892 0100 7B68     		ldr	r3, [r7, #4]
 2893 0102 1A68     		ldr	r2, [r3]
 2894 0104 284B     		ldr	r3, .L196+4
 2895 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2896 010a 1946     		mov	r1, r3
 2897 010c 3B68     		ldr	r3, [r7]
 2898 010e 03FB01F3 		mul	r3, r3, r1
 2899 0112 9900     		lsls	r1, r3, #2
 2900 0114 254B     		ldr	r3, .L196+8
 2901 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2902 011a C3F58063 		rsb	r3, r3, #1024
 2903 011e 91FBF3F3 		sdiv	r3, r1, r3
 2904 0122 D21A     		subs	r2, r2, r3
 2905 0124 BB68     		ldr	r3, [r7, #8]
 2906 0126 1A60     		str	r2, [r3]
 2907              	.L189:
 983:..\src/interruptions.c ****                 }   
 984:..\src/interruptions.c ****             }
 985:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2908              		.loc 1 985 0
 2909 0128 BB69     		ldr	r3, [r7, #24]
 2910 012a 002B     		cmp	r3, #0
 2911 012c 34DD     		ble	.L195
 2912              		.loc 1 985 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 71


 2913 012e BA69     		ldr	r2, [r7, #24]
 2914 0130 3B68     		ldr	r3, [r7]
 2915 0132 9A42     		cmp	r2, r3
 2916 0134 30DD     		ble	.L195
 986:..\src/interruptions.c ****                 if (motor_idx == 0){
 2917              		.loc 1 986 0 is_stmt 1
 2918 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2919 0138 002B     		cmp	r3, #0
 2920 013a 13D1     		bne	.L192
 987:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2921              		.loc 1 987 0
 2922 013c 7B68     		ldr	r3, [r7, #4]
 2923 013e 1A68     		ldr	r2, [r3]
 2924 0140 194B     		ldr	r3, .L196+4
 2925 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2926 0146 1946     		mov	r1, r3
 2927 0148 BB69     		ldr	r3, [r7, #24]
 2928 014a 03FB01F3 		mul	r3, r3, r1
 2929 014e 9900     		lsls	r1, r3, #2
 2930 0150 164B     		ldr	r3, .L196+8
 2931 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2932 0156 C3F58063 		rsb	r3, r3, #1024
 2933 015a 91FBF3F3 		sdiv	r3, r1, r3
 2934 015e D21A     		subs	r2, r2, r3
 2935 0160 BB68     		ldr	r3, [r7, #8]
 2936 0162 1A60     		str	r2, [r3]
 2937              	.L192:
 988:..\src/interruptions.c ****                 }
 989:..\src/interruptions.c ****                 if (motor_idx == 1){
 2938              		.loc 1 989 0
 2939 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2940 0166 012B     		cmp	r3, #1
 2941 0168 16D1     		bne	.L195
 990:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2942              		.loc 1 990 0
 2943 016a 7B68     		ldr	r3, [r7, #4]
 2944 016c 1A68     		ldr	r2, [r3]
 2945 016e 0E4B     		ldr	r3, .L196+4
 2946 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2947 0174 1946     		mov	r1, r3
 2948 0176 BB69     		ldr	r3, [r7, #24]
 2949 0178 03FB01F3 		mul	r3, r3, r1
 2950 017c 9900     		lsls	r1, r3, #2
 2951 017e 0B4B     		ldr	r3, .L196+8
 2952 0180 B3F8F231 		ldrh	r3, [r3, #498]
 2953 0184 C3F58063 		rsb	r3, r3, #1024
 2954 0188 91FBF3F3 		sdiv	r3, r1, r3
 2955 018c 1A44     		add	r2, r2, r3
 2956 018e BB68     		ldr	r3, [r7, #8]
 2957 0190 1A60     		str	r2, [r3]
 991:..\src/interruptions.c ****                 }
 992:..\src/interruptions.c ****             }
 993:..\src/interruptions.c ****             
 994:..\src/interruptions.c ****             break;
 2958              		.loc 1 994 0
 2959 0192 01E0     		b	.L195
 2960              	.L194:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 72


 973:..\src/interruptions.c ****             
 2961              		.loc 1 973 0
 2962 0194 00BF     		nop
 2963 0196 00E0     		b	.L193
 2964              	.L195:
 2965              		.loc 1 994 0
 2966 0198 00BF     		nop
 2967              	.L182:
 2968              	.L193:
 995:..\src/interruptions.c ****     }
 996:..\src/interruptions.c ****  
 997:..\src/interruptions.c **** }
 2969              		.loc 1 997 0
 2970 019a 00BF     		nop
 2971 019c 1037     		adds	r7, r7, #16
 2972              		.cfi_def_cfa_offset 8
 2973 019e BD46     		mov	sp, r7
 2974              		.cfi_def_cfa_register 13
 2975              		@ sp needed
 2976 01a0 80BD     		pop	{r7, pc}
 2977              	.L197:
 2978 01a2 00BF     		.align	2
 2979              	.L196:
 2980 01a4 8E000000 		.word	fsm_state.10528
 2981 01a8 00000000 		.word	g_mem
 2982 01ac 00000000 		.word	c_mem
 2983              		.cfi_endproc
 2984              	.LFE70:
 2985              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 2986              		.section	.text.motor_control_SH,"ax",%progbits
 2987              		.align	2
 2988              		.global	motor_control_SH
 2989              		.thumb
 2990              		.thumb_func
 2991              		.type	motor_control_SH, %function
 2992              	motor_control_SH:
 2993              	.LFB71:
 998:..\src/interruptions.c **** 
 999:..\src/interruptions.c **** //==============================================================================
1000:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
1001:..\src/interruptions.c **** //==============================================================================
1002:..\src/interruptions.c **** void motor_control_SH() {
 2994              		.loc 1 1002 0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 80
 2997              		@ frame_needed = 1, uses_anonymous_args = 0
 2998 0000 80B5     		push	{r7, lr}
 2999              		.cfi_def_cfa_offset 8
 3000              		.cfi_offset 7, -8
 3001              		.cfi_offset 14, -4
 3002 0002 94B0     		sub	sp, sp, #80
 3003              		.cfi_def_cfa_offset 88
 3004 0004 00AF     		add	r7, sp, #0
 3005              		.cfi_def_cfa_register 7
1003:..\src/interruptions.c **** 
1004:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3006              		.loc 1 1004 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 73


 3007 0006 0023     		movs	r3, #0
 3008 0008 FB64     		str	r3, [r7, #76]
1005:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1006:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1007:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1008:..\src/interruptions.c ****  
1009:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3009              		.loc 1 1009 0
 3010 000a 0023     		movs	r3, #0
 3011 000c 87F84730 		strb	r3, [r7, #71]
1010:..\src/interruptions.c ****     
1011:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3012              		.loc 1 1011 0
 3013 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 3014 0014 1346     		mov	r3, r2
 3015 0016 DB00     		lsls	r3, r3, #3
 3016 0018 9B1A     		subs	r3, r3, r2
 3017 001a 1B01     		lsls	r3, r3, #4
 3018 001c B033     		adds	r3, r3, #176
 3019 001e 9D4A     		ldr	r2, .L259
 3020 0020 1344     		add	r3, r3, r2
 3021 0022 3B64     		str	r3, [r7, #64]
1012:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3022              		.loc 1 1012 0
 3023 0024 3B6C     		ldr	r3, [r7, #64]
 3024 0026 93F86030 		ldrb	r3, [r3, #96]
 3025 002a 87F83F30 		strb	r3, [r7, #63]
1013:..\src/interruptions.c ****     
1014:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3026              		.loc 1 1014 0
 3027 002e 3B6C     		ldr	r3, [r7, #64]
 3028 0030 1B68     		ldr	r3, [r3]
 3029 0032 BB63     		str	r3, [r7, #56]
1015:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3030              		.loc 1 1015 0
 3031 0034 3B6C     		ldr	r3, [r7, #64]
 3032 0036 5B68     		ldr	r3, [r3, #4]
 3033 0038 7B63     		str	r3, [r7, #52]
1016:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3034              		.loc 1 1016 0
 3035 003a 3B6C     		ldr	r3, [r7, #64]
 3036 003c 9B68     		ldr	r3, [r3, #8]
 3037 003e 3B63     		str	r3, [r7, #48]
1017:..\src/interruptions.c **** 
1018:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3038              		.loc 1 1018 0
 3039 0040 3B6C     		ldr	r3, [r7, #64]
 3040 0042 DB68     		ldr	r3, [r3, #12]
 3041 0044 FB62     		str	r3, [r7, #44]
1019:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3042              		.loc 1 1019 0
 3043 0046 3B6C     		ldr	r3, [r7, #64]
 3044 0048 1B69     		ldr	r3, [r3, #16]
 3045 004a BB62     		str	r3, [r7, #40]
1020:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3046              		.loc 1 1020 0
 3047 004c 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 74


 3048 004e 5B69     		ldr	r3, [r3, #20]
 3049 0050 7B62     		str	r3, [r7, #36]
1021:..\src/interruptions.c **** 
1022:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 3050              		.loc 1 1022 0
 3051 0052 3B6C     		ldr	r3, [r7, #64]
 3052 0054 9B69     		ldr	r3, [r3, #24]
 3053 0056 3B62     		str	r3, [r7, #32]
1023:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3054              		.loc 1 1023 0
 3055 0058 3B6C     		ldr	r3, [r7, #64]
 3056 005a DB69     		ldr	r3, [r3, #28]
 3057 005c FB61     		str	r3, [r7, #28]
1024:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3058              		.loc 1 1024 0
 3059 005e 3B6C     		ldr	r3, [r7, #64]
 3060 0060 1B6A     		ldr	r3, [r3, #32]
 3061 0062 BB61     		str	r3, [r7, #24]
1025:..\src/interruptions.c ****     
1026:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3062              		.loc 1 1026 0
 3063 0064 3B6C     		ldr	r3, [r7, #64]
 3064 0066 5B6A     		ldr	r3, [r3, #36]
 3065 0068 7B61     		str	r3, [r7, #20]
1027:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3066              		.loc 1 1027 0
 3067 006a 3B6C     		ldr	r3, [r7, #64]
 3068 006c 9B6A     		ldr	r3, [r3, #40]
 3069 006e 3B61     		str	r3, [r7, #16]
1028:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 3070              		.loc 1 1028 0
 3071 0070 3B6C     		ldr	r3, [r7, #64]
 3072 0072 DB6A     		ldr	r3, [r3, #44]
 3073 0074 FB60     		str	r3, [r7, #12]
1029:..\src/interruptions.c **** 
1030:..\src/interruptions.c ****     // Static Variables
1031:..\src/interruptions.c **** 
1032:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1033:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1034:..\src/interruptions.c ****     
1035:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1036:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1037:..\src/interruptions.c ****     static int32 prev_pwm;
1038:..\src/interruptions.c **** 
1039:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1040:..\src/interruptions.c ****     static uint32 position_counter = 0;
1041:..\src/interruptions.c ****   
1042:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1043:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3074              		.loc 1 1043 0
 3075 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3076 007a 1B01     		lsls	r3, r3, #4
 3077 007c 864A     		ldr	r2, .L259+4
 3078 007e 9918     		adds	r1, r3, r2
 3079 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3080 0084 1B01     		lsls	r3, r3, #4
 3081 0086 854A     		ldr	r2, .L259+8
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 75


 3082 0088 1A44     		add	r2, r2, r3
 3083 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3084 008e 1846     		mov	r0, r3
 3085 0090 FFF7FEFF 		bl	compute_reference
1044:..\src/interruptions.c ****      
1045:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3086              		.loc 1 1045 0
 3087 0094 3B6C     		ldr	r3, [r7, #64]
 3088 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3089 009a 032B     		cmp	r3, #3
 3090 009c 00F2F781 		bhi	.L199
 3091 00a0 01A2     		adr	r2, .L201
 3092 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3093 00a6 00BF     		.p2align 2
 3094              	.L201:
 3095 00a8 55020000 		.word	.L200+1
 3096 00ac 49040000 		.word	.L202+1
 3097 00b0 3B030000 		.word	.L203+1
 3098 00b4 B9000000 		.word	.L204+1
 3099              		.p2align 1
 3100              	.L204:
1046:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1047:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1048:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3101              		.loc 1 1048 0
 3102 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3103 00bc 764A     		ldr	r2, .L259+4
 3104 00be 1B01     		lsls	r3, r3, #4
 3105 00c0 1344     		add	r3, r3, r2
 3106 00c2 1A68     		ldr	r2, [r3]
 3107 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3108 00c8 7549     		ldr	r1, .L259+12
 3109 00ca 3420     		movs	r0, #52
 3110 00cc 00FB03F3 		mul	r3, r0, r3
 3111 00d0 0B44     		add	r3, r3, r1
 3112 00d2 1B68     		ldr	r3, [r3]
 3113 00d4 D31A     		subs	r3, r2, r3
 3114 00d6 BB60     		str	r3, [r7, #8]
1049:..\src/interruptions.c **** 
1050:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3115              		.loc 1 1050 0
 3116 00d8 724B     		ldr	r3, .L259+16
 3117 00da 1A68     		ldr	r2, [r3]
 3118 00dc BB68     		ldr	r3, [r7, #8]
 3119 00de 1344     		add	r3, r3, r2
 3120 00e0 704A     		ldr	r2, .L259+16
 3121 00e2 1360     		str	r3, [r2]
1051:..\src/interruptions.c **** 
1052:..\src/interruptions.c ****             // error_sum saturation
1053:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3122              		.loc 1 1053 0
 3123 00e4 6F4B     		ldr	r3, .L259+16
 3124 00e6 1B68     		ldr	r3, [r3]
 3125 00e8 6F4A     		ldr	r2, .L259+20
 3126 00ea 9342     		cmp	r3, r2
 3127 00ec 03DD     		ble	.L205
1054:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 76


 3128              		.loc 1 1054 0
 3129 00ee 6D4B     		ldr	r3, .L259+16
 3130 00f0 6D4A     		ldr	r2, .L259+20
 3131 00f2 1A60     		str	r2, [r3]
 3132 00f4 07E0     		b	.L206
 3133              	.L205:
1055:..\src/interruptions.c ****             else {
1056:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3134              		.loc 1 1056 0
 3135 00f6 6B4B     		ldr	r3, .L259+16
 3136 00f8 1B68     		ldr	r3, [r3]
 3137 00fa 6C4A     		ldr	r2, .L259+24
 3138 00fc 9342     		cmp	r3, r2
 3139 00fe 02DA     		bge	.L206
1057:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 3140              		.loc 1 1057 0
 3141 0100 684B     		ldr	r3, .L259+16
 3142 0102 6A4A     		ldr	r2, .L259+24
 3143 0104 1A60     		str	r2, [r3]
 3144              	.L206:
1058:..\src/interruptions.c ****             }
1059:..\src/interruptions.c ****             
1060:..\src/interruptions.c ****             // ------ position PID control ------
1061:..\src/interruptions.c **** 
1062:..\src/interruptions.c ****             i_ref = 0;
 3145              		.loc 1 1062 0
 3146 0106 0023     		movs	r3, #0
 3147 0108 BB64     		str	r3, [r7, #72]
1063:..\src/interruptions.c ****             
1064:..\src/interruptions.c ****             // Proportional
1065:..\src/interruptions.c ****             if (k_p_dl != 0)
 3148              		.loc 1 1065 0
 3149 010a 3B6A     		ldr	r3, [r7, #32]
 3150 010c 002B     		cmp	r3, #0
 3151 010e 07D0     		beq	.L207
1066:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3152              		.loc 1 1066 0
 3153 0110 3B6A     		ldr	r3, [r7, #32]
 3154 0112 BA68     		ldr	r2, [r7, #8]
 3155 0114 02FB03F3 		mul	r3, r2, r3
 3156 0118 1B14     		asrs	r3, r3, #16
 3157 011a BA6C     		ldr	r2, [r7, #72]
 3158 011c 1344     		add	r3, r3, r2
 3159 011e BB64     		str	r3, [r7, #72]
 3160              	.L207:
1067:..\src/interruptions.c **** 
1068:..\src/interruptions.c ****             // Integral
1069:..\src/interruptions.c ****             if (k_i_dl != 0)
 3161              		.loc 1 1069 0
 3162 0120 FB69     		ldr	r3, [r7, #28]
 3163 0122 002B     		cmp	r3, #0
 3164 0124 08D0     		beq	.L208
1070:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3165              		.loc 1 1070 0
 3166 0126 5F4B     		ldr	r3, .L259+16
 3167 0128 1B68     		ldr	r3, [r3]
 3168 012a FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 77


 3169 012c 02FB03F3 		mul	r3, r2, r3
 3170 0130 1B14     		asrs	r3, r3, #16
 3171 0132 BA6C     		ldr	r2, [r7, #72]
 3172 0134 1344     		add	r3, r3, r2
 3173 0136 BB64     		str	r3, [r7, #72]
 3174              	.L208:
1071:..\src/interruptions.c **** 
1072:..\src/interruptions.c ****             // Derivative
1073:..\src/interruptions.c ****             if (k_d_dl != 0)
 3175              		.loc 1 1073 0
 3176 0138 BB69     		ldr	r3, [r7, #24]
 3177 013a 002B     		cmp	r3, #0
 3178 013c 0AD0     		beq	.L209
1074:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3179              		.loc 1 1074 0
 3180 013e 5C4B     		ldr	r3, .L259+28
 3181 0140 1B68     		ldr	r3, [r3]
 3182 0142 BA68     		ldr	r2, [r7, #8]
 3183 0144 D31A     		subs	r3, r2, r3
 3184 0146 BA69     		ldr	r2, [r7, #24]
 3185 0148 02FB03F3 		mul	r3, r2, r3
 3186 014c 1B14     		asrs	r3, r3, #16
 3187 014e BA6C     		ldr	r2, [r7, #72]
 3188 0150 1344     		add	r3, r3, r2
 3189 0152 BB64     		str	r3, [r7, #72]
 3190              	.L209:
1075:..\src/interruptions.c ****                         
1076:..\src/interruptions.c ****             // Update previous position
1077:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3191              		.loc 1 1077 0
 3192 0154 564A     		ldr	r2, .L259+28
 3193 0156 BB68     		ldr	r3, [r7, #8]
 3194 0158 1360     		str	r3, [r2]
1078:..\src/interruptions.c **** 
1079:..\src/interruptions.c ****             // motor direction depends on i_ref
1080:..\src/interruptions.c ****             if (i_ref >= 0)
 3195              		.loc 1 1080 0
 3196 015a BB6C     		ldr	r3, [r7, #72]
 3197 015c 002B     		cmp	r3, #0
 3198 015e 03DB     		blt	.L210
1081:..\src/interruptions.c ****                 motor_dir = TRUE;
 3199              		.loc 1 1081 0
 3200 0160 544B     		ldr	r3, .L259+32
 3201 0162 0122     		movs	r2, #1
 3202 0164 1A70     		strb	r2, [r3]
 3203 0166 02E0     		b	.L211
 3204              	.L210:
1082:..\src/interruptions.c ****             else
1083:..\src/interruptions.c ****                 motor_dir = FALSE;
 3205              		.loc 1 1083 0
 3206 0168 524B     		ldr	r3, .L259+32
 3207 016a 0022     		movs	r2, #0
 3208 016c 1A70     		strb	r2, [r3]
 3209              	.L211:
1084:..\src/interruptions.c **** 
1085:..\src/interruptions.c ****             // saturate max current
1086:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 78


 3210              		.loc 1 1086 0
 3211 016e 3B6C     		ldr	r3, [r7, #64]
 3212 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 3213 0174 1A46     		mov	r2, r3
 3214 0176 BB6C     		ldr	r3, [r7, #72]
 3215 0178 9A42     		cmp	r2, r3
 3216 017a 04DA     		bge	.L212
1087:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3217              		.loc 1 1087 0
 3218 017c 3B6C     		ldr	r3, [r7, #64]
 3219 017e B3F95C30 		ldrsh	r3, [r3, #92]
 3220 0182 BB64     		str	r3, [r7, #72]
 3221 0184 0BE0     		b	.L213
 3222              	.L212:
1088:..\src/interruptions.c ****             else {
1089:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3223              		.loc 1 1089 0
 3224 0186 3B6C     		ldr	r3, [r7, #64]
 3225 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 3226 018c 5A42     		negs	r2, r3
 3227 018e BB6C     		ldr	r3, [r7, #72]
 3228 0190 9A42     		cmp	r2, r3
 3229 0192 04DD     		ble	.L213
1090:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3230              		.loc 1 1090 0
 3231 0194 3B6C     		ldr	r3, [r7, #64]
 3232 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 3233 019a 5B42     		negs	r3, r3
 3234 019c BB64     		str	r3, [r7, #72]
 3235              	.L213:
1091:..\src/interruptions.c ****         	}
1092:..\src/interruptions.c **** 
1093:..\src/interruptions.c ****             // current error and curr error sum
1094:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3236              		.loc 1 1094 0
 3237 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3238 01a2 3F4A     		ldr	r2, .L259+12
 3239 01a4 3421     		movs	r1, #52
 3240 01a6 01FB03F3 		mul	r3, r1, r3
 3241 01aa 1344     		add	r3, r3, r2
 3242 01ac 0C33     		adds	r3, r3, #12
 3243 01ae 1B68     		ldr	r3, [r3]
 3244 01b0 BA6C     		ldr	r2, [r7, #72]
 3245 01b2 D31A     		subs	r3, r2, r3
 3246 01b4 7B60     		str	r3, [r7, #4]
1095:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3247              		.loc 1 1095 0
 3248 01b6 404B     		ldr	r3, .L259+36
 3249 01b8 1A68     		ldr	r2, [r3]
 3250 01ba 7B68     		ldr	r3, [r7, #4]
 3251 01bc 1344     		add	r3, r3, r2
 3252 01be 3E4A     		ldr	r2, .L259+36
 3253 01c0 1360     		str	r3, [r2]
1096:..\src/interruptions.c ****             
1097:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3254              		.loc 1 1097 0
 3255 01c2 3D4B     		ldr	r3, .L259+36
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 79


 3256 01c4 1B68     		ldr	r3, [r3]
 3257 01c6 3D4A     		ldr	r2, .L259+40
 3258 01c8 9342     		cmp	r3, r2
 3259 01ca 03DD     		ble	.L214
1098:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3260              		.loc 1 1098 0
 3261 01cc 3A4B     		ldr	r3, .L259+36
 3262 01ce 3B4A     		ldr	r2, .L259+40
 3263 01d0 1A60     		str	r2, [r3]
 3264 01d2 07E0     		b	.L215
 3265              	.L214:
1099:..\src/interruptions.c ****             else {
1100:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3266              		.loc 1 1100 0
 3267 01d4 384B     		ldr	r3, .L259+36
 3268 01d6 1B68     		ldr	r3, [r3]
 3269 01d8 394A     		ldr	r2, .L259+44
 3270 01da 9342     		cmp	r3, r2
 3271 01dc 02DA     		bge	.L215
1101:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3272              		.loc 1 1101 0
 3273 01de 364B     		ldr	r3, .L259+36
 3274 01e0 374A     		ldr	r2, .L259+44
 3275 01e2 1A60     		str	r2, [r3]
 3276              	.L215:
1102:..\src/interruptions.c ****             }
1103:..\src/interruptions.c **** 
1104:..\src/interruptions.c ****             // ----- current PID control -----
1105:..\src/interruptions.c **** 
1106:..\src/interruptions.c ****             pwm_input = 0;
 3277              		.loc 1 1106 0
 3278 01e4 0023     		movs	r3, #0
 3279 01e6 FB64     		str	r3, [r7, #76]
1107:..\src/interruptions.c **** 
1108:..\src/interruptions.c ****             // Proportional
1109:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3280              		.loc 1 1109 0
 3281 01e8 7B69     		ldr	r3, [r7, #20]
 3282 01ea 002B     		cmp	r3, #0
 3283 01ec 07D0     		beq	.L216
1110:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3284              		.loc 1 1110 0
 3285 01ee 7B69     		ldr	r3, [r7, #20]
 3286 01f0 7A68     		ldr	r2, [r7, #4]
 3287 01f2 02FB03F3 		mul	r3, r2, r3
 3288 01f6 1B14     		asrs	r3, r3, #16
 3289 01f8 FA6C     		ldr	r2, [r7, #76]
 3290 01fa 1344     		add	r3, r3, r2
 3291 01fc FB64     		str	r3, [r7, #76]
 3292              	.L216:
1111:..\src/interruptions.c **** 
1112:..\src/interruptions.c ****             // Integral
1113:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3293              		.loc 1 1113 0
 3294 01fe 3B69     		ldr	r3, [r7, #16]
 3295 0200 002B     		cmp	r3, #0
 3296 0202 08D0     		beq	.L217
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 80


1114:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3297              		.loc 1 1114 0
 3298 0204 2C4B     		ldr	r3, .L259+36
 3299 0206 1B68     		ldr	r3, [r3]
 3300 0208 3A69     		ldr	r2, [r7, #16]
 3301 020a 02FB03F3 		mul	r3, r2, r3
 3302 020e 1B14     		asrs	r3, r3, #16
 3303 0210 FA6C     		ldr	r2, [r7, #76]
 3304 0212 1344     		add	r3, r3, r2
 3305 0214 FB64     		str	r3, [r7, #76]
 3306              	.L217:
1115:..\src/interruptions.c **** 
1116:..\src/interruptions.c ****             // Derivative
1117:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3307              		.loc 1 1117 0
 3308 0216 FB68     		ldr	r3, [r7, #12]
 3309 0218 002B     		cmp	r3, #0
 3310 021a 0AD0     		beq	.L218
1118:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3311              		.loc 1 1118 0
 3312 021c 294B     		ldr	r3, .L259+48
 3313 021e 1B68     		ldr	r3, [r3]
 3314 0220 7A68     		ldr	r2, [r7, #4]
 3315 0222 D31A     		subs	r3, r2, r3
 3316 0224 FA68     		ldr	r2, [r7, #12]
 3317 0226 02FB03F3 		mul	r3, r2, r3
 3318 022a 1B14     		asrs	r3, r3, #16
 3319 022c FA6C     		ldr	r2, [r7, #76]
 3320 022e 1344     		add	r3, r3, r2
 3321 0230 FB64     		str	r3, [r7, #76]
 3322              	.L218:
1119:..\src/interruptions.c **** 
1120:..\src/interruptions.c ****             // pwm_input saturation
1121:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3323              		.loc 1 1121 0
 3324 0232 FB6C     		ldr	r3, [r7, #76]
 3325 0234 13F1640F 		cmn	r3, #100
 3326 0238 03DA     		bge	.L219
1122:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3327              		.loc 1 1122 0
 3328 023a 6FF06303 		mvn	r3, #99
 3329 023e FB64     		str	r3, [r7, #76]
 3330 0240 04E0     		b	.L220
 3331              	.L219:
1123:..\src/interruptions.c ****             else {
1124:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3332              		.loc 1 1124 0
 3333 0242 FB6C     		ldr	r3, [r7, #76]
 3334 0244 642B     		cmp	r3, #100
 3335 0246 01DD     		ble	.L220
1125:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3336              		.loc 1 1125 0
 3337 0248 6423     		movs	r3, #100
 3338 024a FB64     		str	r3, [r7, #76]
 3339              	.L220:
1126:..\src/interruptions.c ****             }
1127:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 81


1128:..\src/interruptions.c ****             // Update previous current
1129:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3340              		.loc 1 1129 0
 3341 024c 1D4A     		ldr	r2, .L259+48
 3342 024e 7B68     		ldr	r3, [r7, #4]
 3343 0250 1360     		str	r3, [r2]
1130:..\src/interruptions.c **** 
1131:..\src/interruptions.c ****         break;
 3344              		.loc 1 1131 0
 3345 0252 1CE1     		b	.L199
 3346              	.L200:
1132:..\src/interruptions.c **** 
1133:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1134:..\src/interruptions.c ****         case CONTROL_ANGLE:
1135:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3347              		.loc 1 1135 0
 3348 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3349 0258 0F4A     		ldr	r2, .L259+4
 3350 025a 1B01     		lsls	r3, r3, #4
 3351 025c 1344     		add	r3, r3, r2
 3352 025e 1A68     		ldr	r2, [r3]
 3353 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3354 0264 0E49     		ldr	r1, .L259+12
 3355 0266 3420     		movs	r0, #52
 3356 0268 00FB03F3 		mul	r3, r0, r3
 3357 026c 0B44     		add	r3, r3, r1
 3358 026e 1B68     		ldr	r3, [r3]
 3359 0270 D31A     		subs	r3, r2, r3
 3360 0272 BB60     		str	r3, [r7, #8]
1136:..\src/interruptions.c **** 
1137:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3361              		.loc 1 1137 0
 3362 0274 0B4B     		ldr	r3, .L259+16
 3363 0276 1A68     		ldr	r2, [r3]
 3364 0278 BB68     		ldr	r3, [r7, #8]
 3365 027a 1344     		add	r3, r3, r2
 3366 027c 094A     		ldr	r2, .L259+16
 3367 027e 1360     		str	r3, [r2]
1138:..\src/interruptions.c **** 
1139:..\src/interruptions.c ****             // anti-windup (for integral control)
1140:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3368              		.loc 1 1140 0
 3369 0280 084B     		ldr	r3, .L259+16
 3370 0282 1B68     		ldr	r3, [r3]
 3371 0284 B3F57A7F 		cmp	r3, #1000
 3372 0288 1EDD     		ble	.L221
1141:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3373              		.loc 1 1141 0
 3374 028a 064B     		ldr	r3, .L259+16
 3375 028c 4FF47A72 		mov	r2, #1000
 3376 0290 1A60     		str	r2, [r3]
 3377 0292 21E0     		b	.L222
 3378              	.L260:
 3379              		.align	2
 3380              	.L259:
 3381 0294 00000000 		.word	c_mem
 3382 0298 00000000 		.word	g_ref
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 82


 3383 029c 00000000 		.word	g_refOld
 3384 02a0 00000000 		.word	g_meas
 3385 02a4 90000000 		.word	pos_error_sum.10555
 3386 02a8 80F0FA02 		.word	50000000
 3387 02ac 800F05FD 		.word	-50000000
 3388 02b0 94000000 		.word	prev_pos_err.10557
 3389 02b4 98000000 		.word	motor_dir.10560
 3390 02b8 9C000000 		.word	curr_error_sum.10556
 3391 02bc A0860100 		.word	100000
 3392 02c0 6079FEFF 		.word	-100000
 3393 02c4 A0000000 		.word	prev_curr_err.10558
 3394              	.L221:
1142:..\src/interruptions.c ****             else {
1143:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3395              		.loc 1 1143 0
 3396 02c8 9D4B     		ldr	r3, .L261
 3397 02ca 1B68     		ldr	r3, [r3]
 3398 02cc 13F57A7F 		cmn	r3, #1000
 3399 02d0 02DA     		bge	.L222
1144:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3400              		.loc 1 1144 0
 3401 02d2 9B4B     		ldr	r3, .L261
 3402 02d4 9B4A     		ldr	r2, .L261+4
 3403 02d6 1A60     		str	r2, [r3]
 3404              	.L222:
1145:..\src/interruptions.c ****             }
1146:..\src/interruptions.c **** 
1147:..\src/interruptions.c ****             // Proportional
1148:..\src/interruptions.c ****             if (k_p != 0) 
 3405              		.loc 1 1148 0
 3406 02d8 BB6B     		ldr	r3, [r7, #56]
 3407 02da 002B     		cmp	r3, #0
 3408 02dc 05D0     		beq	.L223
1149:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3409              		.loc 1 1149 0
 3410 02de BB6B     		ldr	r3, [r7, #56]
 3411 02e0 BA68     		ldr	r2, [r7, #8]
 3412 02e2 02FB03F3 		mul	r3, r2, r3
 3413 02e6 1B14     		asrs	r3, r3, #16
 3414 02e8 FB64     		str	r3, [r7, #76]
 3415              	.L223:
1150:..\src/interruptions.c ****             
1151:..\src/interruptions.c **** 
1152:..\src/interruptions.c ****             // Integral
1153:..\src/interruptions.c ****             if (k_i != 0) 
 3416              		.loc 1 1153 0
 3417 02ea 7B6B     		ldr	r3, [r7, #52]
 3418 02ec 002B     		cmp	r3, #0
 3419 02ee 08D0     		beq	.L224
1154:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3420              		.loc 1 1154 0
 3421 02f0 934B     		ldr	r3, .L261
 3422 02f2 1B68     		ldr	r3, [r3]
 3423 02f4 7A6B     		ldr	r2, [r7, #52]
 3424 02f6 02FB03F3 		mul	r3, r2, r3
 3425 02fa 1B14     		asrs	r3, r3, #16
 3426 02fc FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 83


 3427 02fe 1344     		add	r3, r3, r2
 3428 0300 FB64     		str	r3, [r7, #76]
 3429              	.L224:
1155:..\src/interruptions.c ****             
1156:..\src/interruptions.c **** 
1157:..\src/interruptions.c ****             // Derivative
1158:..\src/interruptions.c ****             if (k_d != 0) 
 3430              		.loc 1 1158 0
 3431 0302 3B6B     		ldr	r3, [r7, #48]
 3432 0304 002B     		cmp	r3, #0
 3433 0306 0AD0     		beq	.L225
1159:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3434              		.loc 1 1159 0
 3435 0308 8F4B     		ldr	r3, .L261+8
 3436 030a 1B68     		ldr	r3, [r3]
 3437 030c BA68     		ldr	r2, [r7, #8]
 3438 030e D31A     		subs	r3, r2, r3
 3439 0310 3A6B     		ldr	r2, [r7, #48]
 3440 0312 02FB03F3 		mul	r3, r2, r3
 3441 0316 1B14     		asrs	r3, r3, #16
 3442 0318 FA6C     		ldr	r2, [r7, #76]
 3443 031a 1344     		add	r3, r3, r2
 3444 031c FB64     		str	r3, [r7, #76]
 3445              	.L225:
1160:..\src/interruptions.c ****             
1161:..\src/interruptions.c **** 
1162:..\src/interruptions.c ****             // Update measure
1163:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3446              		.loc 1 1163 0
 3447 031e 8A4A     		ldr	r2, .L261+8
 3448 0320 BB68     		ldr	r3, [r7, #8]
 3449 0322 1360     		str	r3, [r2]
1164:..\src/interruptions.c **** 
1165:..\src/interruptions.c ****             if (pwm_input > 0)
 3450              		.loc 1 1165 0
 3451 0324 FB6C     		ldr	r3, [r7, #76]
 3452 0326 002B     		cmp	r3, #0
 3453 0328 03DD     		ble	.L226
1166:..\src/interruptions.c ****                 motor_dir = TRUE;
 3454              		.loc 1 1166 0
 3455 032a 884B     		ldr	r3, .L261+12
 3456 032c 0122     		movs	r2, #1
 3457 032e 1A70     		strb	r2, [r3]
1167:..\src/interruptions.c ****             else
1168:..\src/interruptions.c ****                 motor_dir = FALSE;
1169:..\src/interruptions.c **** 
1170:..\src/interruptions.c ****         break;
 3458              		.loc 1 1170 0
 3459 0330 ADE0     		b	.L199
 3460              	.L226:
1168:..\src/interruptions.c **** 
 3461              		.loc 1 1168 0
 3462 0332 864B     		ldr	r3, .L261+12
 3463 0334 0022     		movs	r2, #0
 3464 0336 1A70     		strb	r2, [r3]
 3465              		.loc 1 1170 0
 3466 0338 A9E0     		b	.L199
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 84


 3467              	.L203:
1171:..\src/interruptions.c **** 
1172:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1173:..\src/interruptions.c ****         case CONTROL_CURRENT:
1174:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3468              		.loc 1 1174 0
 3469 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3470 033e 844A     		ldr	r2, .L261+16
 3471 0340 1B01     		lsls	r3, r3, #4
 3472 0342 1344     		add	r3, r3, r2
 3473 0344 0C33     		adds	r3, r3, #12
 3474 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3475 0348 002B     		cmp	r3, #0
 3476 034a 00F09D80 		beq	.L257
 3477              		.loc 1 1174 0 is_stmt 0 discriminator 1
 3478 034e 814B     		ldr	r3, .L261+20
 3479 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3480 0352 002B     		cmp	r3, #0
 3481 0354 00F09880 		beq	.L257
1175:..\src/interruptions.c ****                 
1176:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3482              		.loc 1 1176 0 is_stmt 1
 3483 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3484 035c 7C4A     		ldr	r2, .L261+16
 3485 035e 1B01     		lsls	r3, r3, #4
 3486 0360 1344     		add	r3, r3, r2
 3487 0362 0433     		adds	r3, r3, #4
 3488 0364 1B68     		ldr	r3, [r3]
 3489 0366 BB64     		str	r3, [r7, #72]
1177:..\src/interruptions.c **** 
1178:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3490              		.loc 1 1178 0
 3491 0368 3B6C     		ldr	r3, [r7, #64]
 3492 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3493 036e 1A46     		mov	r2, r3
 3494 0370 BB6C     		ldr	r3, [r7, #72]
 3495 0372 9A42     		cmp	r2, r3
 3496 0374 04DA     		bge	.L229
1179:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3497              		.loc 1 1179 0
 3498 0376 3B6C     		ldr	r3, [r7, #64]
 3499 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3500 037c BB64     		str	r3, [r7, #72]
 3501 037e 0BE0     		b	.L230
 3502              	.L229:
1180:..\src/interruptions.c ****                 else {
1181:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3503              		.loc 1 1181 0
 3504 0380 3B6C     		ldr	r3, [r7, #64]
 3505 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3506 0386 5A42     		negs	r2, r3
 3507 0388 BB6C     		ldr	r3, [r7, #72]
 3508 038a 9A42     		cmp	r2, r3
 3509 038c 04DD     		ble	.L230
1182:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3510              		.loc 1 1182 0
 3511 038e 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 85


 3512 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3513 0394 5B42     		negs	r3, r3
 3514 0396 BB64     		str	r3, [r7, #72]
 3515              	.L230:
1183:..\src/interruptions.c ****                 }
1184:..\src/interruptions.c ****                 
1185:..\src/interruptions.c ****                 // current error
1186:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3516              		.loc 1 1186 0
 3517 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3518 039c 6E4A     		ldr	r2, .L261+24
 3519 039e 3421     		movs	r1, #52
 3520 03a0 01FB03F3 		mul	r3, r1, r3
 3521 03a4 1344     		add	r3, r3, r2
 3522 03a6 0C33     		adds	r3, r3, #12
 3523 03a8 1B68     		ldr	r3, [r3]
 3524 03aa BA6C     		ldr	r2, [r7, #72]
 3525 03ac D31A     		subs	r3, r2, r3
 3526 03ae 7B60     		str	r3, [r7, #4]
1187:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3527              		.loc 1 1187 0
 3528 03b0 6A4B     		ldr	r3, .L261+28
 3529 03b2 1A68     		ldr	r2, [r3]
 3530 03b4 7B68     		ldr	r3, [r7, #4]
 3531 03b6 1344     		add	r3, r3, r2
 3532 03b8 684A     		ldr	r2, .L261+28
 3533 03ba 1360     		str	r3, [r2]
1188:..\src/interruptions.c ****                 
1189:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3534              		.loc 1 1189 0
 3535 03bc 674B     		ldr	r3, .L261+28
 3536 03be 1B68     		ldr	r3, [r3]
 3537 03c0 674A     		ldr	r2, .L261+32
 3538 03c2 9342     		cmp	r3, r2
 3539 03c4 03DD     		ble	.L231
1190:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3540              		.loc 1 1190 0
 3541 03c6 654B     		ldr	r3, .L261+28
 3542 03c8 654A     		ldr	r2, .L261+32
 3543 03ca 1A60     		str	r2, [r3]
 3544 03cc 07E0     		b	.L232
 3545              	.L231:
1191:..\src/interruptions.c ****                 else {
1192:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3546              		.loc 1 1192 0
 3547 03ce 634B     		ldr	r3, .L261+28
 3548 03d0 1B68     		ldr	r3, [r3]
 3549 03d2 644A     		ldr	r2, .L261+36
 3550 03d4 9342     		cmp	r3, r2
 3551 03d6 02DA     		bge	.L232
1193:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3552              		.loc 1 1193 0
 3553 03d8 604B     		ldr	r3, .L261+28
 3554 03da 624A     		ldr	r2, .L261+36
 3555 03dc 1A60     		str	r2, [r3]
 3556              	.L232:
1194:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 86


1195:..\src/interruptions.c **** 
1196:..\src/interruptions.c ****                 pwm_input = 0;
 3557              		.loc 1 1196 0
 3558 03de 0023     		movs	r3, #0
 3559 03e0 FB64     		str	r3, [r7, #76]
1197:..\src/interruptions.c **** 
1198:..\src/interruptions.c ****                 // Proportional
1199:..\src/interruptions.c ****                 if (k_p_c != 0)
 3560              		.loc 1 1199 0
 3561 03e2 FB6A     		ldr	r3, [r7, #44]
 3562 03e4 002B     		cmp	r3, #0
 3563 03e6 07D0     		beq	.L233
1200:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3564              		.loc 1 1200 0
 3565 03e8 FB6A     		ldr	r3, [r7, #44]
 3566 03ea 7A68     		ldr	r2, [r7, #4]
 3567 03ec 02FB03F3 		mul	r3, r2, r3
 3568 03f0 1B14     		asrs	r3, r3, #16
 3569 03f2 FA6C     		ldr	r2, [r7, #76]
 3570 03f4 1344     		add	r3, r3, r2
 3571 03f6 FB64     		str	r3, [r7, #76]
 3572              	.L233:
1201:..\src/interruptions.c **** 
1202:..\src/interruptions.c ****                 // Integral
1203:..\src/interruptions.c ****                 if (k_i_c != 0)
 3573              		.loc 1 1203 0
 3574 03f8 BB6A     		ldr	r3, [r7, #40]
 3575 03fa 002B     		cmp	r3, #0
 3576 03fc 08D0     		beq	.L234
1204:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3577              		.loc 1 1204 0
 3578 03fe 574B     		ldr	r3, .L261+28
 3579 0400 1B68     		ldr	r3, [r3]
 3580 0402 BA6A     		ldr	r2, [r7, #40]
 3581 0404 02FB03F3 		mul	r3, r2, r3
 3582 0408 1B14     		asrs	r3, r3, #16
 3583 040a FA6C     		ldr	r2, [r7, #76]
 3584 040c 1344     		add	r3, r3, r2
 3585 040e FB64     		str	r3, [r7, #76]
 3586              	.L234:
1205:..\src/interruptions.c **** 
1206:..\src/interruptions.c ****                 // Derivative
1207:..\src/interruptions.c ****                 if (k_d_c != 0)
 3587              		.loc 1 1207 0
 3588 0410 7B6A     		ldr	r3, [r7, #36]
 3589 0412 002B     		cmp	r3, #0
 3590 0414 0AD0     		beq	.L235
1208:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3591              		.loc 1 1208 0
 3592 0416 544B     		ldr	r3, .L261+40
 3593 0418 1B68     		ldr	r3, [r3]
 3594 041a 7A68     		ldr	r2, [r7, #4]
 3595 041c D31A     		subs	r3, r2, r3
 3596 041e 7A6A     		ldr	r2, [r7, #36]
 3597 0420 02FB03F3 		mul	r3, r2, r3
 3598 0424 1B14     		asrs	r3, r3, #16
 3599 0426 FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 87


 3600 0428 1344     		add	r3, r3, r2
 3601 042a FB64     		str	r3, [r7, #76]
 3602              	.L235:
1209:..\src/interruptions.c ****                 
1210:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3603              		.loc 1 1210 0
 3604 042c 4E4A     		ldr	r2, .L261+40
 3605 042e 7B68     		ldr	r3, [r7, #4]
 3606 0430 1360     		str	r3, [r2]
1211:..\src/interruptions.c ****                 
1212:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3607              		.loc 1 1212 0
 3608 0432 FB6C     		ldr	r3, [r7, #76]
 3609 0434 002B     		cmp	r3, #0
 3610 0436 03DB     		blt	.L236
1213:..\src/interruptions.c ****                     motor_dir = TRUE;
 3611              		.loc 1 1213 0
 3612 0438 444B     		ldr	r3, .L261+12
 3613 043a 0122     		movs	r2, #1
 3614 043c 1A70     		strb	r2, [r3]
1214:..\src/interruptions.c ****                 else
1215:..\src/interruptions.c ****                     motor_dir = FALSE;
1216:..\src/interruptions.c ****             }
1217:..\src/interruptions.c ****         break;
 3615              		.loc 1 1217 0
 3616 043e 23E0     		b	.L257
 3617              	.L236:
1215:..\src/interruptions.c ****             }
 3618              		.loc 1 1215 0
 3619 0440 424B     		ldr	r3, .L261+12
 3620 0442 0022     		movs	r2, #0
 3621 0444 1A70     		strb	r2, [r3]
 3622              		.loc 1 1217 0
 3623 0446 1FE0     		b	.L257
 3624              	.L202:
1218:..\src/interruptions.c ****         
1219:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1220:..\src/interruptions.c ****         case CONTROL_PWM:
1221:..\src/interruptions.c **** 
1222:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3625              		.loc 1 1222 0
 3626 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3627 044c 404A     		ldr	r2, .L261+16
 3628 044e 1B01     		lsls	r3, r3, #4
 3629 0450 1344     		add	r3, r3, r2
 3630 0452 0833     		adds	r3, r3, #8
 3631 0454 1B68     		ldr	r3, [r3]
 3632 0456 FB64     		str	r3, [r7, #76]
1223:..\src/interruptions.c **** 
1224:..\src/interruptions.c ****             if (pwm_input > 0) 
 3633              		.loc 1 1224 0
 3634 0458 FB6C     		ldr	r3, [r7, #76]
 3635 045a 002B     		cmp	r3, #0
 3636 045c 03DD     		ble	.L237
1225:..\src/interruptions.c ****                 motor_dir = TRUE;
 3637              		.loc 1 1225 0
 3638 045e 3B4B     		ldr	r3, .L261+12
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 88


 3639 0460 0122     		movs	r2, #1
 3640 0462 1A70     		strb	r2, [r3]
 3641 0464 02E0     		b	.L238
 3642              	.L237:
1226:..\src/interruptions.c ****             else 
1227:..\src/interruptions.c ****                 motor_dir = FALSE;
 3643              		.loc 1 1227 0
 3644 0466 394B     		ldr	r3, .L261+12
 3645 0468 0022     		movs	r2, #0
 3646 046a 1A70     		strb	r2, [r3]
 3647              	.L238:
1228:..\src/interruptions.c ****             
1229:..\src/interruptions.c **** 
1230:..\src/interruptions.c ****             // pwm_input saturation
1231:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3648              		.loc 1 1231 0
 3649 046c FB6C     		ldr	r3, [r7, #76]
 3650 046e 13F1640F 		cmn	r3, #100
 3651 0472 03DA     		bge	.L239
1232:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3652              		.loc 1 1232 0
 3653 0474 6FF06303 		mvn	r3, #99
 3654 0478 FB64     		str	r3, [r7, #76]
1233:..\src/interruptions.c ****             else {
1234:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1235:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1236:..\src/interruptions.c ****         	}
1237:..\src/interruptions.c **** 
1238:..\src/interruptions.c ****         break;
 3655              		.loc 1 1238 0
 3656 047a 07E0     		b	.L258
 3657              	.L239:
1234:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 3658              		.loc 1 1234 0
 3659 047c FB6C     		ldr	r3, [r7, #76]
 3660 047e 642B     		cmp	r3, #100
 3661 0480 04DD     		ble	.L258
1235:..\src/interruptions.c ****         	}
 3662              		.loc 1 1235 0
 3663 0482 6423     		movs	r3, #100
 3664 0484 FB64     		str	r3, [r7, #76]
 3665              		.loc 1 1238 0
 3666 0486 01E0     		b	.L258
 3667              	.L257:
1217:..\src/interruptions.c ****         
 3668              		.loc 1 1217 0
 3669 0488 00BF     		nop
 3670 048a 00E0     		b	.L199
 3671              	.L258:
 3672              		.loc 1 1238 0
 3673 048c 00BF     		nop
 3674              	.L199:
1239:..\src/interruptions.c ****             
1240:..\src/interruptions.c ****     }
1241:..\src/interruptions.c **** 
1242:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1243:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 89


1244:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3675              		.loc 1 1244 0
 3676 048e FB6C     		ldr	r3, [r7, #76]
 3677 0490 642B     		cmp	r3, #100
 3678 0492 01DD     		ble	.L241
1245:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3679              		.loc 1 1245 0
 3680 0494 6423     		movs	r3, #100
 3681 0496 FB64     		str	r3, [r7, #76]
 3682              	.L241:
1246:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3683              		.loc 1 1246 0
 3684 0498 FB6C     		ldr	r3, [r7, #76]
 3685 049a 13F1640F 		cmn	r3, #100
 3686 049e 02DA     		bge	.L242
1247:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3687              		.loc 1 1247 0
 3688 04a0 6FF06303 		mvn	r3, #99
 3689 04a4 FB64     		str	r3, [r7, #76]
 3690              	.L242:
1248:..\src/interruptions.c **** 
1249:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3691              		.loc 1 1249 0
 3692 04a6 3B6C     		ldr	r3, [r7, #64]
 3693 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3694 04ac 012B     		cmp	r3, #1
 3695 04ae 0DD0     		beq	.L243
1250:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 3696              		.loc 1 1250 0
 3697 04b0 FB6C     		ldr	r3, [r7, #76]
 3698 04b2 9B02     		lsls	r3, r3, #10
 3699 04b4 2D4A     		ldr	r2, .L261+44
 3700 04b6 82FB0312 		smull	r1, r2, r2, r3
 3701 04ba 5211     		asrs	r2, r2, #5
 3702 04bc DB17     		asrs	r3, r3, #31
 3703 04be D31A     		subs	r3, r2, r3
 3704 04c0 2B4A     		ldr	r2, .L261+48
 3705 04c2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3706 04c4 02FB03F3 		mul	r3, r2, r3
 3707 04c8 9B12     		asrs	r3, r3, #10
 3708 04ca FB64     		str	r3, [r7, #76]
 3709              	.L243:
1251:..\src/interruptions.c ****  
1252:..\src/interruptions.c ****     //// RATE LIMITER ////
1253:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3710              		.loc 1 1253 0
 3711 04cc 294B     		ldr	r3, .L261+52
 3712 04ce 1B68     		ldr	r3, [r3]
 3713 04d0 FA6C     		ldr	r2, [r7, #76]
 3714 04d2 D31A     		subs	r3, r2, r3
 3715 04d4 3A6C     		ldr	r2, [r7, #64]
 3716 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3717 04da 9342     		cmp	r3, r2
 3718 04dc 08DD     		ble	.L244
1254:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3719              		.loc 1 1254 0
 3720 04de 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 90


 3721 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3722 04e4 1A46     		mov	r2, r3
 3723 04e6 234B     		ldr	r3, .L261+52
 3724 04e8 1B68     		ldr	r3, [r3]
 3725 04ea 1344     		add	r3, r3, r2
 3726 04ec FB64     		str	r3, [r7, #76]
 3727 04ee 10E0     		b	.L245
 3728              	.L244:
1255:..\src/interruptions.c ****     }
1256:..\src/interruptions.c ****     else {
1257:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3729              		.loc 1 1257 0
 3730 04f0 204B     		ldr	r3, .L261+52
 3731 04f2 1B68     		ldr	r3, [r3]
 3732 04f4 FA6C     		ldr	r2, [r7, #76]
 3733 04f6 D21A     		subs	r2, r2, r3
 3734 04f8 3B6C     		ldr	r3, [r7, #64]
 3735 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3736 04fe 5B42     		negs	r3, r3
 3737 0500 9A42     		cmp	r2, r3
 3738 0502 06DA     		bge	.L245
1258:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3739              		.loc 1 1258 0
 3740 0504 1B4B     		ldr	r3, .L261+52
 3741 0506 1B68     		ldr	r3, [r3]
 3742 0508 3A6C     		ldr	r2, [r7, #64]
 3743 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3744 050e 9B1A     		subs	r3, r3, r2
 3745 0510 FB64     		str	r3, [r7, #76]
 3746              	.L245:
1259:..\src/interruptions.c ****     }
1260:..\src/interruptions.c ****     
1261:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3747              		.loc 1 1261 0
 3748 0512 FB6C     		ldr	r3, [r7, #76]
 3749 0514 642B     		cmp	r3, #100
 3750 0516 01DD     		ble	.L246
1262:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3751              		.loc 1 1262 0
 3752 0518 6423     		movs	r3, #100
 3753 051a FB64     		str	r3, [r7, #76]
 3754              	.L246:
1263:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3755              		.loc 1 1263 0
 3756 051c FB6C     		ldr	r3, [r7, #76]
 3757 051e 13F1640F 		cmn	r3, #100
 3758 0522 02DA     		bge	.L247
1264:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3759              		.loc 1 1264 0
 3760 0524 6FF06303 		mvn	r3, #99
 3761 0528 FB64     		str	r3, [r7, #76]
 3762              	.L247:
1265:..\src/interruptions.c ****     
1266:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3763              		.loc 1 1266 0
 3764 052a 124A     		ldr	r2, .L261+52
 3765 052c FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 91


 3766 052e 1360     		str	r3, [r2]
1267:..\src/interruptions.c **** 	
1268:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3767              		.loc 1 1268 0
 3768 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3769 0534 FA6C     		ldr	r2, [r7, #76]
 3770 0536 002A     		cmp	r2, #0
 3771 0538 1EDB     		blt	.L248
 3772              		.loc 1 1268 0 is_stmt 0 discriminator 1
 3773 053a 0121     		movs	r1, #1
 3774 053c 1EE0     		b	.L249
 3775              	.L262:
 3776 053e 00BF     		.align	2
 3777              	.L261:
 3778 0540 90000000 		.word	pos_error_sum.10555
 3779 0544 18FCFFFF 		.word	-1000
 3780 0548 94000000 		.word	prev_pos_err.10557
 3781 054c 98000000 		.word	motor_dir.10560
 3782 0550 00000000 		.word	g_ref
 3783 0554 00000000 		.word	tension_valid
 3784 0558 00000000 		.word	g_meas
 3785 055c 9C000000 		.word	curr_error_sum.10556
 3786 0560 A0860100 		.word	100000
 3787 0564 6079FEFF 		.word	-100000
 3788 0568 A0000000 		.word	prev_curr_err.10558
 3789 056c 1F85EB51 		.word	1374389535
 3790 0570 00000000 		.word	dev_pwm_limit
 3791 0574 A4000000 		.word	prev_pwm.10559
 3792              	.L248:
 3793              		.loc 1 1268 0 discriminator 2
 3794 0578 4FF0FF31 		mov	r1, #-1
 3795              	.L249:
 3796              		.loc 1 1268 0 discriminator 4
 3797 057c 5A4A     		ldr	r2, .L263
 3798 057e D154     		strb	r1, [r2, r3]
1269:..\src/interruptions.c ****     
1270:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3799              		.loc 1 1270 0 is_stmt 1 discriminator 4
 3800 0580 3B6C     		ldr	r3, [r7, #64]
 3801 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3802 0586 012B     		cmp	r3, #1
 3803 0588 40F09680 		bne	.L250
1271:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1272:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3804              		.loc 1 1272 0
 3805 058c 3B6C     		ldr	r3, [r7, #64]
 3806 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3807 0592 012B     		cmp	r3, #1
 3808 0594 00F08D80 		beq	.L251
 3809              		.loc 1 1272 0 is_stmt 0 discriminator 1
 3810 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3811 059c 534A     		ldr	r2, .L263+4
 3812 059e 3421     		movs	r1, #52
 3813 05a0 01FB03F3 		mul	r3, r1, r3
 3814 05a4 1344     		add	r3, r3, r2
 3815 05a6 1A68     		ldr	r2, [r3]
 3816 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 92


 3817 05ac 5049     		ldr	r1, .L263+8
 3818 05ae 3420     		movs	r0, #52
 3819 05b0 00FB03F3 		mul	r3, r0, r3
 3820 05b4 0B44     		add	r3, r3, r1
 3821 05b6 1B68     		ldr	r3, [r3]
 3822 05b8 D31A     		subs	r3, r2, r3
 3823 05ba 312B     		cmp	r3, #49
 3824 05bc 79DC     		bgt	.L251
1273:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3825              		.loc 1 1273 0 is_stmt 1 discriminator 2
 3826 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3827 05c2 4A4A     		ldr	r2, .L263+4
 3828 05c4 3421     		movs	r1, #52
 3829 05c6 01FB03F3 		mul	r3, r1, r3
 3830 05ca 1344     		add	r3, r3, r2
 3831 05cc 1A68     		ldr	r2, [r3]
 3832 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3833 05d2 4749     		ldr	r1, .L263+8
 3834 05d4 3420     		movs	r0, #52
 3835 05d6 00FB03F3 		mul	r3, r0, r3
 3836 05da 0B44     		add	r3, r3, r1
 3837 05dc 1B68     		ldr	r3, [r3]
 3838 05de D31A     		subs	r3, r2, r3
1272:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3839              		.loc 1 1272 0 discriminator 2
 3840 05e0 13F1310F 		cmn	r3, #49
 3841 05e4 65DB     		blt	.L251
1274:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3842              		.loc 1 1274 0
 3843 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3844 05ea 424A     		ldr	r2, .L263+12
 3845 05ec 1B01     		lsls	r3, r3, #4
 3846 05ee 1344     		add	r3, r3, r2
 3847 05f0 1A68     		ldr	r2, [r3]
 3848 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3849 05f6 4049     		ldr	r1, .L263+16
 3850 05f8 1B01     		lsls	r3, r3, #4
 3851 05fa 0B44     		add	r3, r3, r1
 3852 05fc 1B68     		ldr	r3, [r3]
 3853 05fe D31A     		subs	r3, r2, r3
1273:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3854              		.loc 1 1273 0
 3855 0600 632B     		cmp	r3, #99
 3856 0602 56DC     		bgt	.L251
 3857              		.loc 1 1274 0
 3858 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3859 0608 3A4A     		ldr	r2, .L263+12
 3860 060a 1B01     		lsls	r3, r3, #4
 3861 060c 1344     		add	r3, r3, r2
 3862 060e 1A68     		ldr	r2, [r3]
 3863 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3864 0614 3849     		ldr	r1, .L263+16
 3865 0616 1B01     		lsls	r3, r3, #4
 3866 0618 0B44     		add	r3, r3, r1
 3867 061a 1B68     		ldr	r3, [r3]
 3868 061c D31A     		subs	r3, r2, r3
 3869 061e 13F1630F 		cmn	r3, #99
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 93


 3870 0622 46DB     		blt	.L251
1275:..\src/interruptions.c ****             position_counter++;
 3871              		.loc 1 1275 0
 3872 0624 354B     		ldr	r3, .L263+20
 3873 0626 1B68     		ldr	r3, [r3]
 3874 0628 0133     		adds	r3, r3, #1
 3875 062a 344A     		ldr	r2, .L263+20
 3876 062c 1360     		str	r3, [r2]
1276:..\src/interruptions.c ****             
1277:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3877              		.loc 1 1277 0
 3878 062e 334B     		ldr	r3, .L263+20
 3879 0630 1B68     		ldr	r3, [r3]
 3880 0632 F92B     		cmp	r3, #249
 3881 0634 40D9     		bls	.L250
1278:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3882              		.loc 1 1278 0
 3883 0636 3B6C     		ldr	r3, [r7, #64]
 3884 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3885 063c 002B     		cmp	r3, #0
 3886 063e 11D1     		bne	.L253
 3887              		.loc 1 1278 0 is_stmt 0 discriminator 1
 3888 0640 2F4B     		ldr	r3, .L263+24
 3889 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3890 0644 002B     		cmp	r3, #0
 3891 0646 0DD1     		bne	.L253
1279:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3892              		.loc 1 1279 0 is_stmt 1
 3893 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3894 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3895 0650 2749     		ldr	r1, .L263+8
 3896 0652 3420     		movs	r0, #52
 3897 0654 00FB02F2 		mul	r2, r0, r2
 3898 0658 0A44     		add	r2, r2, r1
 3899 065a 1268     		ldr	r2, [r2]
 3900 065c 2949     		ldr	r1, .L263+28
 3901 065e 1B01     		lsls	r3, r3, #4
 3902 0660 0B44     		add	r3, r3, r1
 3903 0662 1A60     		str	r2, [r3]
 3904              	.L253:
1280:..\src/interruptions.c ****                 }
1281:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3905              		.loc 1 1281 0
 3906 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3907 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3908 066c 2049     		ldr	r1, .L263+8
 3909 066e 3420     		movs	r0, #52
 3910 0670 00FB02F2 		mul	r2, r0, r2
 3911 0674 0A44     		add	r2, r2, r1
 3912 0676 1268     		ldr	r2, [r2]
 3913 0678 1F49     		ldr	r1, .L263+16
 3914 067a 1B01     		lsls	r3, r3, #4
 3915 067c 0B44     		add	r3, r3, r1
 3916 067e 1A60     		str	r2, [r3]
1282:..\src/interruptions.c ****                 
1283:..\src/interruptions.c ****                 if (position_counter == 250){
 3917              		.loc 1 1283 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 94


 3918 0680 1E4B     		ldr	r3, .L263+20
 3919 0682 1B68     		ldr	r3, [r3]
 3920 0684 FA2B     		cmp	r3, #250
 3921 0686 11D1     		bne	.L254
1284:..\src/interruptions.c ****                     // To do only once
1285:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3922              		.loc 1 1285 0
 3923 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3924 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3925 0690 1749     		ldr	r1, .L263+8
 3926 0692 3420     		movs	r0, #52
 3927 0694 00FB02F2 		mul	r2, r0, r2
 3928 0698 0A44     		add	r2, r2, r1
 3929 069a 0C32     		adds	r2, r2, #12
 3930 069c 1268     		ldr	r2, [r2]
 3931 069e 1449     		ldr	r1, .L263+8
 3932 06a0 3420     		movs	r0, #52
 3933 06a2 00FB03F3 		mul	r3, r0, r3
 3934 06a6 0B44     		add	r3, r3, r1
 3935 06a8 1433     		adds	r3, r3, #20
 3936 06aa 1A60     		str	r2, [r3]
 3937              	.L254:
1286:..\src/interruptions.c ****                 }
1287:..\src/interruptions.c ****                 pwm_input = 0;            
 3938              		.loc 1 1287 0
 3939 06ac 0023     		movs	r3, #0
 3940 06ae FB64     		str	r3, [r7, #76]
1277:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3941              		.loc 1 1277 0
 3942 06b0 02E0     		b	.L250
 3943              	.L251:
1288:..\src/interruptions.c ****             }
1289:..\src/interruptions.c ****         }
1290:..\src/interruptions.c ****         else {
1291:..\src/interruptions.c ****             position_counter = 0;
 3944              		.loc 1 1291 0
 3945 06b2 124B     		ldr	r3, .L263+20
 3946 06b4 0022     		movs	r2, #0
 3947 06b6 1A60     		str	r2, [r3]
 3948              	.L250:
1292:..\src/interruptions.c ****         }
1293:..\src/interruptions.c ****     }
1294:..\src/interruptions.c ****     
1295:..\src/interruptions.c ****     if (motor_dir)
 3949              		.loc 1 1295 0
 3950 06b8 134B     		ldr	r3, .L263+32
 3951 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3952 06bc 002B     		cmp	r3, #0
 3953 06be 03D0     		beq	.L255
1296:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 3954              		.loc 1 1296 0
 3955 06c0 0120     		movs	r0, #1
 3956 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3957 06c6 02E0     		b	.L256
 3958              	.L255:
1297:..\src/interruptions.c ****     else
1298:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 95


 3959              		.loc 1 1298 0
 3960 06c8 0020     		movs	r0, #0
 3961 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3962              	.L256:
1299:..\src/interruptions.c **** 
1300:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 3963              		.loc 1 1300 0
 3964 06ce FB6C     		ldr	r3, [r7, #76]
 3965 06d0 002B     		cmp	r3, #0
 3966 06d2 B8BF     		it	lt
 3967 06d4 5B42     		rsblt	r3, r3, #0
 3968 06d6 DBB2     		uxtb	r3, r3
 3969 06d8 1846     		mov	r0, r3
 3970 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1301:..\src/interruptions.c **** }
 3971              		.loc 1 1301 0
 3972 06de 00BF     		nop
 3973 06e0 5037     		adds	r7, r7, #80
 3974              		.cfi_def_cfa_offset 8
 3975 06e2 BD46     		mov	sp, r7
 3976              		.cfi_def_cfa_register 13
 3977              		@ sp needed
 3978 06e4 80BD     		pop	{r7, pc}
 3979              	.L264:
 3980 06e6 00BF     		.align	2
 3981              	.L263:
 3982 06e8 00000000 		.word	pwm_sign
 3983 06ec 00000000 		.word	g_measOld
 3984 06f0 00000000 		.word	g_meas
 3985 06f4 00000000 		.word	g_refOld
 3986 06f8 00000000 		.word	g_ref
 3987 06fc A8000000 		.word	position_counter.10561
 3988 0700 00000000 		.word	change_ext_ref_flag
 3989 0704 00000000 		.word	g_refNew
 3990 0708 98000000 		.word	motor_dir.10560
 3991              		.cfi_endproc
 3992              	.LFE71:
 3993              		.size	motor_control_SH, .-motor_control_SH
 3994              		.section	.text.motor_control_generic,"ax",%progbits
 3995              		.align	2
 3996              		.global	motor_control_generic
 3997              		.thumb
 3998              		.thumb_func
 3999              		.type	motor_control_generic, %function
 4000              	motor_control_generic:
 4001              	.LFB72:
1302:..\src/interruptions.c **** 
1303:..\src/interruptions.c **** //==============================================================================
1304:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1305:..\src/interruptions.c **** //==============================================================================
1306:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4002              		.loc 1 1306 0
 4003              		.cfi_startproc
 4004              		@ args = 0, pretend = 0, frame = 80
 4005              		@ frame_needed = 1, uses_anonymous_args = 0
 4006 0000 90B5     		push	{r4, r7, lr}
 4007              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 96


 4008              		.cfi_offset 4, -12
 4009              		.cfi_offset 7, -8
 4010              		.cfi_offset 14, -4
 4011 0002 95B0     		sub	sp, sp, #84
 4012              		.cfi_def_cfa_offset 96
 4013 0004 00AF     		add	r7, sp, #0
 4014              		.cfi_def_cfa_register 7
 4015 0006 0346     		mov	r3, r0
 4016 0008 FB71     		strb	r3, [r7, #7]
1307:..\src/interruptions.c ****     
1308:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4017              		.loc 1 1308 0
 4018 000a 0023     		movs	r3, #0
 4019 000c FB64     		str	r3, [r7, #76]
1309:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1310:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1311:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1312:..\src/interruptions.c **** 
1313:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4020              		.loc 1 1313 0
 4021 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4022 0010 1346     		mov	r3, r2
 4023 0012 DB00     		lsls	r3, r3, #3
 4024 0014 9B1A     		subs	r3, r3, r2
 4025 0016 1B01     		lsls	r3, r3, #4
 4026 0018 B033     		adds	r3, r3, #176
 4027 001a 9C4A     		ldr	r2, .L337
 4028 001c 1344     		add	r3, r3, r2
 4029 001e 7B64     		str	r3, [r7, #68]
1314:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 4030              		.loc 1 1314 0
 4031 0020 7B6C     		ldr	r3, [r7, #68]
 4032 0022 93F86030 		ldrb	r3, [r3, #96]
 4033 0026 87F84330 		strb	r3, [r7, #67]
1315:..\src/interruptions.c ****     
1316:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4034              		.loc 1 1316 0
 4035 002a 7B6C     		ldr	r3, [r7, #68]
 4036 002c 1B68     		ldr	r3, [r3]
 4037 002e FB63     		str	r3, [r7, #60]
1317:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4038              		.loc 1 1317 0
 4039 0030 7B6C     		ldr	r3, [r7, #68]
 4040 0032 5B68     		ldr	r3, [r3, #4]
 4041 0034 BB63     		str	r3, [r7, #56]
1318:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4042              		.loc 1 1318 0
 4043 0036 7B6C     		ldr	r3, [r7, #68]
 4044 0038 9B68     		ldr	r3, [r3, #8]
 4045 003a 7B63     		str	r3, [r7, #52]
1319:..\src/interruptions.c **** 
1320:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4046              		.loc 1 1320 0
 4047 003c 7B6C     		ldr	r3, [r7, #68]
 4048 003e DB68     		ldr	r3, [r3, #12]
 4049 0040 3B63     		str	r3, [r7, #48]
1321:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 97


 4050              		.loc 1 1321 0
 4051 0042 7B6C     		ldr	r3, [r7, #68]
 4052 0044 1B69     		ldr	r3, [r3, #16]
 4053 0046 FB62     		str	r3, [r7, #44]
1322:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4054              		.loc 1 1322 0
 4055 0048 7B6C     		ldr	r3, [r7, #68]
 4056 004a 5B69     		ldr	r3, [r3, #20]
 4057 004c BB62     		str	r3, [r7, #40]
1323:..\src/interruptions.c **** 
1324:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4058              		.loc 1 1324 0
 4059 004e 7B6C     		ldr	r3, [r7, #68]
 4060 0050 9B69     		ldr	r3, [r3, #24]
 4061 0052 7B62     		str	r3, [r7, #36]
1325:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4062              		.loc 1 1325 0
 4063 0054 7B6C     		ldr	r3, [r7, #68]
 4064 0056 DB69     		ldr	r3, [r3, #28]
 4065 0058 3B62     		str	r3, [r7, #32]
1326:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4066              		.loc 1 1326 0
 4067 005a 7B6C     		ldr	r3, [r7, #68]
 4068 005c 1B6A     		ldr	r3, [r3, #32]
 4069 005e FB61     		str	r3, [r7, #28]
1327:..\src/interruptions.c ****     
1328:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4070              		.loc 1 1328 0
 4071 0060 7B6C     		ldr	r3, [r7, #68]
 4072 0062 5B6A     		ldr	r3, [r3, #36]
 4073 0064 BB61     		str	r3, [r7, #24]
1329:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4074              		.loc 1 1329 0
 4075 0066 7B6C     		ldr	r3, [r7, #68]
 4076 0068 9B6A     		ldr	r3, [r3, #40]
 4077 006a 7B61     		str	r3, [r7, #20]
1330:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4078              		.loc 1 1330 0
 4079 006c 7B6C     		ldr	r3, [r7, #68]
 4080 006e DB6A     		ldr	r3, [r3, #44]
 4081 0070 3B61     		str	r3, [r7, #16]
1331:..\src/interruptions.c **** 
1332:..\src/interruptions.c ****     // Static Variables
1333:..\src/interruptions.c **** 
1334:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1335:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1336:..\src/interruptions.c ****     
1337:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1338:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1339:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1340:..\src/interruptions.c **** 
1341:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1342:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1343:..\src/interruptions.c **** 
1344:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1345:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4082              		.loc 1 1345 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 98


 4083 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4084 0074 1B01     		lsls	r3, r3, #4
 4085 0076 864A     		ldr	r2, .L337+4
 4086 0078 9918     		adds	r1, r3, r2
 4087 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4088 007c 1B01     		lsls	r3, r3, #4
 4089 007e 854A     		ldr	r2, .L337+8
 4090 0080 1A44     		add	r2, r2, r3
 4091 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4092 0084 1846     		mov	r0, r3
 4093 0086 FFF7FEFF 		bl	compute_reference
1346:..\src/interruptions.c ****     
1347:..\src/interruptions.c ****    
1348:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4094              		.loc 1 1348 0
 4095 008a 7B6C     		ldr	r3, [r7, #68]
 4096 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4097 0090 032B     		cmp	r3, #3
 4098 0092 00F25482 		bhi	.L266
 4099 0096 01A2     		adr	r2, .L268
 4100 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4101              		.p2align 2
 4102              	.L268:
 4103 009c C1020000 		.word	.L267+1
 4104 00a0 CB040000 		.word	.L269+1
 4105 00a4 99030000 		.word	.L270+1
 4106 00a8 AD000000 		.word	.L271+1
 4107              		.p2align 1
 4108              	.L271:
1349:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1350:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1351:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4109              		.loc 1 1351 0
 4110 00ac 784B     		ldr	r3, .L337+4
 4111 00ae 1A68     		ldr	r2, [r3]
 4112 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4113 00b4 7849     		ldr	r1, .L337+12
 4114 00b6 3420     		movs	r0, #52
 4115 00b8 00FB03F3 		mul	r3, r0, r3
 4116 00bc 0B44     		add	r3, r3, r1
 4117 00be 1B68     		ldr	r3, [r3]
 4118 00c0 D31A     		subs	r3, r2, r3
 4119 00c2 FB60     		str	r3, [r7, #12]
1352:..\src/interruptions.c **** 
1353:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4120              		.loc 1 1353 0
 4121 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4122 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4123 00c8 7449     		ldr	r1, .L337+16
 4124 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4125 00ce FA68     		ldr	r2, [r7, #12]
 4126 00d0 0A44     		add	r2, r2, r1
 4127 00d2 7249     		ldr	r1, .L337+16
 4128 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1354:..\src/interruptions.c **** 
1355:..\src/interruptions.c ****             // error_sum saturation
1356:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 99


 4129              		.loc 1 1356 0
 4130 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4131 00da 704A     		ldr	r2, .L337+16
 4132 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4133 00e0 6F4A     		ldr	r2, .L337+20
 4134 00e2 9342     		cmp	r3, r2
 4135 00e4 05DD     		ble	.L272
1357:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4136              		.loc 1 1357 0
 4137 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4138 00e8 6C4A     		ldr	r2, .L337+16
 4139 00ea 6D49     		ldr	r1, .L337+20
 4140 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4141 00f0 0BE0     		b	.L273
 4142              	.L272:
1358:..\src/interruptions.c ****             else {
1359:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 4143              		.loc 1 1359 0
 4144 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4145 00f4 694A     		ldr	r2, .L337+16
 4146 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4147 00fa 6A4A     		ldr	r2, .L337+24
 4148 00fc 9342     		cmp	r3, r2
 4149 00fe 04DA     		bge	.L273
1360:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4150              		.loc 1 1360 0
 4151 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4152 0102 664A     		ldr	r2, .L337+16
 4153 0104 6749     		ldr	r1, .L337+24
 4154 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 4155              	.L273:
1361:..\src/interruptions.c ****             }
1362:..\src/interruptions.c ****             
1363:..\src/interruptions.c ****             // ------ position PID control ------
1364:..\src/interruptions.c **** 
1365:..\src/interruptions.c ****             i_ref = 0;
 4156              		.loc 1 1365 0
 4157 010a 0023     		movs	r3, #0
 4158 010c BB64     		str	r3, [r7, #72]
1366:..\src/interruptions.c ****             
1367:..\src/interruptions.c ****             // Proportional
1368:..\src/interruptions.c ****             if (k_p_dl != 0)
 4159              		.loc 1 1368 0
 4160 010e 7B6A     		ldr	r3, [r7, #36]
 4161 0110 002B     		cmp	r3, #0
 4162 0112 07D0     		beq	.L274
1369:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4163              		.loc 1 1369 0
 4164 0114 7B6A     		ldr	r3, [r7, #36]
 4165 0116 FA68     		ldr	r2, [r7, #12]
 4166 0118 02FB03F3 		mul	r3, r2, r3
 4167 011c 1B14     		asrs	r3, r3, #16
 4168 011e BA6C     		ldr	r2, [r7, #72]
 4169 0120 1344     		add	r3, r3, r2
 4170 0122 BB64     		str	r3, [r7, #72]
 4171              	.L274:
1370:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 100


1371:..\src/interruptions.c ****             // Integral
1372:..\src/interruptions.c ****             if (k_i_dl != 0)
 4172              		.loc 1 1372 0
 4173 0124 3B6A     		ldr	r3, [r7, #32]
 4174 0126 002B     		cmp	r3, #0
 4175 0128 0AD0     		beq	.L275
1373:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4176              		.loc 1 1373 0
 4177 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4178 012c 5B4A     		ldr	r2, .L337+16
 4179 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4180 0132 3A6A     		ldr	r2, [r7, #32]
 4181 0134 02FB03F3 		mul	r3, r2, r3
 4182 0138 1B14     		asrs	r3, r3, #16
 4183 013a BA6C     		ldr	r2, [r7, #72]
 4184 013c 1344     		add	r3, r3, r2
 4185 013e BB64     		str	r3, [r7, #72]
 4186              	.L275:
1374:..\src/interruptions.c **** 
1375:..\src/interruptions.c ****             // Derivative
1376:..\src/interruptions.c ****             if (k_d_dl != 0)
 4187              		.loc 1 1376 0
 4188 0140 FB69     		ldr	r3, [r7, #28]
 4189 0142 002B     		cmp	r3, #0
 4190 0144 0CD0     		beq	.L276
1377:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4191              		.loc 1 1377 0
 4192 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4193 0148 574A     		ldr	r2, .L337+28
 4194 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4195 014e FA68     		ldr	r2, [r7, #12]
 4196 0150 D31A     		subs	r3, r2, r3
 4197 0152 FA69     		ldr	r2, [r7, #28]
 4198 0154 02FB03F3 		mul	r3, r2, r3
 4199 0158 1B14     		asrs	r3, r3, #16
 4200 015a BA6C     		ldr	r2, [r7, #72]
 4201 015c 1344     		add	r3, r3, r2
 4202 015e BB64     		str	r3, [r7, #72]
 4203              	.L276:
1378:..\src/interruptions.c ****                         
1379:..\src/interruptions.c ****             // Update previous position
1380:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4204              		.loc 1 1380 0
 4205 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4206 0162 5149     		ldr	r1, .L337+28
 4207 0164 FA68     		ldr	r2, [r7, #12]
 4208 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1381:..\src/interruptions.c **** 
1382:..\src/interruptions.c ****             // motor direction depends on i_ref
1383:..\src/interruptions.c ****             if (i_ref >= 0)
 4209              		.loc 1 1383 0
 4210 016a BB6C     		ldr	r3, [r7, #72]
 4211 016c 002B     		cmp	r3, #0
 4212 016e 04DB     		blt	.L277
1384:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4213              		.loc 1 1384 0
 4214 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 101


 4215 0172 4E4A     		ldr	r2, .L337+32
 4216 0174 0121     		movs	r1, #1
 4217 0176 D154     		strb	r1, [r2, r3]
 4218 0178 03E0     		b	.L278
 4219              	.L277:
1385:..\src/interruptions.c ****             else
1386:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4220              		.loc 1 1386 0
 4221 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4222 017c 4B4A     		ldr	r2, .L337+32
 4223 017e 0021     		movs	r1, #0
 4224 0180 D154     		strb	r1, [r2, r3]
 4225              	.L278:
1387:..\src/interruptions.c **** 
1388:..\src/interruptions.c ****             // saturate max current
1389:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4226              		.loc 1 1389 0
 4227 0182 7B6C     		ldr	r3, [r7, #68]
 4228 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4229 0188 1A46     		mov	r2, r3
 4230 018a BB6C     		ldr	r3, [r7, #72]
 4231 018c 9A42     		cmp	r2, r3
 4232 018e 04DA     		bge	.L279
1390:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4233              		.loc 1 1390 0
 4234 0190 7B6C     		ldr	r3, [r7, #68]
 4235 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4236 0196 BB64     		str	r3, [r7, #72]
 4237 0198 0BE0     		b	.L280
 4238              	.L279:
1391:..\src/interruptions.c ****             else {
1392:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4239              		.loc 1 1392 0
 4240 019a 7B6C     		ldr	r3, [r7, #68]
 4241 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4242 01a0 5A42     		negs	r2, r3
 4243 01a2 BB6C     		ldr	r3, [r7, #72]
 4244 01a4 9A42     		cmp	r2, r3
 4245 01a6 04DD     		ble	.L280
1393:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 4246              		.loc 1 1393 0
 4247 01a8 7B6C     		ldr	r3, [r7, #68]
 4248 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4249 01ae 5B42     		negs	r3, r3
 4250 01b0 BB64     		str	r3, [r7, #72]
 4251              	.L280:
1394:..\src/interruptions.c ****         	}
1395:..\src/interruptions.c **** 
1396:..\src/interruptions.c ****             // current error and curr error sum
1397:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4252              		.loc 1 1397 0
 4253 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4254 01b6 384A     		ldr	r2, .L337+12
 4255 01b8 3421     		movs	r1, #52
 4256 01ba 01FB03F3 		mul	r3, r1, r3
 4257 01be 1344     		add	r3, r3, r2
 4258 01c0 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 102


 4259 01c2 1B68     		ldr	r3, [r3]
 4260 01c4 BA6C     		ldr	r2, [r7, #72]
 4261 01c6 D31A     		subs	r3, r2, r3
 4262 01c8 BB60     		str	r3, [r7, #8]
1398:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4263              		.loc 1 1398 0
 4264 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4265 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4266 01ce 3849     		ldr	r1, .L337+36
 4267 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4268 01d4 BA68     		ldr	r2, [r7, #8]
 4269 01d6 0A44     		add	r2, r2, r1
 4270 01d8 3549     		ldr	r1, .L337+36
 4271 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1399:..\src/interruptions.c ****             
1400:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4272              		.loc 1 1400 0
 4273 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4274 01e0 334A     		ldr	r2, .L337+36
 4275 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4276 01e6 334A     		ldr	r2, .L337+40
 4277 01e8 9342     		cmp	r3, r2
 4278 01ea 05DD     		ble	.L281
1401:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4279              		.loc 1 1401 0
 4280 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4281 01ee 304A     		ldr	r2, .L337+36
 4282 01f0 3049     		ldr	r1, .L337+40
 4283 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4284 01f6 0BE0     		b	.L282
 4285              	.L281:
1402:..\src/interruptions.c ****             else {
1403:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4286              		.loc 1 1403 0
 4287 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4288 01fa 2D4A     		ldr	r2, .L337+36
 4289 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4290 0200 2D4A     		ldr	r2, .L337+44
 4291 0202 9342     		cmp	r3, r2
 4292 0204 04DA     		bge	.L282
1404:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4293              		.loc 1 1404 0
 4294 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4295 0208 294A     		ldr	r2, .L337+36
 4296 020a 2B49     		ldr	r1, .L337+44
 4297 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4298              	.L282:
1405:..\src/interruptions.c ****             }
1406:..\src/interruptions.c **** 
1407:..\src/interruptions.c ****             // ----- current PID control -----
1408:..\src/interruptions.c **** 
1409:..\src/interruptions.c ****             pwm_input = 0;
 4299              		.loc 1 1409 0
 4300 0210 0023     		movs	r3, #0
 4301 0212 FB64     		str	r3, [r7, #76]
1410:..\src/interruptions.c **** 
1411:..\src/interruptions.c ****             // Proportional
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 103


1412:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 4302              		.loc 1 1412 0
 4303 0214 BB69     		ldr	r3, [r7, #24]
 4304 0216 002B     		cmp	r3, #0
 4305 0218 07D0     		beq	.L283
1413:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 4306              		.loc 1 1413 0
 4307 021a BB69     		ldr	r3, [r7, #24]
 4308 021c BA68     		ldr	r2, [r7, #8]
 4309 021e 02FB03F3 		mul	r3, r2, r3
 4310 0222 1B14     		asrs	r3, r3, #16
 4311 0224 FA6C     		ldr	r2, [r7, #76]
 4312 0226 1344     		add	r3, r3, r2
 4313 0228 FB64     		str	r3, [r7, #76]
 4314              	.L283:
1414:..\src/interruptions.c **** 
1415:..\src/interruptions.c ****             // Integral
1416:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4315              		.loc 1 1416 0
 4316 022a 7B69     		ldr	r3, [r7, #20]
 4317 022c 002B     		cmp	r3, #0
 4318 022e 0AD0     		beq	.L284
1417:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4319              		.loc 1 1417 0
 4320 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4321 0232 1F4A     		ldr	r2, .L337+36
 4322 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4323 0238 7A69     		ldr	r2, [r7, #20]
 4324 023a 02FB03F3 		mul	r3, r2, r3
 4325 023e 1B14     		asrs	r3, r3, #16
 4326 0240 FA6C     		ldr	r2, [r7, #76]
 4327 0242 1344     		add	r3, r3, r2
 4328 0244 FB64     		str	r3, [r7, #76]
 4329              	.L284:
1418:..\src/interruptions.c **** 
1419:..\src/interruptions.c ****             // Derivative
1420:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4330              		.loc 1 1420 0
 4331 0246 3B69     		ldr	r3, [r7, #16]
 4332 0248 002B     		cmp	r3, #0
 4333 024a 0CD0     		beq	.L285
1421:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4334              		.loc 1 1421 0
 4335 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4336 024e 1B4A     		ldr	r2, .L337+48
 4337 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4338 0254 BA68     		ldr	r2, [r7, #8]
 4339 0256 D31A     		subs	r3, r2, r3
 4340 0258 3A69     		ldr	r2, [r7, #16]
 4341 025a 02FB03F3 		mul	r3, r2, r3
 4342 025e 1B14     		asrs	r3, r3, #16
 4343 0260 FA6C     		ldr	r2, [r7, #76]
 4344 0262 1344     		add	r3, r3, r2
 4345 0264 FB64     		str	r3, [r7, #76]
 4346              	.L285:
1422:..\src/interruptions.c **** 
1423:..\src/interruptions.c ****             // pwm_input saturation
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 104


1424:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4347              		.loc 1 1424 0
 4348 0266 FB6C     		ldr	r3, [r7, #76]
 4349 0268 13F1640F 		cmn	r3, #100
 4350 026c 03DA     		bge	.L286
1425:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4351              		.loc 1 1425 0
 4352 026e 6FF06303 		mvn	r3, #99
 4353 0272 FB64     		str	r3, [r7, #76]
 4354 0274 04E0     		b	.L287
 4355              	.L286:
1426:..\src/interruptions.c ****             else {
1427:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 4356              		.loc 1 1427 0
 4357 0276 FB6C     		ldr	r3, [r7, #76]
 4358 0278 642B     		cmp	r3, #100
 4359 027a 01DD     		ble	.L287
1428:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 4360              		.loc 1 1428 0
 4361 027c 6423     		movs	r3, #100
 4362 027e FB64     		str	r3, [r7, #76]
 4363              	.L287:
1429:..\src/interruptions.c ****             }
1430:..\src/interruptions.c **** 
1431:..\src/interruptions.c ****             // Update previous current
1432:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4364              		.loc 1 1432 0
 4365 0280 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4366 0282 0E49     		ldr	r1, .L337+48
 4367 0284 BA68     		ldr	r2, [r7, #8]
 4368 0286 41F82320 		str	r2, [r1, r3, lsl #2]
1433:..\src/interruptions.c **** 
1434:..\src/interruptions.c ****         break;
 4369              		.loc 1 1434 0
 4370 028a 58E1     		b	.L266
 4371              	.L338:
 4372              		.align	2
 4373              	.L337:
 4374 028c 00000000 		.word	c_mem
 4375 0290 00000000 		.word	g_ref
 4376 0294 00000000 		.word	g_refOld
 4377 0298 00000000 		.word	g_meas
 4378 029c AC000000 		.word	pos_error_sum.10588
 4379 02a0 80F0FA02 		.word	50000000
 4380 02a4 800F05FD 		.word	-50000000
 4381 02a8 B4000000 		.word	prev_pos_err.10590
 4382 02ac BC000000 		.word	motor_dir.10593
 4383 02b0 C0000000 		.word	curr_error_sum.10589
 4384 02b4 A0860100 		.word	100000
 4385 02b8 6079FEFF 		.word	-100000
 4386 02bc C8000000 		.word	prev_curr_err.10591
 4387              	.L267:
1435:..\src/interruptions.c **** 
1436:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1437:..\src/interruptions.c ****         case CONTROL_ANGLE:
1438:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4388              		.loc 1 1438 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 105


 4389 02c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4390 02c2 934A     		ldr	r2, .L339
 4391 02c4 1B01     		lsls	r3, r3, #4
 4392 02c6 1344     		add	r3, r3, r2
 4393 02c8 1A68     		ldr	r2, [r3]
 4394 02ca 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4395 02ce 9149     		ldr	r1, .L339+4
 4396 02d0 3420     		movs	r0, #52
 4397 02d2 00FB03F3 		mul	r3, r0, r3
 4398 02d6 0B44     		add	r3, r3, r1
 4399 02d8 1B68     		ldr	r3, [r3]
 4400 02da D31A     		subs	r3, r2, r3
 4401 02dc FB60     		str	r3, [r7, #12]
1439:..\src/interruptions.c **** 
1440:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4402              		.loc 1 1440 0
 4403 02de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4404 02e0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4405 02e2 8D49     		ldr	r1, .L339+8
 4406 02e4 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4407 02e8 FA68     		ldr	r2, [r7, #12]
 4408 02ea 0A44     		add	r2, r2, r1
 4409 02ec 8A49     		ldr	r1, .L339+8
 4410 02ee 41F82320 		str	r2, [r1, r3, lsl #2]
1441:..\src/interruptions.c **** 
1442:..\src/interruptions.c ****             // anti-windup (for integral control)
1443:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4411              		.loc 1 1443 0
 4412 02f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4413 02f4 884A     		ldr	r2, .L339+8
 4414 02f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4415 02fa B3F57A7F 		cmp	r3, #1000
 4416 02fe 06DD     		ble	.L288
1444:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4417              		.loc 1 1444 0
 4418 0300 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4419 0302 854A     		ldr	r2, .L339+8
 4420 0304 4FF47A71 		mov	r1, #1000
 4421 0308 42F82310 		str	r1, [r2, r3, lsl #2]
 4422 030c 0BE0     		b	.L289
 4423              	.L288:
1445:..\src/interruptions.c ****             else {
1446:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4424              		.loc 1 1446 0
 4425 030e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4426 0310 814A     		ldr	r2, .L339+8
 4427 0312 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4428 0316 13F57A7F 		cmn	r3, #1000
 4429 031a 04DA     		bge	.L289
1447:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4430              		.loc 1 1447 0
 4431 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4432 031e 7E4A     		ldr	r2, .L339+8
 4433 0320 7E49     		ldr	r1, .L339+12
 4434 0322 42F82310 		str	r1, [r2, r3, lsl #2]
 4435              	.L289:
1448:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 106


1449:..\src/interruptions.c **** 
1450:..\src/interruptions.c ****             // Proportional
1451:..\src/interruptions.c ****             if (k_p != 0) 
 4436              		.loc 1 1451 0
 4437 0326 FB6B     		ldr	r3, [r7, #60]
 4438 0328 002B     		cmp	r3, #0
 4439 032a 05D0     		beq	.L290
1452:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4440              		.loc 1 1452 0
 4441 032c FB6B     		ldr	r3, [r7, #60]
 4442 032e FA68     		ldr	r2, [r7, #12]
 4443 0330 02FB03F3 		mul	r3, r2, r3
 4444 0334 1B14     		asrs	r3, r3, #16
 4445 0336 FB64     		str	r3, [r7, #76]
 4446              	.L290:
1453:..\src/interruptions.c ****             
1454:..\src/interruptions.c **** 
1455:..\src/interruptions.c ****             // Integral
1456:..\src/interruptions.c ****             if (k_i != 0) 
 4447              		.loc 1 1456 0
 4448 0338 BB6B     		ldr	r3, [r7, #56]
 4449 033a 002B     		cmp	r3, #0
 4450 033c 0AD0     		beq	.L291
1457:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4451              		.loc 1 1457 0
 4452 033e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4453 0340 754A     		ldr	r2, .L339+8
 4454 0342 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4455 0346 BA6B     		ldr	r2, [r7, #56]
 4456 0348 02FB03F3 		mul	r3, r2, r3
 4457 034c 1B14     		asrs	r3, r3, #16
 4458 034e FA6C     		ldr	r2, [r7, #76]
 4459 0350 1344     		add	r3, r3, r2
 4460 0352 FB64     		str	r3, [r7, #76]
 4461              	.L291:
1458:..\src/interruptions.c ****             
1459:..\src/interruptions.c **** 
1460:..\src/interruptions.c ****             // Derivative
1461:..\src/interruptions.c ****             if (k_d != 0) 
 4462              		.loc 1 1461 0
 4463 0354 7B6B     		ldr	r3, [r7, #52]
 4464 0356 002B     		cmp	r3, #0
 4465 0358 0CD0     		beq	.L292
1462:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4466              		.loc 1 1462 0
 4467 035a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4468 035c 704A     		ldr	r2, .L339+16
 4469 035e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4470 0362 FA68     		ldr	r2, [r7, #12]
 4471 0364 D31A     		subs	r3, r2, r3
 4472 0366 7A6B     		ldr	r2, [r7, #52]
 4473 0368 02FB03F3 		mul	r3, r2, r3
 4474 036c 1B14     		asrs	r3, r3, #16
 4475 036e FA6C     		ldr	r2, [r7, #76]
 4476 0370 1344     		add	r3, r3, r2
 4477 0372 FB64     		str	r3, [r7, #76]
 4478              	.L292:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 107


1463:..\src/interruptions.c ****             
1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****             // Update measure
1466:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4479              		.loc 1 1466 0
 4480 0374 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4481 0376 6A49     		ldr	r1, .L339+16
 4482 0378 FA68     		ldr	r2, [r7, #12]
 4483 037a 41F82320 		str	r2, [r1, r3, lsl #2]
1467:..\src/interruptions.c **** 
1468:..\src/interruptions.c ****             if (pwm_input > 0)
 4484              		.loc 1 1468 0
 4485 037e FB6C     		ldr	r3, [r7, #76]
 4486 0380 002B     		cmp	r3, #0
 4487 0382 04DD     		ble	.L293
1469:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4488              		.loc 1 1469 0
 4489 0384 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4490 0386 674A     		ldr	r2, .L339+20
 4491 0388 0121     		movs	r1, #1
 4492 038a D154     		strb	r1, [r2, r3]
1470:..\src/interruptions.c ****             else
1471:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1472:..\src/interruptions.c **** 
1473:..\src/interruptions.c ****         break;
 4493              		.loc 1 1473 0
 4494 038c D7E0     		b	.L266
 4495              	.L293:
1471:..\src/interruptions.c **** 
 4496              		.loc 1 1471 0
 4497 038e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4498 0390 644A     		ldr	r2, .L339+20
 4499 0392 0021     		movs	r1, #0
 4500 0394 D154     		strb	r1, [r2, r3]
 4501              		.loc 1 1473 0
 4502 0396 D2E0     		b	.L266
 4503              	.L270:
1474:..\src/interruptions.c **** 
1475:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1476:..\src/interruptions.c ****         case CONTROL_CURRENT:
1477:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4504              		.loc 1 1477 0
 4505 0398 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4506 039a 5D4A     		ldr	r2, .L339
 4507 039c 1B01     		lsls	r3, r3, #4
 4508 039e 1344     		add	r3, r3, r2
 4509 03a0 0C33     		adds	r3, r3, #12
 4510 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4511 03a4 002B     		cmp	r3, #0
 4512 03a6 00F0B180 		beq	.L334
 4513              		.loc 1 1477 0 is_stmt 0 discriminator 1
 4514 03aa 5F4B     		ldr	r3, .L339+24
 4515 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4516 03ae 002B     		cmp	r3, #0
 4517 03b0 00F0AC80 		beq	.L334
1478:..\src/interruptions.c ****                 
1479:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 108


 4518              		.loc 1 1479 0 is_stmt 1
 4519 03b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4520 03b6 564A     		ldr	r2, .L339
 4521 03b8 1B01     		lsls	r3, r3, #4
 4522 03ba 1344     		add	r3, r3, r2
 4523 03bc 0433     		adds	r3, r3, #4
 4524 03be 1B68     		ldr	r3, [r3]
 4525 03c0 BB64     		str	r3, [r7, #72]
1480:..\src/interruptions.c **** 
1481:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4526              		.loc 1 1481 0
 4527 03c2 7B6C     		ldr	r3, [r7, #68]
 4528 03c4 B3F95C30 		ldrsh	r3, [r3, #92]
 4529 03c8 1A46     		mov	r2, r3
 4530 03ca BB6C     		ldr	r3, [r7, #72]
 4531 03cc 9A42     		cmp	r2, r3
 4532 03ce 04DA     		bge	.L296
1482:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4533              		.loc 1 1482 0
 4534 03d0 7B6C     		ldr	r3, [r7, #68]
 4535 03d2 B3F95C30 		ldrsh	r3, [r3, #92]
 4536 03d6 BB64     		str	r3, [r7, #72]
 4537 03d8 0BE0     		b	.L297
 4538              	.L296:
1483:..\src/interruptions.c ****                 else {
1484:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4539              		.loc 1 1484 0
 4540 03da 7B6C     		ldr	r3, [r7, #68]
 4541 03dc B3F95C30 		ldrsh	r3, [r3, #92]
 4542 03e0 5A42     		negs	r2, r3
 4543 03e2 BB6C     		ldr	r3, [r7, #72]
 4544 03e4 9A42     		cmp	r2, r3
 4545 03e6 04DD     		ble	.L297
1485:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4546              		.loc 1 1485 0
 4547 03e8 7B6C     		ldr	r3, [r7, #68]
 4548 03ea B3F95C30 		ldrsh	r3, [r3, #92]
 4549 03ee 5B42     		negs	r3, r3
 4550 03f0 BB64     		str	r3, [r7, #72]
 4551              	.L297:
1486:..\src/interruptions.c ****                 }
1487:..\src/interruptions.c ****                 
1488:..\src/interruptions.c ****                 // current error
1489:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4552              		.loc 1 1489 0
 4553 03f2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4554 03f6 474A     		ldr	r2, .L339+4
 4555 03f8 3421     		movs	r1, #52
 4556 03fa 01FB03F3 		mul	r3, r1, r3
 4557 03fe 1344     		add	r3, r3, r2
 4558 0400 0C33     		adds	r3, r3, #12
 4559 0402 1B68     		ldr	r3, [r3]
 4560 0404 BA6C     		ldr	r2, [r7, #72]
 4561 0406 D31A     		subs	r3, r2, r3
 4562 0408 BB60     		str	r3, [r7, #8]
1490:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4563              		.loc 1 1490 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 109


 4564 040a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4565 040c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4566 040e 4749     		ldr	r1, .L339+28
 4567 0410 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4568 0414 BA68     		ldr	r2, [r7, #8]
 4569 0416 0A44     		add	r2, r2, r1
 4570 0418 4449     		ldr	r1, .L339+28
 4571 041a 41F82320 		str	r2, [r1, r3, lsl #2]
1491:..\src/interruptions.c ****                 
1492:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4572              		.loc 1 1492 0
 4573 041e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4574 0420 424A     		ldr	r2, .L339+28
 4575 0422 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4576 0426 424A     		ldr	r2, .L339+32
 4577 0428 9342     		cmp	r3, r2
 4578 042a 05DD     		ble	.L298
1493:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4579              		.loc 1 1493 0
 4580 042c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4581 042e 3F4A     		ldr	r2, .L339+28
 4582 0430 3F49     		ldr	r1, .L339+32
 4583 0432 42F82310 		str	r1, [r2, r3, lsl #2]
 4584 0436 0BE0     		b	.L299
 4585              	.L298:
1494:..\src/interruptions.c ****                 else {
1495:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4586              		.loc 1 1495 0
 4587 0438 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4588 043a 3C4A     		ldr	r2, .L339+28
 4589 043c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4590 0440 3C4A     		ldr	r2, .L339+36
 4591 0442 9342     		cmp	r3, r2
 4592 0444 04DA     		bge	.L299
1496:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4593              		.loc 1 1496 0
 4594 0446 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4595 0448 384A     		ldr	r2, .L339+28
 4596 044a 3A49     		ldr	r1, .L339+36
 4597 044c 42F82310 		str	r1, [r2, r3, lsl #2]
 4598              	.L299:
1497:..\src/interruptions.c ****                 }
1498:..\src/interruptions.c **** 
1499:..\src/interruptions.c ****                 pwm_input = 0;
 4599              		.loc 1 1499 0
 4600 0450 0023     		movs	r3, #0
 4601 0452 FB64     		str	r3, [r7, #76]
1500:..\src/interruptions.c **** 
1501:..\src/interruptions.c ****                 // Proportional
1502:..\src/interruptions.c ****                 if (k_p_c != 0)
 4602              		.loc 1 1502 0
 4603 0454 3B6B     		ldr	r3, [r7, #48]
 4604 0456 002B     		cmp	r3, #0
 4605 0458 07D0     		beq	.L300
1503:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4606              		.loc 1 1503 0
 4607 045a 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 110


 4608 045c BA68     		ldr	r2, [r7, #8]
 4609 045e 02FB03F3 		mul	r3, r2, r3
 4610 0462 1B14     		asrs	r3, r3, #16
 4611 0464 FA6C     		ldr	r2, [r7, #76]
 4612 0466 1344     		add	r3, r3, r2
 4613 0468 FB64     		str	r3, [r7, #76]
 4614              	.L300:
1504:..\src/interruptions.c **** 
1505:..\src/interruptions.c ****                 // Integral
1506:..\src/interruptions.c ****                 if (k_i_c != 0)
 4615              		.loc 1 1506 0
 4616 046a FB6A     		ldr	r3, [r7, #44]
 4617 046c 002B     		cmp	r3, #0
 4618 046e 0AD0     		beq	.L301
1507:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4619              		.loc 1 1507 0
 4620 0470 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4621 0472 2E4A     		ldr	r2, .L339+28
 4622 0474 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4623 0478 FA6A     		ldr	r2, [r7, #44]
 4624 047a 02FB03F3 		mul	r3, r2, r3
 4625 047e 1B14     		asrs	r3, r3, #16
 4626 0480 FA6C     		ldr	r2, [r7, #76]
 4627 0482 1344     		add	r3, r3, r2
 4628 0484 FB64     		str	r3, [r7, #76]
 4629              	.L301:
1508:..\src/interruptions.c **** 
1509:..\src/interruptions.c ****                 // Derivative
1510:..\src/interruptions.c ****                 if (k_d_c != 0)
 4630              		.loc 1 1510 0
 4631 0486 BB6A     		ldr	r3, [r7, #40]
 4632 0488 002B     		cmp	r3, #0
 4633 048a 0CD0     		beq	.L302
1511:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4634              		.loc 1 1511 0
 4635 048c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4636 048e 2A4A     		ldr	r2, .L339+40
 4637 0490 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4638 0494 BA68     		ldr	r2, [r7, #8]
 4639 0496 D31A     		subs	r3, r2, r3
 4640 0498 BA6A     		ldr	r2, [r7, #40]
 4641 049a 02FB03F3 		mul	r3, r2, r3
 4642 049e 1B14     		asrs	r3, r3, #16
 4643 04a0 FA6C     		ldr	r2, [r7, #76]
 4644 04a2 1344     		add	r3, r3, r2
 4645 04a4 FB64     		str	r3, [r7, #76]
 4646              	.L302:
1512:..\src/interruptions.c ****                 
1513:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4647              		.loc 1 1513 0
 4648 04a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4649 04a8 2349     		ldr	r1, .L339+40
 4650 04aa BA68     		ldr	r2, [r7, #8]
 4651 04ac 41F82320 		str	r2, [r1, r3, lsl #2]
1514:..\src/interruptions.c ****                 
1515:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4652              		.loc 1 1515 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 111


 4653 04b0 FB6C     		ldr	r3, [r7, #76]
 4654 04b2 002B     		cmp	r3, #0
 4655 04b4 04DB     		blt	.L303
1516:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4656              		.loc 1 1516 0
 4657 04b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4658 04b8 1A4A     		ldr	r2, .L339+20
 4659 04ba 0121     		movs	r1, #1
 4660 04bc D154     		strb	r1, [r2, r3]
1517:..\src/interruptions.c ****                 else
1518:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1519:..\src/interruptions.c ****             }
1520:..\src/interruptions.c ****         break;
 4661              		.loc 1 1520 0
 4662 04be 25E0     		b	.L334
 4663              	.L303:
1518:..\src/interruptions.c ****             }
 4664              		.loc 1 1518 0
 4665 04c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4666 04c2 184A     		ldr	r2, .L339+20
 4667 04c4 0021     		movs	r1, #0
 4668 04c6 D154     		strb	r1, [r2, r3]
 4669              		.loc 1 1520 0
 4670 04c8 20E0     		b	.L334
 4671              	.L269:
1521:..\src/interruptions.c ****         
1522:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1523:..\src/interruptions.c ****         case CONTROL_PWM:
1524:..\src/interruptions.c **** 
1525:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4672              		.loc 1 1525 0
 4673 04ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4674 04cc 104A     		ldr	r2, .L339
 4675 04ce 1B01     		lsls	r3, r3, #4
 4676 04d0 1344     		add	r3, r3, r2
 4677 04d2 0833     		adds	r3, r3, #8
 4678 04d4 1B68     		ldr	r3, [r3]
 4679 04d6 FB64     		str	r3, [r7, #76]
1526:..\src/interruptions.c **** 
1527:..\src/interruptions.c ****             if (pwm_input > 0) 
 4680              		.loc 1 1527 0
 4681 04d8 FB6C     		ldr	r3, [r7, #76]
 4682 04da 002B     		cmp	r3, #0
 4683 04dc 04DD     		ble	.L304
1528:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4684              		.loc 1 1528 0
 4685 04de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4686 04e0 104A     		ldr	r2, .L339+20
 4687 04e2 0121     		movs	r1, #1
 4688 04e4 D154     		strb	r1, [r2, r3]
 4689 04e6 03E0     		b	.L305
 4690              	.L304:
1529:..\src/interruptions.c ****             else 
1530:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4691              		.loc 1 1530 0
 4692 04e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4693 04ea 0E4A     		ldr	r2, .L339+20
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 112


 4694 04ec 0021     		movs	r1, #0
 4695 04ee D154     		strb	r1, [r2, r3]
 4696              	.L305:
1531:..\src/interruptions.c ****             
1532:..\src/interruptions.c **** 
1533:..\src/interruptions.c ****             // pwm_input saturation
1534:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4697              		.loc 1 1534 0
 4698 04f0 FB6C     		ldr	r3, [r7, #76]
 4699 04f2 13F1640F 		cmn	r3, #100
 4700 04f6 03DA     		bge	.L306
1535:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4701              		.loc 1 1535 0
 4702 04f8 6FF06303 		mvn	r3, #99
 4703 04fc FB64     		str	r3, [r7, #76]
1536:..\src/interruptions.c ****             else {
1537:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1538:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1539:..\src/interruptions.c ****         	}
1540:..\src/interruptions.c **** 
1541:..\src/interruptions.c ****         break;
 4704              		.loc 1 1541 0
 4705 04fe 1DE0     		b	.L335
 4706              	.L306:
1537:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4707              		.loc 1 1537 0
 4708 0500 FB6C     		ldr	r3, [r7, #76]
 4709 0502 642B     		cmp	r3, #100
 4710 0504 1ADD     		ble	.L335
1538:..\src/interruptions.c ****         	}
 4711              		.loc 1 1538 0
 4712 0506 6423     		movs	r3, #100
 4713 0508 FB64     		str	r3, [r7, #76]
 4714              		.loc 1 1541 0
 4715 050a 17E0     		b	.L335
 4716              	.L334:
1520:..\src/interruptions.c ****         
 4717              		.loc 1 1520 0
 4718 050c 00BF     		nop
 4719 050e 16E0     		b	.L266
 4720              	.L340:
 4721              		.align	2
 4722              	.L339:
 4723 0510 00000000 		.word	g_ref
 4724 0514 00000000 		.word	g_meas
 4725 0518 AC000000 		.word	pos_error_sum.10588
 4726 051c 18FCFFFF 		.word	-1000
 4727 0520 B4000000 		.word	prev_pos_err.10590
 4728 0524 BC000000 		.word	motor_dir.10593
 4729 0528 00000000 		.word	tension_valid
 4730 052c C0000000 		.word	curr_error_sum.10589
 4731 0530 A0860100 		.word	100000
 4732 0534 6079FEFF 		.word	-100000
 4733 0538 C8000000 		.word	prev_curr_err.10591
 4734              	.L335:
 4735              		.loc 1 1541 0
 4736 053c 00BF     		nop
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 113


 4737              	.L266:
1542:..\src/interruptions.c ****             
1543:..\src/interruptions.c ****     }
1544:..\src/interruptions.c **** 
1545:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1546:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1547:..\src/interruptions.c **** 
1548:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4738              		.loc 1 1548 0
 4739 053e FB6C     		ldr	r3, [r7, #76]
 4740 0540 642B     		cmp	r3, #100
 4741 0542 01DD     		ble	.L308
1549:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4742              		.loc 1 1549 0
 4743 0544 6423     		movs	r3, #100
 4744 0546 FB64     		str	r3, [r7, #76]
 4745              	.L308:
1550:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4746              		.loc 1 1550 0
 4747 0548 FB6C     		ldr	r3, [r7, #76]
 4748 054a 13F1640F 		cmn	r3, #100
 4749 054e 02DA     		bge	.L309
1551:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4750              		.loc 1 1551 0
 4751 0550 6FF06303 		mvn	r3, #99
 4752 0554 FB64     		str	r3, [r7, #76]
 4753              	.L309:
1552:..\src/interruptions.c **** 
1553:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4754              		.loc 1 1553 0
 4755 0556 7B6C     		ldr	r3, [r7, #68]
 4756 0558 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4757 055c 012B     		cmp	r3, #1
 4758 055e 0ED0     		beq	.L310
1554:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[idx]) >> 10;
 4759              		.loc 1 1554 0
 4760 0560 FB6C     		ldr	r3, [r7, #76]
 4761 0562 9B02     		lsls	r3, r3, #10
 4762 0564 AB4A     		ldr	r2, .L341
 4763 0566 82FB0312 		smull	r1, r2, r2, r3
 4764 056a 5211     		asrs	r2, r2, #5
 4765 056c DB17     		asrs	r3, r3, #31
 4766 056e D31A     		subs	r3, r2, r3
 4767 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4768 0572 A949     		ldr	r1, .L341+4
 4769 0574 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 4770 0576 02FB03F3 		mul	r3, r2, r3
 4771 057a 9B12     		asrs	r3, r3, #10
 4772 057c FB64     		str	r3, [r7, #76]
 4773              	.L310:
1555:..\src/interruptions.c ****  
1556:..\src/interruptions.c ****     //// RATE LIMITER ////
1557:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4774              		.loc 1 1557 0
 4775 057e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4776 0580 A64A     		ldr	r2, .L341+8
 4777 0582 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 114


 4778 0586 FA6C     		ldr	r2, [r7, #76]
 4779 0588 D31A     		subs	r3, r2, r3
 4780 058a 7A6C     		ldr	r2, [r7, #68]
 4781 058c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4782 0590 9342     		cmp	r3, r2
 4783 0592 09DD     		ble	.L311
1558:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4784              		.loc 1 1558 0
 4785 0594 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4786 0596 A14A     		ldr	r2, .L341+8
 4787 0598 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4788 059c 7A6C     		ldr	r2, [r7, #68]
 4789 059e 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4790 05a2 1344     		add	r3, r3, r2
 4791 05a4 FB64     		str	r3, [r7, #76]
 4792 05a6 14E0     		b	.L312
 4793              	.L311:
1559:..\src/interruptions.c ****     }
1560:..\src/interruptions.c ****     else {
1561:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4794              		.loc 1 1561 0
 4795 05a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4796 05aa 9C4A     		ldr	r2, .L341+8
 4797 05ac 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4798 05b0 FA6C     		ldr	r2, [r7, #76]
 4799 05b2 D21A     		subs	r2, r2, r3
 4800 05b4 7B6C     		ldr	r3, [r7, #68]
 4801 05b6 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4802 05ba 5B42     		negs	r3, r3
 4803 05bc 9A42     		cmp	r2, r3
 4804 05be 08DA     		bge	.L312
1562:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4805              		.loc 1 1562 0
 4806 05c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4807 05c2 964A     		ldr	r2, .L341+8
 4808 05c4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4809 05c8 7A6C     		ldr	r2, [r7, #68]
 4810 05ca 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4811 05ce 9B1A     		subs	r3, r3, r2
 4812 05d0 FB64     		str	r3, [r7, #76]
 4813              	.L312:
1563:..\src/interruptions.c ****     }
1564:..\src/interruptions.c ****     
1565:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4814              		.loc 1 1565 0
 4815 05d2 FB6C     		ldr	r3, [r7, #76]
 4816 05d4 642B     		cmp	r3, #100
 4817 05d6 01DD     		ble	.L313
1566:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4818              		.loc 1 1566 0
 4819 05d8 6423     		movs	r3, #100
 4820 05da FB64     		str	r3, [r7, #76]
 4821              	.L313:
1567:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4822              		.loc 1 1567 0
 4823 05dc FB6C     		ldr	r3, [r7, #76]
 4824 05de 13F1640F 		cmn	r3, #100
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 115


 4825 05e2 02DA     		bge	.L314
1568:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4826              		.loc 1 1568 0
 4827 05e4 6FF06303 		mvn	r3, #99
 4828 05e8 FB64     		str	r3, [r7, #76]
 4829              	.L314:
1569:..\src/interruptions.c ****     
1570:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4830              		.loc 1 1570 0
 4831 05ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4832 05ec 8B49     		ldr	r1, .L341+8
 4833 05ee FA6C     		ldr	r2, [r7, #76]
 4834 05f0 41F82320 		str	r2, [r1, r3, lsl #2]
1571:..\src/interruptions.c **** 	
1572:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 4835              		.loc 1 1572 0
 4836 05f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4837 05f6 FA6C     		ldr	r2, [r7, #76]
 4838 05f8 002A     		cmp	r2, #0
 4839 05fa 01DB     		blt	.L315
 4840              		.loc 1 1572 0 is_stmt 0 discriminator 1
 4841 05fc 0121     		movs	r1, #1
 4842 05fe 01E0     		b	.L316
 4843              	.L315:
 4844              		.loc 1 1572 0 discriminator 2
 4845 0600 4FF0FF31 		mov	r1, #-1
 4846              	.L316:
 4847              		.loc 1 1572 0 discriminator 4
 4848 0604 864A     		ldr	r2, .L341+12
 4849 0606 D154     		strb	r1, [r2, r3]
1573:..\src/interruptions.c ****     
1574:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4850              		.loc 1 1574 0 is_stmt 1 discriminator 4
 4851 0608 7B6C     		ldr	r3, [r7, #68]
 4852 060a 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4853 060e 012B     		cmp	r3, #1
 4854 0610 40F0AA80 		bne	.L317
1575:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1576:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4855              		.loc 1 1576 0
 4856 0614 7B6C     		ldr	r3, [r7, #68]
 4857 0616 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4858 061a 012B     		cmp	r3, #1
 4859 061c 00F09F80 		beq	.L318
 4860              		.loc 1 1576 0 is_stmt 0 discriminator 1
 4861 0620 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4862 0624 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4863 0626 7F48     		ldr	r0, .L341+16
 4864 0628 1346     		mov	r3, r2
 4865 062a 5B00     		lsls	r3, r3, #1
 4866 062c 1344     		add	r3, r3, r2
 4867 062e 9B00     		lsls	r3, r3, #2
 4868 0630 1344     		add	r3, r3, r2
 4869 0632 0B44     		add	r3, r3, r1
 4870 0634 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4871 0638 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4872 063c F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 116


 4873 063e 7A4C     		ldr	r4, .L341+20
 4874 0640 1346     		mov	r3, r2
 4875 0642 5B00     		lsls	r3, r3, #1
 4876 0644 1344     		add	r3, r3, r2
 4877 0646 9B00     		lsls	r3, r3, #2
 4878 0648 1344     		add	r3, r3, r2
 4879 064a 0344     		add	r3, r3, r0
 4880 064c 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4881 0650 CB1A     		subs	r3, r1, r3
 4882 0652 312B     		cmp	r3, #49
 4883 0654 00F38380 		bgt	.L318
1577:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4884              		.loc 1 1577 0 is_stmt 1 discriminator 2
 4885 0658 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4886 065c F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4887 065e 7148     		ldr	r0, .L341+16
 4888 0660 1346     		mov	r3, r2
 4889 0662 5B00     		lsls	r3, r3, #1
 4890 0664 1344     		add	r3, r3, r2
 4891 0666 9B00     		lsls	r3, r3, #2
 4892 0668 1344     		add	r3, r3, r2
 4893 066a 0B44     		add	r3, r3, r1
 4894 066c 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4895 0670 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4896 0674 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4897 0676 6C4C     		ldr	r4, .L341+20
 4898 0678 1346     		mov	r3, r2
 4899 067a 5B00     		lsls	r3, r3, #1
 4900 067c 1344     		add	r3, r3, r2
 4901 067e 9B00     		lsls	r3, r3, #2
 4902 0680 1344     		add	r3, r3, r2
 4903 0682 0344     		add	r3, r3, r0
 4904 0684 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4905 0688 CB1A     		subs	r3, r1, r3
1576:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4906              		.loc 1 1576 0 discriminator 2
 4907 068a 13F1310F 		cmn	r3, #49
 4908 068e 66DB     		blt	.L318
1578:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4909              		.loc 1 1578 0
 4910 0690 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4911 0692 664A     		ldr	r2, .L341+24
 4912 0694 1B01     		lsls	r3, r3, #4
 4913 0696 1344     		add	r3, r3, r2
 4914 0698 1A68     		ldr	r2, [r3]
 4915 069a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4916 069c 6449     		ldr	r1, .L341+28
 4917 069e 1B01     		lsls	r3, r3, #4
 4918 06a0 0B44     		add	r3, r3, r1
 4919 06a2 1B68     		ldr	r3, [r3]
 4920 06a4 D31A     		subs	r3, r2, r3
1577:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4921              		.loc 1 1577 0
 4922 06a6 632B     		cmp	r3, #99
 4923 06a8 59DC     		bgt	.L318
 4924              		.loc 1 1578 0
 4925 06aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 117


 4926 06ac 5F4A     		ldr	r2, .L341+24
 4927 06ae 1B01     		lsls	r3, r3, #4
 4928 06b0 1344     		add	r3, r3, r2
 4929 06b2 1A68     		ldr	r2, [r3]
 4930 06b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4931 06b6 5E49     		ldr	r1, .L341+28
 4932 06b8 1B01     		lsls	r3, r3, #4
 4933 06ba 0B44     		add	r3, r3, r1
 4934 06bc 1B68     		ldr	r3, [r3]
 4935 06be D31A     		subs	r3, r2, r3
 4936 06c0 13F1630F 		cmn	r3, #99
 4937 06c4 4BDB     		blt	.L318
1579:..\src/interruptions.c ****             position_counter[idx]++;
 4938              		.loc 1 1579 0
 4939 06c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4940 06c8 5A4A     		ldr	r2, .L341+32
 4941 06ca 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4942 06ce 0132     		adds	r2, r2, #1
 4943 06d0 5849     		ldr	r1, .L341+32
 4944 06d2 41F82320 		str	r2, [r1, r3, lsl #2]
1580:..\src/interruptions.c ****             
1581:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4945              		.loc 1 1581 0
 4946 06d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4947 06d8 564A     		ldr	r2, .L341+32
 4948 06da 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4949 06de F92B     		cmp	r3, #249
 4950 06e0 42D9     		bls	.L317
1582:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4951              		.loc 1 1582 0
 4952 06e2 7B6C     		ldr	r3, [r7, #68]
 4953 06e4 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4954 06e8 002B     		cmp	r3, #0
 4955 06ea 10D1     		bne	.L320
 4956              		.loc 1 1582 0 is_stmt 0 discriminator 1
 4957 06ec 524B     		ldr	r3, .L341+36
 4958 06ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4959 06f0 002B     		cmp	r3, #0
 4960 06f2 0CD1     		bne	.L320
1583:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4961              		.loc 1 1583 0 is_stmt 1
 4962 06f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4963 06f6 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4964 06fa 4B49     		ldr	r1, .L341+20
 4965 06fc 3420     		movs	r0, #52
 4966 06fe 00FB02F2 		mul	r2, r0, r2
 4967 0702 0A44     		add	r2, r2, r1
 4968 0704 1268     		ldr	r2, [r2]
 4969 0706 4D49     		ldr	r1, .L341+40
 4970 0708 1B01     		lsls	r3, r3, #4
 4971 070a 0B44     		add	r3, r3, r1
 4972 070c 1A60     		str	r2, [r3]
 4973              	.L320:
1584:..\src/interruptions.c ****                 }
1585:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4974              		.loc 1 1585 0
 4975 070e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 118


 4976 0710 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4977 0714 4449     		ldr	r1, .L341+20
 4978 0716 3420     		movs	r0, #52
 4979 0718 00FB02F2 		mul	r2, r0, r2
 4980 071c 0A44     		add	r2, r2, r1
 4981 071e 1268     		ldr	r2, [r2]
 4982 0720 4349     		ldr	r1, .L341+28
 4983 0722 1B01     		lsls	r3, r3, #4
 4984 0724 0B44     		add	r3, r3, r1
 4985 0726 1A60     		str	r2, [r3]
1586:..\src/interruptions.c ****                 
1587:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4986              		.loc 1 1587 0
 4987 0728 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4988 072a 424A     		ldr	r2, .L341+32
 4989 072c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4990 0730 FA2B     		cmp	r3, #250
 4991 0732 11D1     		bne	.L321
1588:..\src/interruptions.c ****                     // To do only once
1589:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4992              		.loc 1 1589 0
 4993 0734 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4994 0738 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4995 073c 3A49     		ldr	r1, .L341+20
 4996 073e 3420     		movs	r0, #52
 4997 0740 00FB02F2 		mul	r2, r0, r2
 4998 0744 0A44     		add	r2, r2, r1
 4999 0746 0C32     		adds	r2, r2, #12
 5000 0748 1268     		ldr	r2, [r2]
 5001 074a 3749     		ldr	r1, .L341+20
 5002 074c 3420     		movs	r0, #52
 5003 074e 00FB03F3 		mul	r3, r0, r3
 5004 0752 0B44     		add	r3, r3, r1
 5005 0754 1433     		adds	r3, r3, #20
 5006 0756 1A60     		str	r2, [r3]
 5007              	.L321:
1590:..\src/interruptions.c ****                 }
1591:..\src/interruptions.c ****                 pwm_input = 0;            
 5008              		.loc 1 1591 0
 5009 0758 0023     		movs	r3, #0
 5010 075a FB64     		str	r3, [r7, #76]
1581:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5011              		.loc 1 1581 0
 5012 075c 04E0     		b	.L317
 5013              	.L318:
1592:..\src/interruptions.c ****             }
1593:..\src/interruptions.c ****         }
1594:..\src/interruptions.c ****         else {
1595:..\src/interruptions.c ****             position_counter[idx] = 0;
 5014              		.loc 1 1595 0
 5015 075e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5016 0760 344A     		ldr	r2, .L341+32
 5017 0762 0021     		movs	r1, #0
 5018 0764 42F82310 		str	r1, [r2, r3, lsl #2]
 5019              	.L317:
1596:..\src/interruptions.c ****         }
1597:..\src/interruptions.c ****     }
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 119


1598:..\src/interruptions.c ****     
1599:..\src/interruptions.c ****     // Set motor direction and write pwm value
1600:..\src/interruptions.c ****     switch (idx) {
 5020              		.loc 1 1600 0
 5021 0768 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5022 076a 002B     		cmp	r3, #0
 5023 076c 02D0     		beq	.L323
 5024 076e 012B     		cmp	r3, #1
 5025 0770 26D0     		beq	.L324
1601:..\src/interruptions.c ****         case 0:         // Motor 1
1602:..\src/interruptions.c ****             if (motor_dir[idx])
1603:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1604:..\src/interruptions.c ****             else
1605:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1606:..\src/interruptions.c ****             
1607:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1608:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1609:..\src/interruptions.c ****             }
1610:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1611:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1612:..\src/interruptions.c ****             }
1613:..\src/interruptions.c ****             
1614:..\src/interruptions.c ****             break;
1615:..\src/interruptions.c ****         case 1:         // Motor 2
1616:..\src/interruptions.c ****             
1617:..\src/interruptions.c ****             if (motor_dir[idx])
1618:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1619:..\src/interruptions.c ****             else
1620:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1621:..\src/interruptions.c ****             
1622:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1623:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1624:..\src/interruptions.c ****             }
1625:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1626:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1627:..\src/interruptions.c ****             }
1628:..\src/interruptions.c ****             
1629:..\src/interruptions.c ****             break;
1630:..\src/interruptions.c ****         default:
1631:..\src/interruptions.c ****             break;
 5026              		.loc 1 1631 0
 5027 0772 4BE0     		b	.L329
 5028              	.L323:
1602:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5029              		.loc 1 1602 0
 5030 0774 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5031 0776 324A     		ldr	r2, .L341+44
 5032 0778 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5033 077a 002B     		cmp	r3, #0
 5034 077c 03D0     		beq	.L325
1603:..\src/interruptions.c ****             else
 5035              		.loc 1 1603 0
 5036 077e 0120     		movs	r0, #1
 5037 0780 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5038 0784 02E0     		b	.L326
 5039              	.L325:
1605:..\src/interruptions.c ****             
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 120


 5040              		.loc 1 1605 0
 5041 0786 0020     		movs	r0, #0
 5042 0788 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5043              	.L326:
1607:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 5044              		.loc 1 1607 0
 5045 078c 7B6C     		ldr	r3, [r7, #68]
 5046 078e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5047 0792 012B     		cmp	r3, #1
 5048 0794 0BD1     		bne	.L327
1608:..\src/interruptions.c ****             }
 5049              		.loc 1 1608 0
 5050 0796 FB6C     		ldr	r3, [r7, #76]
 5051 0798 002B     		cmp	r3, #0
 5052 079a B8BF     		it	lt
 5053 079c 5B42     		rsblt	r3, r3, #0
 5054 079e DBB2     		uxtb	r3, r3
 5055 07a0 C3F16403 		rsb	r3, r3, #100
 5056 07a4 DBB2     		uxtb	r3, r3
 5057 07a6 1846     		mov	r0, r3
 5058 07a8 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1614:..\src/interruptions.c ****         case 1:         // Motor 2
 5059              		.loc 1 1614 0
 5060 07ac 2EE0     		b	.L329
 5061              	.L327:
1611:..\src/interruptions.c ****             }
 5062              		.loc 1 1611 0
 5063 07ae FB6C     		ldr	r3, [r7, #76]
 5064 07b0 002B     		cmp	r3, #0
 5065 07b2 B8BF     		it	lt
 5066 07b4 5B42     		rsblt	r3, r3, #0
 5067 07b6 DBB2     		uxtb	r3, r3
 5068 07b8 1846     		mov	r0, r3
 5069 07ba FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1614:..\src/interruptions.c ****         case 1:         // Motor 2
 5070              		.loc 1 1614 0
 5071 07be 25E0     		b	.L329
 5072              	.L324:
1617:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5073              		.loc 1 1617 0
 5074 07c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5075 07c2 1F4A     		ldr	r2, .L341+44
 5076 07c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5077 07c6 002B     		cmp	r3, #0
 5078 07c8 03D0     		beq	.L330
1618:..\src/interruptions.c ****             else
 5079              		.loc 1 1618 0
 5080 07ca 0120     		movs	r0, #1
 5081 07cc FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5082 07d0 02E0     		b	.L331
 5083              	.L330:
1620:..\src/interruptions.c ****             
 5084              		.loc 1 1620 0
 5085 07d2 0020     		movs	r0, #0
 5086 07d4 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5087              	.L331:
1622:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 121


 5088              		.loc 1 1622 0
 5089 07d8 7B6C     		ldr	r3, [r7, #68]
 5090 07da 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5091 07de 012B     		cmp	r3, #1
 5092 07e0 0BD1     		bne	.L332
1623:..\src/interruptions.c ****             }
 5093              		.loc 1 1623 0
 5094 07e2 FB6C     		ldr	r3, [r7, #76]
 5095 07e4 002B     		cmp	r3, #0
 5096 07e6 B8BF     		it	lt
 5097 07e8 5B42     		rsblt	r3, r3, #0
 5098 07ea DBB2     		uxtb	r3, r3
 5099 07ec C3F16403 		rsb	r3, r3, #100
 5100 07f0 DBB2     		uxtb	r3, r3
 5101 07f2 1846     		mov	r0, r3
 5102 07f4 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1629:..\src/interruptions.c ****         default:
 5103              		.loc 1 1629 0
 5104 07f8 07E0     		b	.L336
 5105              	.L332:
1626:..\src/interruptions.c ****             }
 5106              		.loc 1 1626 0
 5107 07fa FB6C     		ldr	r3, [r7, #76]
 5108 07fc 002B     		cmp	r3, #0
 5109 07fe B8BF     		it	lt
 5110 0800 5B42     		rsblt	r3, r3, #0
 5111 0802 DBB2     		uxtb	r3, r3
 5112 0804 1846     		mov	r0, r3
 5113 0806 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 5114              	.L336:
1629:..\src/interruptions.c ****         default:
 5115              		.loc 1 1629 0
 5116 080a 00BF     		nop
 5117              	.L329:
1632:..\src/interruptions.c ****     }
1633:..\src/interruptions.c ****     
1634:..\src/interruptions.c **** }
 5118              		.loc 1 1634 0
 5119 080c 00BF     		nop
 5120 080e 5437     		adds	r7, r7, #84
 5121              		.cfi_def_cfa_offset 12
 5122 0810 BD46     		mov	sp, r7
 5123              		.cfi_def_cfa_register 13
 5124              		@ sp needed
 5125 0812 90BD     		pop	{r4, r7, pc}
 5126              	.L342:
 5127              		.align	2
 5128              	.L341:
 5129 0814 1F85EB51 		.word	1374389535
 5130 0818 00000000 		.word	dev_pwm_limit
 5131 081c D0000000 		.word	prev_pwm.10592
 5132 0820 00000000 		.word	pwm_sign
 5133 0824 00000000 		.word	g_measOld
 5134 0828 00000000 		.word	g_meas
 5135 082c 00000000 		.word	g_refOld
 5136 0830 00000000 		.word	g_ref
 5137 0834 D8000000 		.word	position_counter.10594
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 122


 5138 0838 00000000 		.word	change_ext_ref_flag
 5139 083c 00000000 		.word	g_refNew
 5140 0840 BC000000 		.word	motor_dir.10593
 5141              		.cfi_endproc
 5142              	.LFE72:
 5143              		.size	motor_control_generic, .-motor_control_generic
 5144              		.global	__aeabi_fcmpeq
 5145              		.global	__aeabi_fmul
 5146              		.global	__aeabi_f2iz
 5147              		.global	__aeabi_fcmplt
 5148              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5149              		.align	2
 5150              		.global	encoder_reading_SPI
 5151              		.thumb
 5152              		.thumb_func
 5153              		.type	encoder_reading_SPI, %function
 5154              	encoder_reading_SPI:
 5155              	.LFB73:
1635:..\src/interruptions.c **** 
1636:..\src/interruptions.c **** //==============================================================================
1637:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1638:..\src/interruptions.c **** //==============================================================================
1639:..\src/interruptions.c **** 
1640:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5156              		.loc 1 1640 0
 5157              		.cfi_startproc
 5158              		@ args = 0, pretend = 0, frame = 48
 5159              		@ frame_needed = 1, uses_anonymous_args = 0
 5160 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5161              		.cfi_def_cfa_offset 20
 5162              		.cfi_offset 4, -20
 5163              		.cfi_offset 5, -16
 5164              		.cfi_offset 6, -12
 5165              		.cfi_offset 7, -8
 5166              		.cfi_offset 14, -4
 5167 0002 8FB0     		sub	sp, sp, #60
 5168              		.cfi_def_cfa_offset 80
 5169 0004 02AF     		add	r7, sp, #8
 5170              		.cfi_def_cfa 7, 72
 5171 0006 0346     		mov	r3, r0
 5172 0008 0A46     		mov	r2, r1
 5173 000a FB71     		strb	r3, [r7, #7]
 5174 000c 1346     		mov	r3, r2
 5175 000e BB71     		strb	r3, [r7, #6]
1641:..\src/interruptions.c **** 
1642:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5176              		.loc 1 1642 0
 5177 0010 0023     		movs	r3, #0
 5178 0012 87F82F30 		strb	r3, [r7, #47]
1643:..\src/interruptions.c ****     
1644:..\src/interruptions.c ****     // Encoder Variables  
1645:..\src/interruptions.c ****     uint8 jj;
1646:..\src/interruptions.c ****      
1647:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1648:..\src/interruptions.c ****     int16 tmp_value_encoder;
1649:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1650:..\src/interruptions.c ****     int32 value_encoder;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 123


1651:..\src/interruptions.c ****     int32 speed_encoder;
1652:..\src/interruptions.c ****     int32 value_diff;
1653:..\src/interruptions.c **** 	int8 init_rot = 0;
 5179              		.loc 1 1653 0
 5180 0016 0023     		movs	r3, #0
 5181 0018 87F82730 		strb	r3, [r7, #39]
1654:..\src/interruptions.c **** 
1655:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1656:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1657:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1658:..\src/interruptions.c ****     
1659:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1660:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1661:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1662:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1663:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1664:..\src/interruptions.c **** 
1665:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1666:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1667:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1668:..\src/interruptions.c **** //    
1669:..\src/interruptions.c ****     if (reset_last_value_flag) {
 5182              		.loc 1 1669 0
 5183 001c 914B     		ldr	r3, .L379
 5184 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5185 0020 002B     		cmp	r3, #0
 5186 0022 18D0     		beq	.L344
1670:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5187              		.loc 1 1670 0
 5188 0024 0323     		movs	r3, #3
 5189 0026 87F82E30 		strb	r3, [r7, #46]
 5190 002a 0AE0     		b	.L345
 5191              	.L346:
1671:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5192              		.loc 1 1671 0
 5193 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5194 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5195 0032 8D48     		ldr	r0, .L379+4
 5196 0034 1346     		mov	r3, r2
 5197 0036 5B00     		lsls	r3, r3, #1
 5198 0038 1344     		add	r3, r3, r2
 5199 003a 0B44     		add	r3, r3, r1
 5200 003c 0022     		movs	r2, #0
 5201 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 5202              	.L345:
1670:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5203              		.loc 1 1670 0 discriminator 1
 5204 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5205 0046 5A1E     		subs	r2, r3, #1
 5206 0048 87F82E20 		strb	r2, [r7, #46]
 5207 004c 002B     		cmp	r3, #0
 5208 004e EDD1     		bne	.L346
1672:..\src/interruptions.c ****         
1673:..\src/interruptions.c ****         reset_last_value_flag = 0;
 5209              		.loc 1 1673 0
 5210 0050 844B     		ldr	r3, .L379
 5211 0052 0022     		movs	r2, #0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 124


 5212 0054 1A70     		strb	r2, [r3]
 5213              	.L344:
1674:..\src/interruptions.c ****     }
1675:..\src/interruptions.c **** 
1676:..\src/interruptions.c ****     //======================================================     reading sensors
1677:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5214              		.loc 1 1677 0
 5215 0056 0023     		movs	r3, #0
 5216 0058 87F82F30 		strb	r3, [r7, #47]
 5217 005c 0DE0     		b	.L347
 5218              	.L348:
1678:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5219              		.loc 1 1678 0 discriminator 3
 5220 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5221 0062 9B00     		lsls	r3, r3, #2
 5222 0064 07F13002 		add	r2, r7, #48
 5223 0068 1344     		add	r3, r3, r2
 5224 006a 0022     		movs	r2, #0
 5225 006c 43F8282C 		str	r2, [r3, #-40]
1677:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5226              		.loc 1 1677 0 discriminator 3
 5227 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5228 0074 0133     		adds	r3, r3, #1
 5229 0076 87F82F30 		strb	r3, [r7, #47]
 5230              	.L347:
1677:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5231              		.loc 1 1677 0 is_stmt 0 discriminator 1
 5232 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5233 007e 022B     		cmp	r3, #2
 5234 0080 EDD9     		bls	.L348
1679:..\src/interruptions.c ****     }   
1680:..\src/interruptions.c ****     
1681:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5235              		.loc 1 1681 0 is_stmt 1
 5236 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5237 0084 794A     		ldr	r2, .L379+8
 5238 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5239 0088 1A46     		mov	r2, r3
 5240 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5241 008c 1946     		mov	r1, r3
 5242 008e 1046     		mov	r0, r2
 5243 0090 FFF7FEFF 		bl	ReadEncoderLine
 5244              	.LBB10:
1682:..\src/interruptions.c ****                                                                         //CS1 for left hand
1683:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5245              		.loc 1 1683 0
 5246 0094 0023     		movs	r3, #0
 5247 0096 3B62     		str	r3, [r7, #32]
 5248 0098 2EE0     		b	.L349
 5249              	.L351:
1684:..\src/interruptions.c ****         
1685:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1686:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5250              		.loc 1 1686 0
 5251 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5252 009c 7449     		ldr	r1, .L379+12
 5253 009e 1346     		mov	r3, r2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 125


 5254 00a0 5B00     		lsls	r3, r3, #1
 5255 00a2 1344     		add	r3, r3, r2
 5256 00a4 1B01     		lsls	r3, r3, #4
 5257 00a6 CA18     		adds	r2, r1, r3
 5258 00a8 3B6A     		ldr	r3, [r7, #32]
 5259 00aa 1344     		add	r3, r3, r2
 5260 00ac 03F2B113 		addw	r3, r3, #433
 5261 00b0 1B78     		ldrb	r3, [r3]
 5262 00b2 87F82F30 		strb	r3, [r7, #47]
1687:..\src/interruptions.c ****         
1688:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5263              		.loc 1 1688 0
 5264 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5265 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5266 00bc 6D48     		ldr	r0, .L379+16
 5267 00be 1346     		mov	r3, r2
 5268 00c0 9B00     		lsls	r3, r3, #2
 5269 00c2 1344     		add	r3, r3, r2
 5270 00c4 0344     		add	r3, r3, r0
 5271 00c6 0B44     		add	r3, r3, r1
 5272 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5273 00ca 0F2B     		cmp	r3, #15
 5274 00cc 11D9     		bls	.L350
1689:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5275              		.loc 1 1689 0
 5276 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5277 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5278 00d4 6848     		ldr	r0, .L379+20
 5279 00d6 1346     		mov	r3, r2
 5280 00d8 9B00     		lsls	r3, r3, #2
 5281 00da 1344     		add	r3, r3, r2
 5282 00dc 0B44     		add	r3, r3, r1
 5283 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5284 00e2 1A46     		mov	r2, r3
 5285 00e4 3B6A     		ldr	r3, [r7, #32]
 5286 00e6 9B00     		lsls	r3, r3, #2
 5287 00e8 07F13001 		add	r1, r7, #48
 5288 00ec 0B44     		add	r3, r3, r1
 5289 00ee 43F8282C 		str	r2, [r3, #-40]
 5290              	.L350:
1683:..\src/interruptions.c ****         
 5291              		.loc 1 1683 0 discriminator 2
 5292 00f2 3B6A     		ldr	r3, [r7, #32]
 5293 00f4 0133     		adds	r3, r3, #1
 5294 00f6 3B62     		str	r3, [r7, #32]
 5295              	.L349:
1683:..\src/interruptions.c ****         
 5296              		.loc 1 1683 0 is_stmt 0 discriminator 1
 5297 00f8 3B6A     		ldr	r3, [r7, #32]
 5298 00fa 022B     		cmp	r3, #2
 5299 00fc CDDD     		ble	.L351
 5300              	.LBE10:
1690:..\src/interruptions.c ****         }
1691:..\src/interruptions.c ****     }
1692:..\src/interruptions.c ****     
1693:..\src/interruptions.c ****     // S = SIGN BIT
1694:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 126


1695:..\src/interruptions.c ****     // 0 = 0 BIT
1696:..\src/interruptions.c ****     // C = CONTROL BIT
1697:..\src/interruptions.c ****     
1698:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5301              		.loc 1 1698 0 is_stmt 1
 5302 00fe 0023     		movs	r3, #0
 5303 0100 87F82F30 		strb	r3, [r7, #47]
 5304 0104 39E3     		b	.L352
 5305              	.L372:
1699:..\src/interruptions.c ****         
1700:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5306              		.loc 1 1700 0
 5307 0106 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5308 0108 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5309 010c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5310 0110 9B00     		lsls	r3, r3, #2
 5311 0112 07F13001 		add	r1, r7, #48
 5312 0116 0B44     		add	r3, r3, r1
 5313 0118 53F8281C 		ldr	r1, [r3, #-40]
 5314 011c 574C     		ldr	r4, .L379+24
 5315 011e 1346     		mov	r3, r2
 5316 0120 9B00     		lsls	r3, r3, #2
 5317 0122 1344     		add	r3, r3, r2
 5318 0124 0344     		add	r3, r3, r0
 5319 0126 44F82310 		str	r1, [r4, r3, lsl #2]
1701:..\src/interruptions.c ****         
1702:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5320              		.loc 1 1702 0
 5321 012a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5322 012e 9B00     		lsls	r3, r3, #2
 5323 0130 07F13002 		add	r2, r7, #48
 5324 0134 1344     		add	r3, r3, r2
 5325 0136 53F8283C 		ldr	r3, [r3, #-40]
 5326 013a 99B2     		uxth	r1, r3
 5327 013c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5328 013e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5329 0142 4F4C     		ldr	r4, .L379+28
 5330 0144 1346     		mov	r3, r2
 5331 0146 5B00     		lsls	r3, r3, #1
 5332 0148 1344     		add	r3, r3, r2
 5333 014a 9B00     		lsls	r3, r3, #2
 5334 014c 0344     		add	r3, r3, r0
 5335 014e 6633     		adds	r3, r3, #102
 5336 0150 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5337 0154 9BB2     		uxth	r3, r3
 5338 0156 CB1A     		subs	r3, r1, r3
 5339 0158 9BB2     		uxth	r3, r3
 5340 015a BB85     		strh	r3, [r7, #44]	@ movhi
1703:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5341              		.loc 1 1703 0
 5342 015c B7F92C30 		ldrsh	r3, [r7, #44]
 5343 0160 002B     		cmp	r3, #0
 5344 0162 04DA     		bge	.L353
1704:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5345              		.loc 1 1704 0
 5346 0164 BB8D     		ldrh	r3, [r7, #44]
 5347 0166 03F58053 		add	r3, r3, #4096
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 127


 5348 016a 9BB2     		uxth	r3, r3
 5349 016c BB85     		strh	r3, [r7, #44]	@ movhi
 5350              	.L353:
1705:..\src/interruptions.c ****         }       // Range [0, 4096]
1706:..\src/interruptions.c **** 
1707:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5351              		.loc 1 1707 0
 5352 016e B7F92C30 		ldrsh	r3, [r7, #44]
 5353 0172 B3F5006F 		cmp	r3, #2048
 5354 0176 04DB     		blt	.L354
1708:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5355              		.loc 1 1708 0
 5356 0178 BB8D     		ldrh	r3, [r7, #44]
 5357 017a A3F58053 		sub	r3, r3, #4096
 5358 017e 9BB2     		uxth	r3, r3
 5359 0180 BB85     		strh	r3, [r7, #44]	@ movhi
 5360              	.L354:
1709:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5361              		.loc 1 1711 0
 5362 0182 B7F92C30 		ldrsh	r3, [r7, #44]
 5363 0186 1B01     		lsls	r3, r3, #4
 5364 0188 FB61     		str	r3, [r7, #28]
1712:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5365              		.loc 1 1712 0
 5366 018a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5367 018c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5368 0190 3C48     		ldr	r0, .L379+32
 5369 0192 1346     		mov	r3, r2
 5370 0194 5B00     		lsls	r3, r3, #1
 5371 0196 1344     		add	r3, r3, r2
 5372 0198 0B44     		add	r3, r3, r1
 5373 019a FA69     		ldr	r2, [r7, #28]
 5374 019c 40F82320 		str	r2, [r0, r3, lsl #2]
1713:..\src/interruptions.c **** 
1714:..\src/interruptions.c ****         // Initialize last_value_encoder
1715:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5375              		.loc 1 1715 0
 5376 01a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5377 01a2 394A     		ldr	r2, .L379+36
 5378 01a4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5379 01a6 002B     		cmp	r3, #0
 5380 01a8 12D0     		beq	.L355
1716:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5381              		.loc 1 1716 0
 5382 01aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5383 01ac 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5384 01b0 2D48     		ldr	r0, .L379+4
 5385 01b2 1346     		mov	r3, r2
 5386 01b4 5B00     		lsls	r3, r3, #1
 5387 01b6 1344     		add	r3, r3, r2
 5388 01b8 0B44     		add	r3, r3, r1
 5389 01ba FA69     		ldr	r2, [r7, #28]
 5390 01bc 40F82320 		str	r2, [r0, r3, lsl #2]
1717:..\src/interruptions.c ****             if (index == 2)
 5391              		.loc 1 1717 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 128


 5392 01c0 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5393 01c4 022B     		cmp	r3, #2
 5394 01c6 03D1     		bne	.L355
1718:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5395              		.loc 1 1718 0
 5396 01c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5397 01ca 2F4A     		ldr	r2, .L379+36
 5398 01cc 0021     		movs	r1, #0
 5399 01ce D154     		strb	r1, [r2, r3]
 5400              	.L355:
1719:..\src/interruptions.c ****         }
1720:..\src/interruptions.c **** 
1721:..\src/interruptions.c ****         // Take care of rotations
1722:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5401              		.loc 1 1722 0
 5402 01d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5403 01d2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5404 01d6 2448     		ldr	r0, .L379+4
 5405 01d8 1346     		mov	r3, r2
 5406 01da 5B00     		lsls	r3, r3, #1
 5407 01dc 1344     		add	r3, r3, r2
 5408 01de 0B44     		add	r3, r3, r1
 5409 01e0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5410 01e4 FA69     		ldr	r2, [r7, #28]
 5411 01e6 D31A     		subs	r3, r2, r3
 5412 01e8 BB61     		str	r3, [r7, #24]
1723:..\src/interruptions.c **** 
1724:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1725:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1726:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1727:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1728:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1729:..\src/interruptions.c ****         //                                               |           |
1730:..\src/interruptions.c ****         //                                           24575           -24576
1731:..\src/interruptions.c ****         //                                               |___________|
1732:..\src/interruptions.c ****         //                                                   49152
1733:..\src/interruptions.c **** 
1734:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1735:..\src/interruptions.c ****         // and update the variable only if the difference between
1736:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1737:..\src/interruptions.c **** 
1738:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1739:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1740:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1741:..\src/interruptions.c **** 
1742:..\src/interruptions.c ****         if (value_diff > 49152)
 5413              		.loc 1 1742 0
 5414 01ea BB69     		ldr	r3, [r7, #24]
 5415 01ec B3F5404F 		cmp	r3, #49152
 5416 01f0 19DD     		ble	.L356
1743:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5417              		.loc 1 1743 0
 5418 01f2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5419 01f4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5420 01f8 2448     		ldr	r0, .L379+40
 5421 01fa 3421     		movs	r1, #52
 5422 01fc 01FB02F1 		mul	r1, r1, r2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 129


 5423 0200 0144     		add	r1, r1, r0
 5424 0202 1944     		add	r1, r1, r3
 5425 0204 1831     		adds	r1, r1, #24
 5426 0206 91F90010 		ldrsb	r1, [r1]
 5427 020a C9B2     		uxtb	r1, r1
 5428 020c 0139     		subs	r1, r1, #1
 5429 020e C9B2     		uxtb	r1, r1
 5430 0210 4CB2     		sxtb	r4, r1
 5431 0212 1E49     		ldr	r1, .L379+40
 5432 0214 3420     		movs	r0, #52
 5433 0216 00FB02F2 		mul	r2, r0, r2
 5434 021a 0A44     		add	r2, r2, r1
 5435 021c 1344     		add	r3, r3, r2
 5436 021e 1833     		adds	r3, r3, #24
 5437 0220 2246     		mov	r2, r4
 5438 0222 1A70     		strb	r2, [r3]
 5439 0224 5CE0     		b	.L357
 5440              	.L356:
1744:..\src/interruptions.c ****         else{ 
1745:..\src/interruptions.c ****             if (value_diff < -49152)
 5441              		.loc 1 1745 0
 5442 0226 BB69     		ldr	r3, [r7, #24]
 5443 0228 13F5404F 		cmn	r3, #49152
 5444 022c 30DA     		bge	.L358
1746:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5445              		.loc 1 1746 0
 5446 022e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5447 0230 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5448 0234 1548     		ldr	r0, .L379+40
 5449 0236 3421     		movs	r1, #52
 5450 0238 01FB02F1 		mul	r1, r1, r2
 5451 023c 0144     		add	r1, r1, r0
 5452 023e 1944     		add	r1, r1, r3
 5453 0240 1831     		adds	r1, r1, #24
 5454 0242 91F90010 		ldrsb	r1, [r1]
 5455 0246 C9B2     		uxtb	r1, r1
 5456 0248 0131     		adds	r1, r1, #1
 5457 024a C9B2     		uxtb	r1, r1
 5458 024c 4CB2     		sxtb	r4, r1
 5459 024e 0F49     		ldr	r1, .L379+40
 5460 0250 3420     		movs	r0, #52
 5461 0252 00FB02F2 		mul	r2, r0, r2
 5462 0256 0A44     		add	r2, r2, r1
 5463 0258 1344     		add	r3, r3, r2
 5464 025a 1833     		adds	r3, r3, #24
 5465 025c 2246     		mov	r2, r4
 5466 025e 1A70     		strb	r2, [r3]
 5467 0260 3EE0     		b	.L357
 5468              	.L380:
 5469 0262 00BF     		.align	2
 5470              	.L379:
 5471 0264 00000000 		.word	reset_last_value_flag
 5472 0268 E0000000 		.word	last_value_encoder.10617
 5473 026c 00000000 		.word	N_Encoder_Line_Connected
 5474 0270 00000000 		.word	c_mem
 5475 0274 00000000 		.word	Encoder_Check
 5476 0278 00000000 		.word	Encoder_Value
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 130


 5477 027c 00000000 		.word	data_encoder_raw
 5478 0280 00000000 		.word	g_mem
 5479 0284 F8000000 		.word	comp_value_encoder.10618
 5480 0288 04000000 		.word	only_first_time.10620
 5481 028c 00000000 		.word	g_meas
 5482              	.L358:
1747:..\src/interruptions.c ****             else{
1748:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5483              		.loc 1 1748 0
 5484 0290 BB69     		ldr	r3, [r7, #24]
 5485 0292 002B     		cmp	r3, #0
 5486 0294 B8BF     		it	lt
 5487 0296 5B42     		rsblt	r3, r3, #0
 5488 0298 B3F5804F 		cmp	r3, #16384
 5489 029c 20DD     		ble	.L357
1749:..\src/interruptions.c ****                     error[n_line][index]++;
 5490              		.loc 1 1749 0
 5491 029e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5492 02a0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5493 02a4 9B48     		ldr	r0, .L381
 5494 02a6 1346     		mov	r3, r2
 5495 02a8 5B00     		lsls	r3, r3, #1
 5496 02aa 1344     		add	r3, r3, r2
 5497 02ac 0344     		add	r3, r3, r0
 5498 02ae 0B44     		add	r3, r3, r1
 5499 02b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5500 02b2 0133     		adds	r3, r3, #1
 5501 02b4 DCB2     		uxtb	r4, r3
 5502 02b6 9748     		ldr	r0, .L381
 5503 02b8 1346     		mov	r3, r2
 5504 02ba 5B00     		lsls	r3, r3, #1
 5505 02bc 1344     		add	r3, r3, r2
 5506 02be 0344     		add	r3, r3, r0
 5507 02c0 0B44     		add	r3, r3, r1
 5508 02c2 2246     		mov	r2, r4
 5509 02c4 1A70     		strb	r2, [r3]
1750:..\src/interruptions.c ****                                 
1751:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5510              		.loc 1 1751 0
 5511 02c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5512 02c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5513 02cc 9148     		ldr	r0, .L381
 5514 02ce 1346     		mov	r3, r2
 5515 02d0 5B00     		lsls	r3, r3, #1
 5516 02d2 1344     		add	r3, r3, r2
 5517 02d4 0344     		add	r3, r3, r0
 5518 02d6 0B44     		add	r3, r3, r1
 5519 02d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5520 02da 092B     		cmp	r3, #9
 5521 02dc 40F28C82 		bls	.L378
 5522              	.L357:
1752:..\src/interruptions.c ****                         // Discard
1753:..\src/interruptions.c ****                         return;
1754:..\src/interruptions.c ****                 }
1755:..\src/interruptions.c ****             }
1756:..\src/interruptions.c ****         }
1757:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 131


1758:..\src/interruptions.c ****         error[n_line][index] = 0;
 5523              		.loc 1 1758 0
 5524 02e0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5525 02e2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5526 02e6 8B48     		ldr	r0, .L381
 5527 02e8 1346     		mov	r3, r2
 5528 02ea 5B00     		lsls	r3, r3, #1
 5529 02ec 1344     		add	r3, r3, r2
 5530 02ee 0344     		add	r3, r3, r0
 5531 02f0 0B44     		add	r3, r3, r1
 5532 02f2 0022     		movs	r2, #0
 5533 02f4 1A70     		strb	r2, [r3]
1759:..\src/interruptions.c ****         
1760:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5534              		.loc 1 1760 0
 5535 02f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5536 02f8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5537 02fc 8648     		ldr	r0, .L381+4
 5538 02fe 1346     		mov	r3, r2
 5539 0300 5B00     		lsls	r3, r3, #1
 5540 0302 1344     		add	r3, r3, r2
 5541 0304 0B44     		add	r3, r3, r1
 5542 0306 FA69     		ldr	r2, [r7, #28]
 5543 0308 40F82320 		str	r2, [r0, r3, lsl #2]
1761:..\src/interruptions.c **** 
1762:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5544              		.loc 1 1762 0
 5545 030c FB69     		ldr	r3, [r7, #28]
 5546 030e BB62     		str	r3, [r7, #40]
1763:..\src/interruptions.c **** 
1764:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5547              		.loc 1 1764 0
 5548 0310 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5549 0312 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5550 0316 8149     		ldr	r1, .L381+8
 5551 0318 3420     		movs	r0, #52
 5552 031a 00FB02F2 		mul	r2, r0, r2
 5553 031e 0A44     		add	r2, r2, r1
 5554 0320 1344     		add	r3, r3, r2
 5555 0322 1833     		adds	r3, r3, #24
 5556 0324 93F90030 		ldrsb	r3, [r3]
 5557 0328 1B04     		lsls	r3, r3, #16
 5558 032a BA6A     		ldr	r2, [r7, #40]
 5559 032c 1344     		add	r3, r3, r2
 5560 032e BB62     		str	r3, [r7, #40]
1765:..\src/interruptions.c ****         
1766:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5561              		.loc 1 1766 0
 5562 0330 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5563 0332 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5564 0336 7A48     		ldr	r0, .L381+12
 5565 0338 1346     		mov	r3, r2
 5566 033a 5B00     		lsls	r3, r3, #1
 5567 033c 1344     		add	r3, r3, r2
 5568 033e 9B00     		lsls	r3, r3, #2
 5569 0340 0B44     		add	r3, r3, r1
 5570 0342 6833     		adds	r3, r3, #104
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 132


 5571 0344 9B00     		lsls	r3, r3, #2
 5572 0346 0344     		add	r3, r3, r0
 5573 0348 5B68     		ldr	r3, [r3, #4]	@ float
 5574 034a 4FF07E51 		mov	r1, #1065353216
 5575 034e 1846     		mov	r0, r3
 5576 0350 FFF7FEFF 		bl	__aeabi_fcmpeq
 5577 0354 0346     		mov	r3, r0
 5578 0356 002B     		cmp	r3, #0
 5579 0358 1AD1     		bne	.L360
1767:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5580              		.loc 1 1767 0
 5581 035a B86A     		ldr	r0, [r7, #40]
 5582 035c FFF7FEFF 		bl	__aeabi_i2f
 5583 0360 0446     		mov	r4, r0
 5584 0362 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5585 0364 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5586 0368 6D48     		ldr	r0, .L381+12
 5587 036a 1346     		mov	r3, r2
 5588 036c 5B00     		lsls	r3, r3, #1
 5589 036e 1344     		add	r3, r3, r2
 5590 0370 9B00     		lsls	r3, r3, #2
 5591 0372 0B44     		add	r3, r3, r1
 5592 0374 6833     		adds	r3, r3, #104
 5593 0376 9B00     		lsls	r3, r3, #2
 5594 0378 0344     		add	r3, r3, r0
 5595 037a 5B68     		ldr	r3, [r3, #4]	@ float
 5596 037c 1946     		mov	r1, r3
 5597 037e 2046     		mov	r0, r4
 5598 0380 FFF7FEFF 		bl	__aeabi_fmul
 5599 0384 0346     		mov	r3, r0
 5600 0386 1846     		mov	r0, r3
 5601 0388 FFF7FEFF 		bl	__aeabi_f2iz
 5602 038c 0346     		mov	r3, r0
 5603 038e BB62     		str	r3, [r7, #40]
 5604              	.L360:
1768:..\src/interruptions.c ****         }
1769:..\src/interruptions.c **** 
1770:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5605              		.loc 1 1770 0
 5606 0390 634B     		ldr	r3, .L381+12
 5607 0392 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5608 0396 002B     		cmp	r3, #0
 5609 0398 0BD1     		bne	.L362
1771:..\src/interruptions.c ****             // Right / Left hand turn
1772:..\src/interruptions.c ****             if (index == 0) {
 5610              		.loc 1 1772 0
 5611 039a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5612 039e 002B     		cmp	r3, #0
 5613 03a0 07D1     		bne	.L362
1773:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5614              		.loc 1 1773 0
 5615 03a2 5F4B     		ldr	r3, .L381+12
 5616 03a4 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5617 03a8 002B     		cmp	r3, #0
 5618 03aa 02D1     		bne	.L362
1774:..\src/interruptions.c ****                     value_encoder *= -1;        
 5619              		.loc 1 1774 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 133


 5620 03ac BB6A     		ldr	r3, [r7, #40]
 5621 03ae 5B42     		negs	r3, r3
 5622 03b0 BB62     		str	r3, [r7, #40]
 5623              	.L362:
1775:..\src/interruptions.c ****                 }
1776:..\src/interruptions.c ****             }
1777:..\src/interruptions.c ****         }
1778:..\src/interruptions.c ****  
1779:..\src/interruptions.c **** 
1780:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5624              		.loc 1 1780 0
 5625 03b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5626 03b4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5627 03b8 5848     		ldr	r0, .L381+8
 5628 03ba 1346     		mov	r3, r2
 5629 03bc 5B00     		lsls	r3, r3, #1
 5630 03be 1344     		add	r3, r3, r2
 5631 03c0 9B00     		lsls	r3, r3, #2
 5632 03c2 1344     		add	r3, r3, r2
 5633 03c4 0B44     		add	r3, r3, r1
 5634 03c6 BA6A     		ldr	r2, [r7, #40]
 5635 03c8 40F82320 		str	r2, [r0, r3, lsl #2]
1781:..\src/interruptions.c ****     
1782:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5636              		.loc 1 1782 0
 5637 03cc BA6A     		ldr	r2, [r7, #40]
 5638 03ce 1346     		mov	r3, r2
 5639 03d0 9B00     		lsls	r3, r3, #2
 5640 03d2 1344     		add	r3, r3, r2
 5641 03d4 5B00     		lsls	r3, r3, #1
 5642 03d6 9918     		adds	r1, r3, r2
 5643 03d8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5644 03da 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5645 03de 514C     		ldr	r4, .L381+16
 5646 03e0 1346     		mov	r3, r2
 5647 03e2 5B00     		lsls	r3, r3, #1
 5648 03e4 1344     		add	r3, r3, r2
 5649 03e6 0344     		add	r3, r3, r0
 5650 03e8 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5651 03ec 6FF01102 		mvn	r2, #17
 5652 03f0 02FB03F3 		mul	r3, r2, r3
 5653 03f4 1944     		add	r1, r1, r3
 5654 03f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5655 03f8 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5656 03fc 4A4C     		ldr	r4, .L381+20
 5657 03fe 1346     		mov	r3, r2
 5658 0400 5B00     		lsls	r3, r3, #1
 5659 0402 1344     		add	r3, r3, r2
 5660 0404 0344     		add	r3, r3, r0
 5661 0406 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5662 040a 1346     		mov	r3, r2
 5663 040c DB00     		lsls	r3, r3, #3
 5664 040e 1344     		add	r3, r3, r2
 5665 0410 1944     		add	r1, r1, r3
 5666 0412 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5667 0414 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5668 0418 444C     		ldr	r4, .L381+24
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 134


 5669 041a 1346     		mov	r3, r2
 5670 041c 5B00     		lsls	r3, r3, #1
 5671 041e 1344     		add	r3, r3, r2
 5672 0420 0344     		add	r3, r3, r0
 5673 0422 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5674 0426 5B00     		lsls	r3, r3, #1
 5675 0428 C81A     		subs	r0, r1, r3
 5676 042a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5677 042e DB00     		lsls	r3, r3, #3
 5678 0430 3F4A     		ldr	r2, .L381+28
 5679 0432 1344     		add	r3, r3, r2
 5680 0434 1946     		mov	r1, r3
 5681 0436 FFF7FEFF 		bl	filter
 5682 043a 0346     		mov	r3, r0
 5683 043c 1BB2     		sxth	r3, r3
 5684 043e 7B61     		str	r3, [r7, #20]
1783:..\src/interruptions.c **** 
1784:..\src/interruptions.c ****         //Update current speed
1785:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5685              		.loc 1 1785 0
 5686 0440 7869     		ldr	r0, [r7, #20]
 5687 0442 FFF7FEFF 		bl	__aeabi_i2f
 5688 0446 0446     		mov	r4, r0
 5689 0448 3A4B     		ldr	r3, .L381+32
 5690 044a 1B68     		ldr	r3, [r3]	@ float
 5691 044c 3A49     		ldr	r1, .L381+36
 5692 044e 1846     		mov	r0, r3
 5693 0450 FFF7FEFF 		bl	__aeabi_fmul
 5694 0454 0346     		mov	r3, r0
 5695 0456 1946     		mov	r1, r3
 5696 0458 2046     		mov	r0, r4
 5697 045a FFF7FEFF 		bl	__aeabi_fdiv
 5698 045e 0346     		mov	r3, r0
 5699 0460 1846     		mov	r0, r3
 5700 0462 FFF7FEFF 		bl	__aeabi_f2iz
 5701 0466 0346     		mov	r3, r0
 5702 0468 7B61     		str	r3, [r7, #20]
1786:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5703              		.loc 1 1786 0
 5704 046a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5705 046c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5706 0470 2A48     		ldr	r0, .L381+8
 5707 0472 1346     		mov	r3, r2
 5708 0474 5B00     		lsls	r3, r3, #1
 5709 0476 1344     		add	r3, r3, r2
 5710 0478 9B00     		lsls	r3, r3, #2
 5711 047a 1344     		add	r3, r3, r2
 5712 047c 0B44     		add	r3, r3, r1
 5713 047e 0633     		adds	r3, r3, #6
 5714 0480 9B00     		lsls	r3, r3, #2
 5715 0482 0344     		add	r3, r3, r0
 5716 0484 7A69     		ldr	r2, [r7, #20]
 5717 0486 5A60     		str	r2, [r3, #4]
1787:..\src/interruptions.c **** 
1788:..\src/interruptions.c ****         // update old velocity and acceleration values
1789:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5718              		.loc 1 1789 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 135


 5719 0488 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5720 048a 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5721 048e F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5722 0490 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5723 0494 244D     		ldr	r5, .L381+20
 5724 0496 0B46     		mov	r3, r1
 5725 0498 5B00     		lsls	r3, r3, #1
 5726 049a 0B44     		add	r3, r3, r1
 5727 049c 2344     		add	r3, r3, r4
 5728 049e 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5729 04a2 224C     		ldr	r4, .L381+24
 5730 04a4 1346     		mov	r3, r2
 5731 04a6 5B00     		lsls	r3, r3, #1
 5732 04a8 1344     		add	r3, r3, r2
 5733 04aa 0344     		add	r3, r3, r0
 5734 04ac 44F82310 		str	r1, [r4, r3, lsl #2]
1790:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5735              		.loc 1 1790 0
 5736 04b0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5737 04b2 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5738 04b6 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5739 04b8 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5740 04bc 194D     		ldr	r5, .L381+16
 5741 04be 0B46     		mov	r3, r1
 5742 04c0 5B00     		lsls	r3, r3, #1
 5743 04c2 0B44     		add	r3, r3, r1
 5744 04c4 2344     		add	r3, r3, r4
 5745 04c6 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5746 04ca 174C     		ldr	r4, .L381+20
 5747 04cc 1346     		mov	r3, r2
 5748 04ce 5B00     		lsls	r3, r3, #1
 5749 04d0 1344     		add	r3, r3, r2
 5750 04d2 0344     		add	r3, r3, r0
 5751 04d4 44F82310 		str	r1, [r4, r3, lsl #2]
1791:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5752              		.loc 1 1791 0
 5753 04d8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5754 04da 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5755 04de 1148     		ldr	r0, .L381+16
 5756 04e0 1346     		mov	r3, r2
 5757 04e2 5B00     		lsls	r3, r3, #1
 5758 04e4 1344     		add	r3, r3, r2
 5759 04e6 0B44     		add	r3, r3, r1
 5760 04e8 BA6A     		ldr	r2, [r7, #40]
 5761 04ea 40F82320 		str	r2, [r0, r3, lsl #2]
1792:..\src/interruptions.c **** 
1793:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1794:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5762              		.loc 1 1794 0
 5763 04ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5764 04f0 124A     		ldr	r2, .L381+40
 5765 04f2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5766 04f4 002B     		cmp	r3, #0
 5767 04f6 40F03B81 		bne	.L363
1795:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 5768              		.loc 1 1795 0
 5769 04fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 136


 5770 04fc 104A     		ldr	r2, .L381+44
 5771 04fe D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5772 0500 212B     		cmp	r3, #33
 5773 0502 1FD8     		bhi	.L364
1796:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5774              		.loc 1 1796 0
 5775 0504 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5776 0506 0E4A     		ldr	r2, .L381+44
 5777 0508 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5778 050a 0132     		adds	r2, r2, #1
 5779 050c D1B2     		uxtb	r1, r2
 5780 050e 0C4A     		ldr	r2, .L381+44
 5781 0510 D154     		strb	r1, [r2, r3]
 5782 0512 2DE1     		b	.L363
 5783              	.L382:
 5784              		.align	2
 5785              	.L381:
 5786 0514 10010000 		.word	error.10619
 5787 0518 E0000000 		.word	last_value_encoder.10617
 5788 051c 00000000 		.word	g_meas
 5789 0520 00000000 		.word	c_mem
 5790 0524 18010000 		.word	v_value.10625
 5791 0528 30010000 		.word	vv_value.10626
 5792 052c 48010000 		.word	vvv_value.10627
 5793 0530 00000000 		.word	filt_vel
 5794 0534 00000000 		.word	cycle_time
 5795 0538 0000C040 		.word	1086324736
 5796 053c 60010000 		.word	pos_reconstruct.10624
 5797 0540 64010000 		.word	one_time_execute.10622
 5798              	.L364:
1797:..\src/interruptions.c ****             else {
1798:..\src/interruptions.c ****                 //Double encoder translation
1799:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5799              		.loc 1 1799 0
 5800 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5801 0546 AE49     		ldr	r1, .L383
 5802 0548 1346     		mov	r3, r2
 5803 054a 5B00     		lsls	r3, r3, #1
 5804 054c 1344     		add	r3, r3, r2
 5805 054e 1B01     		lsls	r3, r3, #4
 5806 0550 0B44     		add	r3, r3, r1
 5807 0552 03F5D873 		add	r3, r3, #432
 5808 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5809 0558 002B     		cmp	r3, #0
 5810 055a 5ED0     		beq	.L365
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5811              		.loc 1 1800 0
 5812 055c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5813 055e A949     		ldr	r1, .L383+4
 5814 0560 1346     		mov	r3, r2
 5815 0562 5B00     		lsls	r3, r3, #1
 5816 0564 1344     		add	r3, r3, r2
 5817 0566 9B00     		lsls	r3, r3, #2
 5818 0568 0B44     		add	r3, r3, r1
 5819 056a 1868     		ldr	r0, [r3]
 5820 056c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5821 056e A549     		ldr	r1, .L383+4
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 137


 5822 0570 1346     		mov	r3, r2
 5823 0572 5B00     		lsls	r3, r3, #1
 5824 0574 1344     		add	r3, r3, r2
 5825 0576 9B00     		lsls	r3, r3, #2
 5826 0578 0B44     		add	r3, r3, r1
 5827 057a 0433     		adds	r3, r3, #4
 5828 057c 1C68     		ldr	r4, [r3]
1801:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5829              		.loc 1 1801 0
 5830 057e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5831 0580 9F49     		ldr	r1, .L383
 5832 0582 1346     		mov	r3, r2
 5833 0584 5B00     		lsls	r3, r3, #1
 5834 0586 1344     		add	r3, r3, r2
 5835 0588 1B01     		lsls	r3, r3, #4
 5836 058a 0B44     		add	r3, r3, r1
 5837 058c 03F2B513 		addw	r3, r3, #437
 5838 0590 93F90030 		ldrsb	r3, [r3]
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5839              		.loc 1 1800 0
 5840 0594 1D46     		mov	r5, r3
 5841              		.loc 1 1801 0
 5842 0596 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5843 0598 9949     		ldr	r1, .L383
 5844 059a 1346     		mov	r3, r2
 5845 059c 5B00     		lsls	r3, r3, #1
 5846 059e 1344     		add	r3, r3, r2
 5847 05a0 1B01     		lsls	r3, r3, #4
 5848 05a2 0B44     		add	r3, r3, r1
 5849 05a4 03F5DB73 		add	r3, r3, #438
 5850 05a8 93F90030 		ldrsb	r3, [r3]
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5851              		.loc 1 1800 0
 5852 05ac 1E46     		mov	r6, r3
 5853              		.loc 1 1801 0
 5854 05ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5855 05b0 9349     		ldr	r1, .L383
 5856 05b2 1346     		mov	r3, r2
 5857 05b4 5B00     		lsls	r3, r3, #1
 5858 05b6 1344     		add	r3, r3, r2
 5859 05b8 1B01     		lsls	r3, r3, #4
 5860 05ba 0B44     		add	r3, r3, r1
 5861 05bc 03F2B713 		addw	r3, r3, #439
 5862 05c0 93F90030 		ldrsb	r3, [r3]
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5863              		.loc 1 1800 0
 5864 05c4 0093     		str	r3, [sp]
 5865 05c6 3346     		mov	r3, r6
 5866 05c8 2A46     		mov	r2, r5
 5867 05ca 2146     		mov	r1, r4
 5868 05cc FFF7FEFF 		bl	calc_turns_fcn
 5869 05d0 0346     		mov	r3, r0
 5870 05d2 87F82730 		strb	r3, [r7, #39]
1802:..\src/interruptions.c **** 
1803:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5871              		.loc 1 1803 0
 5872 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 138


 5873 05d8 8949     		ldr	r1, .L383
 5874 05da 1346     		mov	r3, r2
 5875 05dc 5B00     		lsls	r3, r3, #1
 5876 05de 1344     		add	r3, r3, r2
 5877 05e0 1B01     		lsls	r3, r3, #4
 5878 05e2 0B44     		add	r3, r3, r1
 5879 05e4 03F5D273 		add	r3, r3, #420
 5880 05e8 1B68     		ldr	r3, [r3]	@ float
 5881 05ea 4FF00001 		mov	r1, #0
 5882 05ee 1846     		mov	r0, r3
 5883 05f0 FFF7FEFF 		bl	__aeabi_fcmplt
 5884 05f4 0346     		mov	r3, r0
 5885 05f6 002B     		cmp	r3, #0
 5886 05f8 05D0     		beq	.L366
1804:..\src/interruptions.c ****                         init_rot = -init_rot;
 5887              		.loc 1 1804 0
 5888 05fa 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5889 05fe 5B42     		negs	r3, r3
 5890 0600 DBB2     		uxtb	r3, r3
 5891 0602 87F82730 		strb	r3, [r7, #39]
 5892              	.L366:
1805:..\src/interruptions.c ****                     
1806:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5893              		.loc 1 1806 0
 5894 0606 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5895 0608 7F4A     		ldr	r2, .L383+8
 5896 060a 3421     		movs	r1, #52
 5897 060c 01FB03F3 		mul	r3, r1, r3
 5898 0610 1344     		add	r3, r3, r2
 5899 0612 1833     		adds	r3, r3, #24
 5900 0614 97F82720 		ldrb	r2, [r7, #39]
 5901 0618 1A70     		strb	r2, [r3]
 5902              	.L365:
1807:..\src/interruptions.c ****                 }    
1808:..\src/interruptions.c **** 
1809:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5903              		.loc 1 1809 0
 5904 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5905 061c 7849     		ldr	r1, .L383
 5906 061e 1346     		mov	r3, r2
 5907 0620 5B00     		lsls	r3, r3, #1
 5908 0622 1344     		add	r3, r3, r2
 5909 0624 1B01     		lsls	r3, r3, #4
 5910 0626 0B44     		add	r3, r3, r1
 5911 0628 03F5D273 		add	r3, r3, #420
 5912 062c 1B68     		ldr	r3, [r3]	@ float
 5913 062e 4FF07E51 		mov	r1, #1065353216
 5914 0632 1846     		mov	r0, r3
 5915 0634 FFF7FEFF 		bl	__aeabi_fcmpeq
 5916 0638 0346     		mov	r3, r0
 5917 063a 002B     		cmp	r3, #0
 5918 063c 22D1     		bne	.L368
1810:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5919              		.loc 1 1810 0
 5920 063e FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5921 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5922 0642 714A     		ldr	r2, .L383+8
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 139


 5923 0644 3421     		movs	r1, #52
 5924 0646 01FB03F3 		mul	r3, r1, r3
 5925 064a 1344     		add	r3, r3, r2
 5926 064c 1B68     		ldr	r3, [r3]
 5927 064e 1846     		mov	r0, r3
 5928 0650 FFF7FEFF 		bl	__aeabi_i2f
 5929 0654 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5930 0656 6A49     		ldr	r1, .L383
 5931 0658 1346     		mov	r3, r2
 5932 065a 5B00     		lsls	r3, r3, #1
 5933 065c 1344     		add	r3, r3, r2
 5934 065e 1B01     		lsls	r3, r3, #4
 5935 0660 0B44     		add	r3, r3, r1
 5936 0662 03F5D273 		add	r3, r3, #420
 5937 0666 1B68     		ldr	r3, [r3]	@ float
 5938 0668 1946     		mov	r1, r3
 5939 066a FFF7FEFF 		bl	__aeabi_fdiv
 5940 066e 0346     		mov	r3, r0
 5941 0670 1846     		mov	r0, r3
 5942 0672 FFF7FEFF 		bl	__aeabi_f2iz
 5943 0676 0146     		mov	r1, r0
 5944 0678 634A     		ldr	r2, .L383+8
 5945 067a 3423     		movs	r3, #52
 5946 067c 03FB04F3 		mul	r3, r3, r4
 5947 0680 1344     		add	r3, r3, r2
 5948 0682 1960     		str	r1, [r3]
 5949              	.L368:
1811:..\src/interruptions.c ****                 
1812:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5950              		.loc 1 1812 0
 5951 0684 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5952 0686 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5953 0688 5F49     		ldr	r1, .L383+8
 5954 068a 3420     		movs	r0, #52
 5955 068c 00FB02F2 		mul	r2, r0, r2
 5956 0690 0A44     		add	r2, r2, r1
 5957 0692 1168     		ldr	r1, [r2]
 5958 0694 97F92720 		ldrsb	r2, [r7, #39]
 5959 0698 1204     		lsls	r2, r2, #16
 5960 069a 0A44     		add	r2, r2, r1
 5961 069c 5A49     		ldr	r1, .L383+8
 5962 069e 3420     		movs	r0, #52
 5963 06a0 00FB03F3 		mul	r3, r0, r3
 5964 06a4 0B44     		add	r3, r3, r1
 5965 06a6 1A60     		str	r2, [r3]
1813:..\src/interruptions.c ****             
1814:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5966              		.loc 1 1814 0
 5967 06a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5968 06aa 5549     		ldr	r1, .L383
 5969 06ac 1346     		mov	r3, r2
 5970 06ae 5B00     		lsls	r3, r3, #1
 5971 06b0 1344     		add	r3, r3, r2
 5972 06b2 1B01     		lsls	r3, r3, #4
 5973 06b4 0B44     		add	r3, r3, r1
 5974 06b6 03F5D273 		add	r3, r3, #420
 5975 06ba 1B68     		ldr	r3, [r3]	@ float
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 140


 5976 06bc 4FF07E51 		mov	r1, #1065353216
 5977 06c0 1846     		mov	r0, r3
 5978 06c2 FFF7FEFF 		bl	__aeabi_fcmpeq
 5979 06c6 0346     		mov	r3, r0
 5980 06c8 002B     		cmp	r3, #0
 5981 06ca 22D1     		bne	.L370
1815:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
 5982              		.loc 1 1815 0
 5983 06cc FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5984 06ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5985 06d0 4D4A     		ldr	r2, .L383+8
 5986 06d2 3421     		movs	r1, #52
 5987 06d4 01FB03F3 		mul	r3, r1, r3
 5988 06d8 1344     		add	r3, r3, r2
 5989 06da 1B68     		ldr	r3, [r3]
 5990 06dc 1846     		mov	r0, r3
 5991 06de FFF7FEFF 		bl	__aeabi_i2f
 5992 06e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5993 06e4 4649     		ldr	r1, .L383
 5994 06e6 1346     		mov	r3, r2
 5995 06e8 5B00     		lsls	r3, r3, #1
 5996 06ea 1344     		add	r3, r3, r2
 5997 06ec 1B01     		lsls	r3, r3, #4
 5998 06ee 0B44     		add	r3, r3, r1
 5999 06f0 03F5D273 		add	r3, r3, #420
 6000 06f4 1B68     		ldr	r3, [r3]	@ float
 6001 06f6 1946     		mov	r1, r3
 6002 06f8 FFF7FEFF 		bl	__aeabi_fmul
 6003 06fc 0346     		mov	r3, r0
 6004 06fe 1846     		mov	r0, r3
 6005 0700 FFF7FEFF 		bl	__aeabi_f2iz
 6006 0704 0146     		mov	r1, r0
 6007 0706 404A     		ldr	r2, .L383+8
 6008 0708 3423     		movs	r3, #52
 6009 070a 03FB04F3 		mul	r3, r3, r4
 6010 070e 1344     		add	r3, r3, r2
 6011 0710 1960     		str	r1, [r3]
 6012              	.L370:
1816:..\src/interruptions.c ****             
1817:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6013              		.loc 1 1817 0
 6014 0712 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6015 0714 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6016 0716 3C49     		ldr	r1, .L383+8
 6017 0718 3420     		movs	r0, #52
 6018 071a 00FB02F2 		mul	r2, r0, r2
 6019 071e 0A44     		add	r2, r2, r1
 6020 0720 1268     		ldr	r2, [r2]
 6021 0722 3A49     		ldr	r1, .L383+12
 6022 0724 1B01     		lsls	r3, r3, #4
 6023 0726 0B44     		add	r3, r3, r1
 6024 0728 1A60     		str	r2, [r3]
1818:..\src/interruptions.c **** 
1819:..\src/interruptions.c ****                 // If necessary activate motor
1820:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6025              		.loc 1 1820 0
 6026 072a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 141


 6027 072c 384A     		ldr	r2, .L383+16
 6028 072e 0121     		movs	r1, #1
 6029 0730 D154     		strb	r1, [r2, r3]
1821:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1822:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6030              		.loc 1 1822 0
 6031 0732 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6032 0734 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6033 0736 3248     		ldr	r0, .L383
 6034 0738 1346     		mov	r3, r2
 6035 073a DB00     		lsls	r3, r3, #3
 6036 073c 9B1A     		subs	r3, r3, r2
 6037 073e 1B01     		lsls	r3, r3, #4
 6038 0740 0344     		add	r3, r3, r0
 6039 0742 E033     		adds	r3, r3, #224
 6040 0744 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6041 0746 314A     		ldr	r2, .L383+12
 6042 0748 0B01     		lsls	r3, r1, #4
 6043 074a 1344     		add	r3, r3, r2
 6044 074c 0C33     		adds	r3, r3, #12
 6045 074e 0246     		mov	r2, r0
 6046 0750 1A70     		strb	r2, [r3]
1823:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6047              		.loc 1 1823 0
 6048 0752 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6049 0754 2D4A     		ldr	r2, .L383+12
 6050 0756 1B01     		lsls	r3, r3, #4
 6051 0758 1344     		add	r3, r3, r2
 6052 075a 0C33     		adds	r3, r3, #12
 6053 075c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6054 075e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6055 0760 1146     		mov	r1, r2
 6056 0762 1846     		mov	r0, r3
 6057 0764 FFF7FEFF 		bl	enable_motor
1824:..\src/interruptions.c ****                 
1825:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6058              		.loc 1 1825 0
 6059 0768 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6060 076a 2A4A     		ldr	r2, .L383+20
 6061 076c 0121     		movs	r1, #1
 6062 076e D154     		strb	r1, [r2, r3]
 6063              	.L363:
1698:..\src/interruptions.c ****         
 6064              		.loc 1 1698 0 discriminator 2
 6065 0770 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6066 0774 0133     		adds	r3, r3, #1
 6067 0776 87F82F30 		strb	r3, [r7, #47]
 6068              	.L352:
1698:..\src/interruptions.c ****         
 6069              		.loc 1 1698 0 is_stmt 0 discriminator 1
 6070 077a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6071 077e 022B     		cmp	r3, #2
 6072 0780 7FF6C1AC 		bls	.L372
1826:..\src/interruptions.c ****             }
1827:..\src/interruptions.c ****         }
1828:..\src/interruptions.c ****     } 
1829:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 142


1830:..\src/interruptions.c **** 	
1831:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1832:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6073              		.loc 1 1832 0 is_stmt 1
 6074 0784 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6075 0786 224A     		ldr	r2, .L383+16
 6076 0788 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6077 078a 002B     		cmp	r3, #0
 6078 078c 35D0     		beq	.L343
1833:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6079              		.loc 1 1833 0
 6080 078e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6081 0790 214A     		ldr	r2, .L383+24
 6082 0792 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6083 0796 0132     		adds	r2, r2, #1
 6084 0798 1F49     		ldr	r1, .L383+24
 6085 079a 41F82320 		str	r2, [r1, r3, lsl #2]
1834:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6086              		.loc 1 1834 0
 6087 079e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6088 07a0 1D4A     		ldr	r2, .L383+24
 6089 07a2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6090 07a6 B3F5FA5F 		cmp	r3, #8000
 6091 07aa 26D3     		bcc	.L343
1835:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6092              		.loc 1 1835 0
 6093 07ac BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6094 07ae 174A     		ldr	r2, .L383+12
 6095 07b0 1B01     		lsls	r3, r3, #4
 6096 07b2 1344     		add	r3, r3, r2
 6097 07b4 0022     		movs	r2, #0
 6098 07b6 1A60     		str	r2, [r3]
1836:..\src/interruptions.c ****             
1837:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1838:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6099              		.loc 1 1838 0
 6100 07b8 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6101 07ba BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6102 07bc 1048     		ldr	r0, .L383
 6103 07be 1346     		mov	r3, r2
 6104 07c0 DB00     		lsls	r3, r3, #3
 6105 07c2 9B1A     		subs	r3, r3, r2
 6106 07c4 1B01     		lsls	r3, r3, #4
 6107 07c6 0344     		add	r3, r3, r0
 6108 07c8 E033     		adds	r3, r3, #224
 6109 07ca 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6110 07cc 0F4A     		ldr	r2, .L383+12
 6111 07ce 0B01     		lsls	r3, r1, #4
 6112 07d0 1344     		add	r3, r3, r2
 6113 07d2 0C33     		adds	r3, r3, #12
 6114 07d4 0246     		mov	r2, r0
 6115 07d6 1A70     		strb	r2, [r3]
1839:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6116              		.loc 1 1839 0
 6117 07d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6118 07da 0C4A     		ldr	r2, .L383+12
 6119 07dc 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 143


 6120 07de 1344     		add	r3, r3, r2
 6121 07e0 0C33     		adds	r3, r3, #12
 6122 07e2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6123 07e4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6124 07e6 1146     		mov	r1, r2
 6125 07e8 1846     		mov	r0, r3
 6126 07ea FFF7FEFF 		bl	enable_motor
1840:..\src/interruptions.c ****                         
1841:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6127              		.loc 1 1841 0
 6128 07ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6129 07f0 074A     		ldr	r2, .L383+16
 6130 07f2 0021     		movs	r1, #0
 6131 07f4 D154     		strb	r1, [r2, r3]
 6132 07f6 00E0     		b	.L343
 6133              	.L378:
1753:..\src/interruptions.c ****                 }
 6134              		.loc 1 1753 0
 6135 07f8 00BF     		nop
 6136              	.L343:
1842:..\src/interruptions.c ****         }
1843:..\src/interruptions.c ****     }
1844:..\src/interruptions.c ****  
1845:..\src/interruptions.c **** }
 6137              		.loc 1 1845 0
 6138 07fa 3437     		adds	r7, r7, #52
 6139              		.cfi_def_cfa_offset 20
 6140 07fc BD46     		mov	sp, r7
 6141              		.cfi_def_cfa_register 13
 6142              		@ sp needed
 6143 07fe F0BD     		pop	{r4, r5, r6, r7, pc}
 6144              	.L384:
 6145              		.align	2
 6146              	.L383:
 6147 0800 00000000 		.word	c_mem
 6148 0804 F8000000 		.word	comp_value_encoder.10618
 6149 0808 00000000 		.word	g_meas
 6150 080c 00000000 		.word	g_refNew
 6151 0810 68010000 		.word	safe_startup_motor_activation.10621
 6152 0814 60010000 		.word	pos_reconstruct.10624
 6153 0818 6C010000 		.word	count_startup_motor.10623
 6154              		.cfi_endproc
 6155              	.LFE73:
 6156              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6157              		.section	.text.analog_read_end,"ax",%progbits
 6158              		.align	2
 6159              		.global	analog_read_end
 6160              		.thumb
 6161              		.thumb_func
 6162              		.type	analog_read_end, %function
 6163              	analog_read_end:
 6164              	.LFB74:
1846:..\src/interruptions.c **** 
1847:..\src/interruptions.c **** //==============================================================================
1848:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1849:..\src/interruptions.c **** //==============================================================================
1850:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 144


1851:..\src/interruptions.c **** void analog_read_end() {
 6165              		.loc 1 1851 0
 6166              		.cfi_startproc
 6167              		@ args = 0, pretend = 0, frame = 8
 6168              		@ frame_needed = 1, uses_anonymous_args = 0
 6169 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6170              		.cfi_def_cfa_offset 20
 6171              		.cfi_offset 4, -20
 6172              		.cfi_offset 5, -16
 6173              		.cfi_offset 6, -12
 6174              		.cfi_offset 7, -8
 6175              		.cfi_offset 14, -4
 6176 0002 83B0     		sub	sp, sp, #12
 6177              		.cfi_def_cfa_offset 32
 6178 0004 00AF     		add	r7, sp, #0
 6179              		.cfi_def_cfa_register 7
1852:..\src/interruptions.c **** 
1853:..\src/interruptions.c ****     /* =========================================================================
1854:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1855:..\src/interruptions.c ****     /
1856:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1857:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1858:..\src/interruptions.c ****     /
1859:..\src/interruptions.c ****     /   Definition:
1860:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1861:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1862:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1863:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1864:..\src/interruptions.c ****     /
1865:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1866:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1867:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1868:..\src/interruptions.c ****     /  =========================================================================
1869:..\src/interruptions.c ****     */
1870:..\src/interruptions.c **** 
1871:..\src/interruptions.c ****     int32 CYDATA i_aux;
1872:..\src/interruptions.c **** 
1873:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1874:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1875:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1876:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1877:..\src/interruptions.c ****     static int32 UD_mean_value;
1878:..\src/interruptions.c ****     static int32 LR_mean_value;
1879:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1880:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1881:..\src/interruptions.c ****     static uint16 count = 0;
1882:..\src/interruptions.c ****     static uint32 v_count = 0;
1883:..\src/interruptions.c ****     static uint8 idx = 0;
1884:..\src/interruptions.c ****     
1885:..\src/interruptions.c ****     // Wait for conversion end
1886:..\src/interruptions.c ****     
1887:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6180              		.loc 1 1887 0
 6181 0006 08E0     		b	.L386
 6182              	.L387:
1888:..\src/interruptions.c ****         
1889:..\src/interruptions.c ****         if (interrupt_flag){
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 145


 6183              		.loc 1 1889 0
 6184 0008 A84B     		ldr	r3, .L540
 6185 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6186 000c 002B     		cmp	r3, #0
 6187 000e 04D0     		beq	.L386
1890:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6188              		.loc 1 1890 0
 6189 0010 A64B     		ldr	r3, .L540
 6190 0012 0022     		movs	r2, #0
 6191 0014 1A70     		strb	r2, [r3]
1891:..\src/interruptions.c ****             interrupt_manager();
 6192              		.loc 1 1891 0
 6193 0016 FFF7FEFF 		bl	interrupt_manager
 6194              	.L386:
1887:..\src/interruptions.c ****         
 6195              		.loc 1 1887 0
 6196 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6197 001e 0346     		mov	r3, r0
 6198 0020 002B     		cmp	r3, #0
 6199 0022 F1D0     		beq	.L387
1892:..\src/interruptions.c ****         }
1893:..\src/interruptions.c ****     }
1894:..\src/interruptions.c ****     
1895:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1896:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1897:..\src/interruptions.c ****         // Read pressure in any case
1898:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1899:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1900:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1901:..\src/interruptions.c ****     }
1902:..\src/interruptions.c **** #endif
1903:..\src/interruptions.c ****  
1904:..\src/interruptions.c ****     // Convert tension read
1905:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6200              		.loc 1 1905 0
 6201 0024 A24B     		ldr	r3, .L540+4
 6202 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6203 002a 022B     		cmp	r3, #2
 6204 002c 04D1     		bne	.L388
1906:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6205              		.loc 1 1906 0
 6206 002e A14B     		ldr	r3, .L540+8
 6207 0030 41F28832 		movw	r2, #5000
 6208 0034 1A60     		str	r2, [r3]
 6209 0036 0BE0     		b	.L389
 6210              	.L388:
1907:..\src/interruptions.c ****     }
1908:..\src/interruptions.c ****     else {
1909:..\src/interruptions.c ****         dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6211              		.loc 1 1909 0
 6212 0038 9F4B     		ldr	r3, .L540+12
 6213 003a B3F90030 		ldrsh	r3, [r3]
 6214 003e A3F25563 		subw	r3, r3, #1621
 6215 0042 40F2C672 		movw	r2, #1990
 6216 0046 02FB03F3 		mul	r3, r2, r3
 6217 004a DB11     		asrs	r3, r3, #7
 6218 004c 994A     		ldr	r2, .L540+8
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 146


 6219 004e 1360     		str	r3, [r2]
 6220              	.L389:
1910:..\src/interruptions.c ****     }
1911:..\src/interruptions.c ****     
1912:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1913:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6221              		.loc 1 1913 0
 6222 0050 9A4B     		ldr	r3, .L540+16
 6223 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6224 0054 042B     		cmp	r3, #4
 6225 0056 0BD9     		bls	.L390
1914:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6226              		.loc 1 1914 0
 6227 0058 974B     		ldr	r3, .L540+12
 6228 005a B3F90830 		ldrsh	r3, [r3, #8]
 6229 005e A3F25563 		subw	r3, r3, #1621
 6230 0062 40F2C672 		movw	r2, #1990
 6231 0066 02FB03F3 		mul	r3, r2, r3
 6232 006a DB11     		asrs	r3, r3, #7
 6233 006c 914A     		ldr	r2, .L540+8
 6234 006e 5360     		str	r3, [r2, #4]
 6235              	.L390:
1915:..\src/interruptions.c ****     }
1916:..\src/interruptions.c ****     
1917:..\src/interruptions.c ****     if (interrupt_flag){
 6236              		.loc 1 1917 0
 6237 0070 8E4B     		ldr	r3, .L540
 6238 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6239 0074 002B     		cmp	r3, #0
 6240 0076 04D0     		beq	.L391
1918:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6241              		.loc 1 1918 0
 6242 0078 8C4B     		ldr	r3, .L540
 6243 007a 0022     		movs	r2, #0
 6244 007c 1A70     		strb	r2, [r3]
1919:..\src/interruptions.c ****         interrupt_manager();
 6245              		.loc 1 1919 0
 6246 007e FFF7FEFF 		bl	interrupt_manager
 6247              	.L391:
1920:..\src/interruptions.c ****     }
1921:..\src/interruptions.c ****     
1922:..\src/interruptions.c ****     // VOLTAGE READING
1923:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1924:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1925:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1926:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1927:..\src/interruptions.c ****     
1928:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6248              		.loc 1 1928 0
 6249 0082 8F4B     		ldr	r3, .L540+20
 6250 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6251 0086 002B     		cmp	r3, #0
 6252 0088 4DD0     		beq	.L392
 6253              		.loc 1 1928 0 is_stmt 0 discriminator 1
 6254 008a 8E4B     		ldr	r3, .L540+24
 6255 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6256 008e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 147


 6257 0090 49D0     		beq	.L392
1929:..\src/interruptions.c ****         count = count + 1;
 6258              		.loc 1 1929 0 is_stmt 1
 6259 0092 8D4B     		ldr	r3, .L540+28
 6260 0094 1B88     		ldrh	r3, [r3]
 6261 0096 0133     		adds	r3, r3, #1
 6262 0098 9AB2     		uxth	r2, r3
 6263 009a 8B4B     		ldr	r3, .L540+28
 6264 009c 1A80     		strh	r2, [r3]	@ movhi
1930:..\src/interruptions.c ****         
1931:..\src/interruptions.c ****         if (count == 1000){
 6265              		.loc 1 1931 0
 6266 009e 8A4B     		ldr	r3, .L540+28
 6267 00a0 1B88     		ldrh	r3, [r3]
 6268 00a2 B3F57A7F 		cmp	r3, #1000
 6269 00a6 3ED1     		bne	.L392
1932:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6270              		.loc 1 1932 0
 6271 00a8 884B     		ldr	r3, .L540+32
 6272 00aa 0022     		movs	r2, #0
 6273 00ac 1A70     		strb	r2, [r3]
 6274 00ae 33E0     		b	.L393
 6275              	.L397:
1933:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6276              		.loc 1 1933 0
 6277 00b0 864B     		ldr	r3, .L540+32
 6278 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6279 00b4 1A46     		mov	r2, r3
 6280 00b6 7F4B     		ldr	r3, .L540+8
 6281 00b8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6282 00bc 42F22732 		movw	r2, #8999
 6283 00c0 9342     		cmp	r3, r2
 6284 00c2 08DC     		bgt	.L394
1934:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6285              		.loc 1 1934 0
 6286 00c4 814B     		ldr	r3, .L540+32
 6287 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6288 00c8 1946     		mov	r1, r3
 6289 00ca 814B     		ldr	r3, .L540+36
 6290 00cc 4FF4FA52 		mov	r2, #8000
 6291 00d0 43F82120 		str	r2, [r3, r1, lsl #2]
 6292 00d4 1AE0     		b	.L395
 6293              	.L394:
1935:..\src/interruptions.c ****                 }
1936:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1937:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6294              		.loc 1 1937 0
 6295 00d6 7D4B     		ldr	r3, .L540+32
 6296 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6297 00da 1A46     		mov	r2, r3
 6298 00dc 754B     		ldr	r3, .L540+8
 6299 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6300 00e2 43F2C722 		movw	r2, #12999
 6301 00e6 9342     		cmp	r3, r2
 6302 00e8 08DC     		bgt	.L396
1938:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6303              		.loc 1 1938 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 148


 6304 00ea 784B     		ldr	r3, .L540+32
 6305 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6306 00ee 1946     		mov	r1, r3
 6307 00f0 774B     		ldr	r3, .L540+36
 6308 00f2 42F6E062 		movw	r2, #12000
 6309 00f6 43F82120 		str	r2, [r3, r1, lsl #2]
 6310 00fa 07E0     		b	.L395
 6311              	.L396:
1939:..\src/interruptions.c ****                     }
1940:..\src/interruptions.c ****                     else
1941:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6312              		.loc 1 1941 0
 6313 00fc 734B     		ldr	r3, .L540+32
 6314 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6315 0100 1946     		mov	r1, r3
 6316 0102 734B     		ldr	r3, .L540+36
 6317 0104 45F6C052 		movw	r2, #24000
 6318 0108 43F82120 		str	r2, [r3, r1, lsl #2]
 6319              	.L395:
1932:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6320              		.loc 1 1932 0 discriminator 2
 6321 010c 6F4B     		ldr	r3, .L540+32
 6322 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6323 0110 0133     		adds	r3, r3, #1
 6324 0112 DAB2     		uxtb	r2, r3
 6325 0114 6D4B     		ldr	r3, .L540+32
 6326 0116 1A70     		strb	r2, [r3]
 6327              	.L393:
1932:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6328              		.loc 1 1932 0 is_stmt 0 discriminator 1
 6329 0118 6C4B     		ldr	r3, .L540+32
 6330 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6331 011c 012B     		cmp	r3, #1
 6332 011e C7D9     		bls	.L397
1942:..\src/interruptions.c ****                 }
1943:..\src/interruptions.c ****             }
1944:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6333              		.loc 1 1944 0 is_stmt 1
 6334 0120 674B     		ldr	r3, .L540+20
 6335 0122 0022     		movs	r2, #0
 6336 0124 1A70     		strb	r2, [r3]
 6337              	.L392:
1945:..\src/interruptions.c ****         }
1946:..\src/interruptions.c ****     }
1947:..\src/interruptions.c **** 
1948:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1949:..\src/interruptions.c **** 
1950:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 6338              		.loc 1 1950 0
 6339 0126 634B     		ldr	r3, .L540+8
 6340 0128 1B68     		ldr	r3, [r3]
 6341 012a 41F65732 		movw	r2, #6999
 6342 012e 9342     		cmp	r3, r2
 6343 0130 00F3F080 		bgt	.L398
 6344              		.loc 1 1950 0 is_stmt 0 discriminator 1
 6345 0134 614B     		ldr	r3, .L540+16
 6346 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 149


 6347 0138 042B     		cmp	r3, #4
 6348 013a 06D9     		bls	.L399
 6349              		.loc 1 1950 0 discriminator 2
 6350 013c 5D4B     		ldr	r3, .L540+8
 6351 013e 5B68     		ldr	r3, [r3, #4]
 6352 0140 41F65732 		movw	r2, #6999
 6353 0144 9342     		cmp	r3, r2
 6354 0146 00F3E580 		bgt	.L398
 6355              	.L399:
1951:..\src/interruptions.c ****         // PSoC is powered through uUSB
1952:..\src/interruptions.c ****         
1953:..\src/interruptions.c ****         tension_valid = FALSE;
 6356              		.loc 1 1953 0 is_stmt 1
 6357 014a 5E4B     		ldr	r3, .L540+24
 6358 014c 0022     		movs	r2, #0
 6359 014e 1A70     		strb	r2, [r3]
1954:..\src/interruptions.c ****             
1955:..\src/interruptions.c ****         if (interrupt_flag){
 6360              		.loc 1 1955 0
 6361 0150 564B     		ldr	r3, .L540
 6362 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6363 0154 002B     		cmp	r3, #0
 6364 0156 04D0     		beq	.L400
1956:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6365              		.loc 1 1956 0
 6366 0158 544B     		ldr	r3, .L540
 6367 015a 0022     		movs	r2, #0
 6368 015c 1A70     		strb	r2, [r3]
1957:..\src/interruptions.c ****             interrupt_manager();
 6369              		.loc 1 1957 0
 6370 015e FFF7FEFF 		bl	interrupt_manager
 6371              	.L400:
1958:..\src/interruptions.c ****         }
1959:..\src/interruptions.c ****         
1960:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6372              		.loc 1 1960 0
 6373 0162 5A4B     		ldr	r3, .L540+32
 6374 0164 0022     		movs	r2, #0
 6375 0166 1A70     		strb	r2, [r3]
 6376 0168 81E0     		b	.L401
 6377              	.L404:
1961:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6378              		.loc 1 1961 0
 6379 016a 5A4B     		ldr	r3, .L540+40
 6380 016c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6381 0170 002B     		cmp	r3, #0
 6382 0172 59D0     		beq	.L402
1962:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6383              		.loc 1 1962 0
 6384 0174 554B     		ldr	r3, .L540+32
 6385 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6386 0178 1946     		mov	r1, r3
 6387 017a 564A     		ldr	r2, .L540+40
 6388 017c 0B46     		mov	r3, r1
 6389 017e DB00     		lsls	r3, r3, #3
 6390 0180 5B1A     		subs	r3, r3, r1
 6391 0182 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 150


 6392 0184 1344     		add	r3, r3, r2
 6393 0186 03F58773 		add	r3, r3, #270
 6394 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6395 018c 022B     		cmp	r3, #2
 6396 018e 37D0     		beq	.L403
1963:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6397              		.loc 1 1963 0 discriminator 1
 6398 0190 4E4B     		ldr	r3, .L540+32
 6399 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6400 0194 1946     		mov	r1, r3
 6401 0196 4F4A     		ldr	r2, .L540+40
 6402 0198 0B46     		mov	r3, r1
 6403 019a DB00     		lsls	r3, r3, #3
 6404 019c 5B1A     		subs	r3, r3, r1
 6405 019e 1B01     		lsls	r3, r3, #4
 6406 01a0 1344     		add	r3, r3, r2
 6407 01a2 03F58773 		add	r3, r3, #270
 6408 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1962:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6409              		.loc 1 1962 0 discriminator 1
 6410 01a8 032B     		cmp	r3, #3
 6411 01aa 29D0     		beq	.L403
1964:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6412              		.loc 1 1964 0
 6413 01ac 474B     		ldr	r3, .L540+32
 6414 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6415 01b0 1946     		mov	r1, r3
 6416 01b2 484A     		ldr	r2, .L540+40
 6417 01b4 0B46     		mov	r3, r1
 6418 01b6 DB00     		lsls	r3, r3, #3
 6419 01b8 5B1A     		subs	r3, r3, r1
 6420 01ba 1B01     		lsls	r3, r3, #4
 6421 01bc 1344     		add	r3, r3, r2
 6422 01be 03F58773 		add	r3, r3, #270
 6423 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1963:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6424              		.loc 1 1963 0
 6425 01c4 042B     		cmp	r3, #4
 6426 01c6 1BD0     		beq	.L403
1965:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6427              		.loc 1 1965 0
 6428 01c8 404B     		ldr	r3, .L540+32
 6429 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6430 01cc 1946     		mov	r1, r3
 6431 01ce 414A     		ldr	r2, .L540+40
 6432 01d0 0B46     		mov	r3, r1
 6433 01d2 DB00     		lsls	r3, r3, #3
 6434 01d4 5B1A     		subs	r3, r3, r1
 6435 01d6 1B01     		lsls	r3, r3, #4
 6436 01d8 1344     		add	r3, r3, r2
 6437 01da 03F58773 		add	r3, r3, #270
 6438 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1964:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6439              		.loc 1 1964 0
 6440 01e0 052B     		cmp	r3, #5
 6441 01e2 0DD0     		beq	.L403
1966:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 151


 6442              		.loc 1 1966 0
 6443 01e4 394B     		ldr	r3, .L540+32
 6444 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6445 01e8 1946     		mov	r1, r3
 6446 01ea 3A4A     		ldr	r2, .L540+40
 6447 01ec 0B46     		mov	r3, r1
 6448 01ee DB00     		lsls	r3, r3, #3
 6449 01f0 5B1A     		subs	r3, r3, r1
 6450 01f2 1B01     		lsls	r3, r3, #4
 6451 01f4 1344     		add	r3, r3, r2
 6452 01f6 03F58773 		add	r3, r3, #270
 6453 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1965:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6454              		.loc 1 1965 0
 6455 01fc 072B     		cmp	r3, #7
 6456 01fe 13D1     		bne	.L402
 6457              	.L403:
1967:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6458              		.loc 1 1967 0
 6459 0200 324B     		ldr	r3, .L540+32
 6460 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6461 0204 344A     		ldr	r2, .L540+44
 6462 0206 1B01     		lsls	r3, r3, #4
 6463 0208 1344     		add	r3, r3, r2
 6464 020a 0C33     		adds	r3, r3, #12
 6465 020c 0022     		movs	r2, #0
 6466 020e 1A70     		strb	r2, [r3]
1968:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6467              		.loc 1 1968 0
 6468 0210 2E4B     		ldr	r3, .L540+32
 6469 0212 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6470 0214 2D4B     		ldr	r3, .L540+32
 6471 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6472 0218 2F4A     		ldr	r2, .L540+44
 6473 021a 1B01     		lsls	r3, r3, #4
 6474 021c 1344     		add	r3, r3, r2
 6475 021e 0C33     		adds	r3, r3, #12
 6476 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6477 0222 1946     		mov	r1, r3
 6478 0224 FFF7FEFF 		bl	enable_motor
 6479              	.L402:
1969:..\src/interruptions.c ****                     
1970:..\src/interruptions.c ****                 }
1971:..\src/interruptions.c ****             }
1972:..\src/interruptions.c **** 
1973:..\src/interruptions.c ****             // Assign dev_tension and reset current
1974:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6480              		.loc 1 1974 0 discriminator 2
 6481 0228 284B     		ldr	r3, .L540+32
 6482 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6483 022c 1946     		mov	r1, r3
 6484 022e 214B     		ldr	r3, .L540+8
 6485 0230 41F28832 		movw	r2, #5000
 6486 0234 43F82120 		str	r2, [r3, r1, lsl #2]
1975:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6487              		.loc 1 1975 0 discriminator 2
 6488 0238 244B     		ldr	r3, .L540+32
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 152


 6489 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6490 023c 1946     		mov	r1, r3
 6491 023e 1C4A     		ldr	r2, .L540+4
 6492 0240 0B46     		mov	r3, r1
 6493 0242 DB00     		lsls	r3, r3, #3
 6494 0244 5B1A     		subs	r3, r3, r1
 6495 0246 1B01     		lsls	r3, r3, #4
 6496 0248 1344     		add	r3, r3, r2
 6497 024a 03F58873 		add	r3, r3, #272
 6498 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6499 0250 1946     		mov	r1, r3
 6500 0252 224A     		ldr	r2, .L540+48
 6501 0254 3423     		movs	r3, #52
 6502 0256 03FB01F3 		mul	r3, r3, r1
 6503 025a 1344     		add	r3, r3, r2
 6504 025c 0C33     		adds	r3, r3, #12
 6505 025e 0022     		movs	r2, #0
 6506 0260 1A60     		str	r2, [r3]
1960:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6507              		.loc 1 1960 0 discriminator 2
 6508 0262 1A4B     		ldr	r3, .L540+32
 6509 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6510 0266 0133     		adds	r3, r3, #1
 6511 0268 DAB2     		uxtb	r2, r3
 6512 026a 184B     		ldr	r3, .L540+32
 6513 026c 1A70     		strb	r2, [r3]
 6514              	.L401:
1960:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6515              		.loc 1 1960 0 is_stmt 0 discriminator 1
 6516 026e 174B     		ldr	r3, .L540+32
 6517 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6518 0272 012B     		cmp	r3, #1
 6519 0274 7FF679AF 		bls	.L404
1976:..\src/interruptions.c ****         }
1977:..\src/interruptions.c ****         
1978:..\src/interruptions.c ****         // Reset emg
1979:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6520              		.loc 1 1979 0 is_stmt 1
 6521 0278 144B     		ldr	r3, .L540+32
 6522 027a 0022     		movs	r2, #0
 6523 027c 1A70     		strb	r2, [r3]
 6524 027e 0CE0     		b	.L405
 6525              	.L406:
1980:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6526              		.loc 1 1980 0 discriminator 3
 6527 0280 124B     		ldr	r3, .L540+32
 6528 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6529 0284 1946     		mov	r1, r3
 6530 0286 164B     		ldr	r3, .L540+52
 6531 0288 0022     		movs	r2, #0
 6532 028a 43F82120 		str	r2, [r3, r1, lsl #2]
1979:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6533              		.loc 1 1979 0 discriminator 3
 6534 028e 0F4B     		ldr	r3, .L540+32
 6535 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6536 0292 0133     		adds	r3, r3, #1
 6537 0294 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 153


 6538 0296 0D4B     		ldr	r3, .L540+32
 6539 0298 1A70     		strb	r2, [r3]
 6540              	.L405:
1979:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6541              		.loc 1 1979 0 is_stmt 0 discriminator 1
 6542 029a 0C4B     		ldr	r3, .L540+32
 6543 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6544 029e 012B     		cmp	r3, #1
 6545 02a0 EED9     		bls	.L406
1981:..\src/interruptions.c ****         }
1982:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6546              		.loc 1 1982 0 is_stmt 1
 6547 02a2 0A4B     		ldr	r3, .L540+32
 6548 02a4 0022     		movs	r2, #0
 6549 02a6 1A70     		strb	r2, [r3]
 6550 02a8 29E0     		b	.L407
 6551              	.L541:
 6552 02aa 00BF     		.align	2
 6553              	.L540:
 6554 02ac 00000000 		.word	interrupt_flag
 6555 02b0 00000000 		.word	g_mem
 6556 02b4 00000000 		.word	dev_tension
 6557 02b8 00000000 		.word	ADC_buf
 6558 02bc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6559 02c0 06000000 		.word	first_tension_valid.10650
 6560 02c4 00000000 		.word	tension_valid
 6561 02c8 74010000 		.word	count.10651
 6562 02cc 76010000 		.word	idx.10653
 6563 02d0 00000000 		.word	pow_tension
 6564 02d4 00000000 		.word	c_mem
 6565 02d8 00000000 		.word	g_ref
 6566 02dc 00000000 		.word	g_meas
 6567 02e0 00000000 		.word	g_adc_meas
 6568              	.L409:
1983:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6569              		.loc 1 1983 0 discriminator 4
 6570 02e4 AE4B     		ldr	r3, .L542
 6571 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6572 02e8 AE4A     		ldr	r2, .L542+4
 6573 02ea 0233     		adds	r3, r3, #2
 6574 02ec 0021     		movs	r1, #0
 6575 02ee 42F82310 		str	r1, [r2, r3, lsl #2]
1982:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6576              		.loc 1 1982 0 discriminator 4
 6577 02f2 AB4B     		ldr	r3, .L542
 6578 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6579 02f6 0133     		adds	r3, r3, #1
 6580 02f8 DAB2     		uxtb	r2, r3
 6581 02fa A94B     		ldr	r3, .L542
 6582 02fc 1A70     		strb	r2, [r3]
 6583              	.L407:
1982:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6584              		.loc 1 1982 0 is_stmt 0 discriminator 1
 6585 02fe AA4B     		ldr	r3, .L542+8
 6586 0300 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6587 0304 002B     		cmp	r3, #0
 6588 0306 00F00582 		beq	.L522
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 154


1982:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6589              		.loc 1 1982 0 discriminator 3
 6590 030a A54B     		ldr	r3, .L542
 6591 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6592 030e 052B     		cmp	r3, #5
 6593 0310 E8D9     		bls	.L409
1950:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6594              		.loc 1 1950 0 is_stmt 1
 6595 0312 FFE1     		b	.L522
 6596              	.L398:
1984:..\src/interruptions.c ****         }
1985:..\src/interruptions.c ****         
1986:..\src/interruptions.c ****     }
1987:..\src/interruptions.c ****     else {
1988:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1989:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1990:..\src/interruptions.c ****         
1991:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1992:..\src/interruptions.c ****         
1993:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6597              		.loc 1 1993 0
 6598 0314 A54B     		ldr	r3, .L542+12
 6599 0316 1B68     		ldr	r3, [r3]
 6600 0318 B3F57A7F 		cmp	r3, #1000
 6601 031c 0DD1     		bne	.L411
 6602              		.loc 1 1993 0 is_stmt 0 discriminator 1
 6603 031e A44B     		ldr	r3, .L542+16
 6604 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6605 0322 002B     		cmp	r3, #0
 6606 0324 09D1     		bne	.L411
1994:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1995:..\src/interruptions.c ****             tension_valid = TRUE;   
 6607              		.loc 1 1995 0 is_stmt 1
 6608 0326 A24B     		ldr	r3, .L542+16
 6609 0328 0122     		movs	r2, #1
 6610 032a 1A70     		strb	r2, [r3]
1996:..\src/interruptions.c ****             count = 0;
 6611              		.loc 1 1996 0
 6612 032c A14B     		ldr	r3, .L542+20
 6613 032e 0022     		movs	r2, #0
 6614 0330 1A80     		strh	r2, [r3]	@ movhi
1997:..\src/interruptions.c ****             v_count = 0;
 6615              		.loc 1 1997 0
 6616 0332 9E4B     		ldr	r3, .L542+12
 6617 0334 0022     		movs	r2, #0
 6618 0336 1A60     		str	r2, [r3]
 6619 0338 2CE0     		b	.L412
 6620              	.L411:
1998:..\src/interruptions.c ****         }
1999:..\src/interruptions.c ****         else {  
2000:..\src/interruptions.c ****             // wait for battery voltage stabilization
2001:..\src/interruptions.c ****             if (v_count < 1000) {
 6621              		.loc 1 2001 0
 6622 033a 9C4B     		ldr	r3, .L542+12
 6623 033c 1B68     		ldr	r3, [r3]
 6624 033e B3F57A7F 		cmp	r3, #1000
 6625 0342 04D2     		bcs	.L413
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 155


2002:..\src/interruptions.c ****                 v_count = v_count + 1;
 6626              		.loc 1 2002 0
 6627 0344 994B     		ldr	r3, .L542+12
 6628 0346 1B68     		ldr	r3, [r3]
 6629 0348 0133     		adds	r3, r3, #1
 6630 034a 984A     		ldr	r2, .L542+12
 6631 034c 1360     		str	r3, [r2]
 6632              	.L413:
2003:..\src/interruptions.c ****             }
2004:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6633              		.loc 1 2004 0
 6634 034e 944B     		ldr	r3, .L542
 6635 0350 0022     		movs	r2, #0
 6636 0352 1A70     		strb	r2, [r3]
 6637 0354 1AE0     		b	.L414
 6638              	.L415:
2005:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6639              		.loc 1 2005 0 discriminator 3
 6640 0356 924B     		ldr	r3, .L542
 6641 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6642 035a 1C46     		mov	r4, r3
 6643 035c 904B     		ldr	r3, .L542
 6644 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6645 0360 1A46     		mov	r2, r3
 6646 0362 954B     		ldr	r3, .L542+24
 6647 0364 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6648 0368 8D4B     		ldr	r3, .L542
 6649 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6650 036c DB00     		lsls	r3, r3, #3
 6651 036e 934A     		ldr	r2, .L542+28
 6652 0370 1344     		add	r3, r3, r2
 6653 0372 1946     		mov	r1, r3
 6654 0374 FFF7FEFF 		bl	filter
 6655 0378 0246     		mov	r2, r0
 6656 037a 914B     		ldr	r3, .L542+32
 6657 037c 43F82420 		str	r2, [r3, r4, lsl #2]
2004:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6658              		.loc 1 2004 0 discriminator 3
 6659 0380 874B     		ldr	r3, .L542
 6660 0382 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6661 0384 0133     		adds	r3, r3, #1
 6662 0386 DAB2     		uxtb	r2, r3
 6663 0388 854B     		ldr	r3, .L542
 6664 038a 1A70     		strb	r2, [r3]
 6665              	.L414:
2004:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6666              		.loc 1 2004 0 is_stmt 0 discriminator 1
 6667 038c 844B     		ldr	r3, .L542
 6668 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6669 0390 012B     		cmp	r3, #1
 6670 0392 E0D9     		bls	.L415
 6671              	.L412:
2006:..\src/interruptions.c ****             }
2007:..\src/interruptions.c ****         }
2008:..\src/interruptions.c **** 
2009:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6672              		.loc 1 2009 0 is_stmt 1
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 156


 6673 0394 824B     		ldr	r3, .L542
 6674 0396 0022     		movs	r2, #0
 6675 0398 1A70     		strb	r2, [r3]
 6676 039a 17E0     		b	.L416
 6677              	.L418:
2010:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6678              		.loc 1 2010 0
 6679 039c 804B     		ldr	r3, .L542
 6680 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6681 03a0 1946     		mov	r1, r3
 6682 03a2 884A     		ldr	r2, .L542+36
 6683 03a4 0B46     		mov	r3, r1
 6684 03a6 DB00     		lsls	r3, r3, #3
 6685 03a8 5B1A     		subs	r3, r3, r1
 6686 03aa 1B01     		lsls	r3, r3, #4
 6687 03ac 1344     		add	r3, r3, r2
 6688 03ae E133     		adds	r3, r3, #225
 6689 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6690 03b2 002B     		cmp	r3, #0
 6691 03b4 04D0     		beq	.L417
2011:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6692              		.loc 1 2011 0
 6693 03b6 7A4B     		ldr	r3, .L542
 6694 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6695 03ba 1846     		mov	r0, r3
 6696 03bc FFF7FEFF 		bl	pwm_limit_search
 6697              	.L417:
2009:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6698              		.loc 1 2009 0 discriminator 2
 6699 03c0 774B     		ldr	r3, .L542
 6700 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6701 03c4 0133     		adds	r3, r3, #1
 6702 03c6 DAB2     		uxtb	r2, r3
 6703 03c8 754B     		ldr	r3, .L542
 6704 03ca 1A70     		strb	r2, [r3]
 6705              	.L416:
2009:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6706              		.loc 1 2009 0 is_stmt 0 discriminator 1
 6707 03cc 744B     		ldr	r3, .L542
 6708 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6709 03d0 012B     		cmp	r3, #1
 6710 03d2 E3D9     		bls	.L418
2012:..\src/interruptions.c ****         }
2013:..\src/interruptions.c ****         
2014:..\src/interruptions.c ****         // Filter and Set currents
2015:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6711              		.loc 1 2015 0 is_stmt 1
 6712 03d4 7B4B     		ldr	r3, .L542+36
 6713 03d6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6714 03da 002B     		cmp	r3, #0
 6715 03dc 24D1     		bne	.L419
2016:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = (int16)(filter((((int32)(ADC_buf[1] - 1643) 
 6716              		.loc 1 2016 0
 6717 03de 794B     		ldr	r3, .L542+36
 6718 03e0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6719 03e4 1C46     		mov	r4, r3
 6720 03e6 784B     		ldr	r3, .L542+40
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 157


 6721 03e8 B3F90230 		ldrsh	r3, [r3, #2]
 6722 03ec A3F26B63 		subw	r3, r3, #1643
 6723 03f0 45F66A02 		movw	r2, #22634
 6724 03f4 02FB03F3 		mul	r3, r2, r3
 6725 03f8 5B13     		asrs	r3, r3, #13
 6726 03fa 7449     		ldr	r1, .L542+44
 6727 03fc 1846     		mov	r0, r3
 6728 03fe FFF7FEFF 		bl	filter
 6729 0402 0346     		mov	r3, r0
 6730 0404 9BB2     		uxth	r3, r3
 6731 0406 724A     		ldr	r2, .L542+48
 6732 0408 92F90020 		ldrsb	r2, [r2]
 6733 040c 92B2     		uxth	r2, r2
 6734 040e 02FB03F3 		mul	r3, r2, r3
 6735 0412 9BB2     		uxth	r3, r3
 6736 0414 1BB2     		sxth	r3, r3
 6737 0416 1946     		mov	r1, r3
 6738 0418 6E4A     		ldr	r2, .L542+52
 6739 041a 3423     		movs	r3, #52
 6740 041c 03FB04F3 		mul	r3, r3, r4
 6741 0420 1344     		add	r3, r3, r2
 6742 0422 0C33     		adds	r3, r3, #12
 6743 0424 1960     		str	r1, [r3]
 6744 0426 23E0     		b	.L420
 6745              	.L419:
2017:..\src/interruptions.c ****         } else {
2018:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = (int16)(filter((((int32)(ADC_buf[1] - 1635) 
 6746              		.loc 1 2018 0
 6747 0428 664B     		ldr	r3, .L542+36
 6748 042a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6749 042e 1C46     		mov	r4, r3
 6750 0430 654B     		ldr	r3, .L542+40
 6751 0432 B3F90230 		ldrsh	r3, [r3, #2]
 6752 0436 A3F26362 		subw	r2, r3, #1635
 6753 043a 1346     		mov	r3, r2
 6754 043c 1B01     		lsls	r3, r3, #4
 6755 043e 9B1A     		subs	r3, r3, r2
 6756 0440 5B01     		lsls	r3, r3, #5
 6757 0442 1B11     		asrs	r3, r3, #4
 6758 0444 6149     		ldr	r1, .L542+44
 6759 0446 1846     		mov	r0, r3
 6760 0448 FFF7FEFF 		bl	filter
 6761 044c 0346     		mov	r3, r0
 6762 044e 9BB2     		uxth	r3, r3
 6763 0450 5F4A     		ldr	r2, .L542+48
 6764 0452 92F90020 		ldrsb	r2, [r2]
 6765 0456 92B2     		uxth	r2, r2
 6766 0458 02FB03F3 		mul	r3, r2, r3
 6767 045c 9BB2     		uxth	r3, r3
 6768 045e 1BB2     		sxth	r3, r3
 6769 0460 1946     		mov	r1, r3
 6770 0462 5C4A     		ldr	r2, .L542+52
 6771 0464 3423     		movs	r3, #52
 6772 0466 03FB04F3 		mul	r3, r3, r4
 6773 046a 1344     		add	r3, r3, r2
 6774 046c 0C33     		adds	r3, r3, #12
 6775 046e 1960     		str	r1, [r3]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 158


 6776              	.L420:
2019:..\src/interruptions.c ****         }  
2020:..\src/interruptions.c **** 
2021:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2022:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6777              		.loc 1 2022 0
 6778 0470 544B     		ldr	r3, .L542+36
 6779 0472 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6780 0476 1D46     		mov	r5, r3
 6781 0478 524B     		ldr	r3, .L542+36
 6782 047a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6783 047e 1946     		mov	r1, r3
 6784 0480 544A     		ldr	r2, .L542+52
 6785 0482 3423     		movs	r3, #52
 6786 0484 03FB01F3 		mul	r3, r3, r1
 6787 0488 1344     		add	r3, r3, r2
 6788 048a 0C33     		adds	r3, r3, #12
 6789 048c 1C68     		ldr	r4, [r3]
 6790 048e 4D4B     		ldr	r3, .L542+36
 6791 0490 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6792 0494 1946     		mov	r1, r3
 6793 0496 4F4A     		ldr	r2, .L542+52
 6794 0498 3423     		movs	r3, #52
 6795 049a 03FB01F3 		mul	r3, r3, r1
 6796 049e 1344     		add	r3, r3, r2
 6797 04a0 1A68     		ldr	r2, [r3]
 6798 04a2 484B     		ldr	r3, .L542+36
 6799 04a4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6800 04a8 1846     		mov	r0, r3
 6801 04aa 4649     		ldr	r1, .L542+36
 6802 04ac 0346     		mov	r3, r0
 6803 04ae 5B00     		lsls	r3, r3, #1
 6804 04b0 0344     		add	r3, r3, r0
 6805 04b2 1B01     		lsls	r3, r3, #4
 6806 04b4 0B44     		add	r3, r3, r1
 6807 04b6 03F29513 		addw	r3, r3, #405
 6808 04ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6809 04bc 42FA03F6 		asr	r6, r2, r3
 6810 04c0 404B     		ldr	r3, .L542+36
 6811 04c2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6812 04c6 1946     		mov	r1, r3
 6813 04c8 424A     		ldr	r2, .L542+52
 6814 04ca 3423     		movs	r3, #52
 6815 04cc 03FB01F3 		mul	r3, r3, r1
 6816 04d0 1344     		add	r3, r3, r2
 6817 04d2 1C33     		adds	r3, r3, #28
 6818 04d4 1A68     		ldr	r2, [r3]
 6819 04d6 3B4B     		ldr	r3, .L542+36
 6820 04d8 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6821 04dc 1846     		mov	r0, r3
 6822 04de 3949     		ldr	r1, .L542+36
 6823 04e0 0346     		mov	r3, r0
 6824 04e2 5B00     		lsls	r3, r3, #1
 6825 04e4 0344     		add	r3, r3, r0
 6826 04e6 1B01     		lsls	r3, r3, #4
 6827 04e8 0B44     		add	r3, r3, r1
 6828 04ea 03F29513 		addw	r3, r3, #405
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 159


 6829 04ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6830 04f0 42FA03FE 		asr	lr, r2, r3
 6831 04f4 384B     		ldr	r3, .L542+56
 6832 04f6 1A68     		ldr	r2, [r3]
 6833 04f8 324B     		ldr	r3, .L542+36
 6834 04fa 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6835 04fe 1846     		mov	r0, r3
 6836 0500 3049     		ldr	r1, .L542+36
 6837 0502 0346     		mov	r3, r0
 6838 0504 5B00     		lsls	r3, r3, #1
 6839 0506 0344     		add	r3, r3, r0
 6840 0508 1B01     		lsls	r3, r3, #4
 6841 050a 0B44     		add	r3, r3, r1
 6842 050c 03F29513 		addw	r3, r3, #405
 6843 0510 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6844 0512 42FA03F3 		asr	r3, r2, r3
 6845 0516 7246     		mov	r2, lr
 6846 0518 3146     		mov	r1, r6
 6847 051a 0020     		movs	r0, #0
 6848 051c FFF7FEFF 		bl	curr_estim
 6849 0520 0346     		mov	r3, r0
 6850 0522 E31A     		subs	r3, r4, r3
 6851 0524 2D49     		ldr	r1, .L542+60
 6852 0526 1846     		mov	r0, r3
 6853 0528 FFF7FEFF 		bl	filter
 6854 052c 0346     		mov	r3, r0
 6855 052e 1BB2     		sxth	r3, r3
 6856 0530 1946     		mov	r1, r3
 6857 0532 284A     		ldr	r2, .L542+52
 6858 0534 3423     		movs	r3, #52
 6859 0536 03FB05F3 		mul	r3, r3, r5
 6860 053a 1344     		add	r3, r3, r2
 6861 053c 1033     		adds	r3, r3, #16
 6862 053e 1960     		str	r1, [r3]
2023:..\src/interruptions.c ****         
2024:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2025:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6863              		.loc 1 2025 0
 6864 0540 274B     		ldr	r3, .L542+64
 6865 0542 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6866 0544 042B     		cmp	r3, #4
 6867 0546 40F2DB80 		bls	.L421
2026:..\src/interruptions.c ****             // Filter and Set currents
2027:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6868              		.loc 1 2027 0
 6869 054a 1E4B     		ldr	r3, .L542+36
 6870 054c 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6871 0550 002B     		cmp	r3, #0
 6872 0552 49D1     		bne	.L422
2028:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = (int16)(filter((((int32)(ADC_buf[5] - 16
 6873              		.loc 1 2028 0
 6874 0554 1B4B     		ldr	r3, .L542+36
 6875 0556 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6876 055a 1C46     		mov	r4, r3
 6877 055c 1A4B     		ldr	r3, .L542+40
 6878 055e B3F90A30 		ldrsh	r3, [r3, #10]
 6879 0562 A3F26B63 		subw	r3, r3, #1643
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 160


 6880 0566 45F66A02 		movw	r2, #22634
 6881 056a 02FB03F3 		mul	r3, r2, r3
 6882 056e 5B13     		asrs	r3, r3, #13
 6883 0570 1C49     		ldr	r1, .L542+68
 6884 0572 1846     		mov	r0, r3
 6885 0574 FFF7FEFF 		bl	filter
 6886 0578 0346     		mov	r3, r0
 6887 057a 9BB2     		uxth	r3, r3
 6888 057c 144A     		ldr	r2, .L542+48
 6889 057e 92F90120 		ldrsb	r2, [r2, #1]
 6890 0582 92B2     		uxth	r2, r2
 6891 0584 02FB03F3 		mul	r3, r2, r3
 6892 0588 9BB2     		uxth	r3, r3
 6893 058a 1BB2     		sxth	r3, r3
 6894 058c 1946     		mov	r1, r3
 6895 058e 114A     		ldr	r2, .L542+52
 6896 0590 3423     		movs	r3, #52
 6897 0592 03FB04F3 		mul	r3, r3, r4
 6898 0596 1344     		add	r3, r3, r2
 6899 0598 0C33     		adds	r3, r3, #12
 6900 059a 1960     		str	r1, [r3]
 6901 059c 48E0     		b	.L423
 6902              	.L543:
 6903 059e 00BF     		.align	2
 6904              	.L542:
 6905 05a0 76010000 		.word	idx.10653
 6906 05a4 00000000 		.word	g_adc_meas
 6907 05a8 00000000 		.word	c_mem
 6908 05ac 78010000 		.word	v_count.10652
 6909 05b0 00000000 		.word	tension_valid
 6910 05b4 74010000 		.word	count.10651
 6911 05b8 00000000 		.word	dev_tension
 6912 05bc 00000000 		.word	filt_v
 6913 05c0 00000000 		.word	dev_tension_f
 6914 05c4 00000000 		.word	g_mem
 6915 05c8 00000000 		.word	ADC_buf
 6916 05cc 00000000 		.word	filt_i
 6917 05d0 00000000 		.word	pwm_sign
 6918 05d4 00000000 		.word	g_meas
 6919 05d8 00000000 		.word	g_ref
 6920 05dc 00000000 		.word	filt_curr_diff
 6921 05e0 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6922 05e4 08000000 		.word	filt_i+8
 6923              	.L422:
2029:..\src/interruptions.c ****             } else {
2030:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = (int16)(filter((((int32)(ADC_buf[5] - 16
 6924              		.loc 1 2030 0
 6925 05e8 994B     		ldr	r3, .L544
 6926 05ea 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6927 05ee 1C46     		mov	r4, r3
 6928 05f0 984B     		ldr	r3, .L544+4
 6929 05f2 B3F90A30 		ldrsh	r3, [r3, #10]
 6930 05f6 A3F26362 		subw	r2, r3, #1635
 6931 05fa 1346     		mov	r3, r2
 6932 05fc 1B01     		lsls	r3, r3, #4
 6933 05fe 9B1A     		subs	r3, r3, r2
 6934 0600 5B01     		lsls	r3, r3, #5
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 161


 6935 0602 1B11     		asrs	r3, r3, #4
 6936 0604 9449     		ldr	r1, .L544+8
 6937 0606 1846     		mov	r0, r3
 6938 0608 FFF7FEFF 		bl	filter
 6939 060c 0346     		mov	r3, r0
 6940 060e 9BB2     		uxth	r3, r3
 6941 0610 924A     		ldr	r2, .L544+12
 6942 0612 92F90120 		ldrsb	r2, [r2, #1]
 6943 0616 92B2     		uxth	r2, r2
 6944 0618 02FB03F3 		mul	r3, r2, r3
 6945 061c 9BB2     		uxth	r3, r3
 6946 061e 1BB2     		sxth	r3, r3
 6947 0620 1946     		mov	r1, r3
 6948 0622 8F4A     		ldr	r2, .L544+16
 6949 0624 3423     		movs	r3, #52
 6950 0626 03FB04F3 		mul	r3, r3, r4
 6951 062a 1344     		add	r3, r3, r2
 6952 062c 0C33     		adds	r3, r3, #12
 6953 062e 1960     		str	r1, [r3]
 6954              	.L423:
2031:..\src/interruptions.c ****             }  
2032:..\src/interruptions.c ****             
2033:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6955              		.loc 1 2033 0
 6956 0630 874B     		ldr	r3, .L544
 6957 0632 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6958 0636 1D46     		mov	r5, r3
 6959 0638 854B     		ldr	r3, .L544
 6960 063a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6961 063e 1946     		mov	r1, r3
 6962 0640 874A     		ldr	r2, .L544+16
 6963 0642 3423     		movs	r3, #52
 6964 0644 03FB01F3 		mul	r3, r3, r1
 6965 0648 1344     		add	r3, r3, r2
 6966 064a 0C33     		adds	r3, r3, #12
 6967 064c 1C68     		ldr	r4, [r3]
 6968 064e 804B     		ldr	r3, .L544
 6969 0650 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6970 0654 1946     		mov	r1, r3
 6971 0656 824A     		ldr	r2, .L544+16
 6972 0658 3423     		movs	r3, #52
 6973 065a 03FB01F3 		mul	r3, r3, r1
 6974 065e 1344     		add	r3, r3, r2
 6975 0660 1A68     		ldr	r2, [r3]
 6976 0662 7B4B     		ldr	r3, .L544
 6977 0664 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6978 0668 1846     		mov	r0, r3
 6979 066a 7949     		ldr	r1, .L544
 6980 066c 0346     		mov	r3, r0
 6981 066e 5B00     		lsls	r3, r3, #1
 6982 0670 0344     		add	r3, r3, r0
 6983 0672 1B01     		lsls	r3, r3, #4
 6984 0674 0B44     		add	r3, r3, r1
 6985 0676 03F29513 		addw	r3, r3, #405
 6986 067a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6987 067c 42FA03F6 		asr	r6, r2, r3
 6988 0680 734B     		ldr	r3, .L544
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 162


 6989 0682 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6990 0686 1946     		mov	r1, r3
 6991 0688 754A     		ldr	r2, .L544+16
 6992 068a 3423     		movs	r3, #52
 6993 068c 03FB01F3 		mul	r3, r3, r1
 6994 0690 1344     		add	r3, r3, r2
 6995 0692 1C33     		adds	r3, r3, #28
 6996 0694 1A68     		ldr	r2, [r3]
 6997 0696 6E4B     		ldr	r3, .L544
 6998 0698 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6999 069c 1846     		mov	r0, r3
 7000 069e 6C49     		ldr	r1, .L544
 7001 06a0 0346     		mov	r3, r0
 7002 06a2 5B00     		lsls	r3, r3, #1
 7003 06a4 0344     		add	r3, r3, r0
 7004 06a6 1B01     		lsls	r3, r3, #4
 7005 06a8 0B44     		add	r3, r3, r1
 7006 06aa 03F29513 		addw	r3, r3, #405
 7007 06ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7008 06b0 42FA03FE 		asr	lr, r2, r3
 7009 06b4 6B4B     		ldr	r3, .L544+20
 7010 06b6 1A69     		ldr	r2, [r3, #16]
 7011 06b8 654B     		ldr	r3, .L544
 7012 06ba 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7013 06be 1846     		mov	r0, r3
 7014 06c0 6349     		ldr	r1, .L544
 7015 06c2 0346     		mov	r3, r0
 7016 06c4 5B00     		lsls	r3, r3, #1
 7017 06c6 0344     		add	r3, r3, r0
 7018 06c8 1B01     		lsls	r3, r3, #4
 7019 06ca 0B44     		add	r3, r3, r1
 7020 06cc 03F29513 		addw	r3, r3, #405
 7021 06d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7022 06d2 42FA03F3 		asr	r3, r2, r3
 7023 06d6 7246     		mov	r2, lr
 7024 06d8 3146     		mov	r1, r6
 7025 06da 0120     		movs	r0, #1
 7026 06dc FFF7FEFF 		bl	curr_estim
 7027 06e0 0346     		mov	r3, r0
 7028 06e2 E31A     		subs	r3, r4, r3
 7029 06e4 6049     		ldr	r1, .L544+24
 7030 06e6 1846     		mov	r0, r3
 7031 06e8 FFF7FEFF 		bl	filter
 7032 06ec 0346     		mov	r3, r0
 7033 06ee 1BB2     		sxth	r3, r3
 7034 06f0 1946     		mov	r1, r3
 7035 06f2 5B4A     		ldr	r2, .L544+16
 7036 06f4 3423     		movs	r3, #52
 7037 06f6 03FB05F3 		mul	r3, r3, r5
 7038 06fa 1344     		add	r3, r3, r2
 7039 06fc 1033     		adds	r3, r3, #16
 7040 06fe 1960     		str	r1, [r3]
 7041              	.L421:
2034:..\src/interruptions.c ****         }
2035:..\src/interruptions.c ****     
2036:..\src/interruptions.c ****         // Check Interrupt 
2037:..\src/interruptions.c ****     
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 163


2038:..\src/interruptions.c ****         if (interrupt_flag){
 7042              		.loc 1 2038 0
 7043 0700 5A4B     		ldr	r3, .L544+28
 7044 0702 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7045 0704 002B     		cmp	r3, #0
 7046 0706 06D0     		beq	.L410
2039:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7047              		.loc 1 2039 0
 7048 0708 584B     		ldr	r3, .L544+28
 7049 070a 0022     		movs	r2, #0
 7050 070c 1A70     		strb	r2, [r3]
2040:..\src/interruptions.c ****             interrupt_manager();
 7051              		.loc 1 2040 0
 7052 070e FFF7FEFF 		bl	interrupt_manager
 7053 0712 00E0     		b	.L410
 7054              	.L522:
1950:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7055              		.loc 1 1950 0
 7056 0714 00BF     		nop
 7057              	.L410:
2041:..\src/interruptions.c ****         }
2042:..\src/interruptions.c **** 
2043:..\src/interruptions.c ****     }
2044:..\src/interruptions.c ****     
2045:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2046:..\src/interruptions.c ****         
2047:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2048:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7058              		.loc 1 2048 0
 7059 0716 564B     		ldr	r3, .L544+32
 7060 0718 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7061 071c 002B     		cmp	r3, #0
 7062 071e 05D1     		bne	.L424
2049:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7063              		.loc 1 2049 0
 7064 0720 544B     		ldr	r3, .L544+36
 7065 0722 0022     		movs	r2, #0
 7066 0724 1A70     		strb	r2, [r3]
2050:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7067              		.loc 1 2050 0
 7068 0726 544B     		ldr	r3, .L544+40
 7069 0728 0022     		movs	r2, #0
 7070 072a 1A70     		strb	r2, [r3]
 7071              	.L424:
2051:..\src/interruptions.c ****     }
2052:..\src/interruptions.c **** 
2053:..\src/interruptions.c ****     // EMG 1 calibration state machine
2054:..\src/interruptions.c ****    
2055:..\src/interruptions.c ****     // Calibration state machine
2056:..\src/interruptions.c ****     switch(emg_1_status) {
 7072              		.loc 1 2056 0
 7073 072c 514B     		ldr	r3, .L544+36
 7074 072e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7075 0730 032B     		cmp	r3, #3
 7076 0732 00F2FE80 		bhi	.L523
 7077 0736 01A2     		adr	r2, .L427
 7078 0738 52F823F0 		ldr	pc, [r2, r3, lsl #2]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 164


 7079              		.p2align 2
 7080              	.L427:
 7081 073c 4D070000 		.word	.L426+1
 7082 0740 FD070000 		.word	.L428+1
 7083 0744 13080000 		.word	.L429+1
 7084 0748 89080000 		.word	.L430+1
 7085              		.p2align 1
 7086              	.L426:
2057:..\src/interruptions.c ****         case NORMAL: // normal execution
2058:..\src/interruptions.c ****             
2059:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7087              		.loc 1 2059 0
 7088 074c 404B     		ldr	r3, .L544
 7089 074e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7090 0752 022B     		cmp	r3, #2
 7091 0754 13D0     		beq	.L431
 7092              		.loc 1 2059 0 is_stmt 0 discriminator 1
 7093 0756 3E4B     		ldr	r3, .L544
 7094 0758 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7095 075c 032B     		cmp	r3, #3
 7096 075e 0ED0     		beq	.L431
2060:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7097              		.loc 1 2060 0 is_stmt 1
 7098 0760 434B     		ldr	r3, .L544+32
 7099 0762 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7100 0766 0233     		adds	r3, r3, #2
 7101 0768 3A4A     		ldr	r2, .L544+4
 7102 076a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7103 076e A3F26763 		subw	r3, r3, #1639
 7104 0772 5722     		movs	r2, #87
 7105 0774 02FB03F3 		mul	r3, r2, r3
 7106 0778 5B11     		asrs	r3, r3, #5
 7107 077a 7B60     		str	r3, [r7, #4]
 7108 077c 07E0     		b	.L432
 7109              	.L431:
2061:..\src/interruptions.c ****             }
2062:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2063:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7110              		.loc 1 2063 0
 7111 077e 3C4B     		ldr	r3, .L544+32
 7112 0780 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7113 0784 0233     		adds	r3, r3, #2
 7114 0786 334A     		ldr	r2, .L544+4
 7115 0788 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7116 078c 7B60     		str	r3, [r7, #4]
 7117              	.L432:
2064:..\src/interruptions.c ****             }
2065:..\src/interruptions.c ****             
2066:..\src/interruptions.c ****             if (i_aux < 0) 
 7118              		.loc 1 2066 0
 7119 078e 7B68     		ldr	r3, [r7, #4]
 7120 0790 002B     		cmp	r3, #0
 7121 0792 01DA     		bge	.L433
2067:..\src/interruptions.c ****                 i_aux = 0;
 7122              		.loc 1 2067 0
 7123 0794 0023     		movs	r3, #0
 7124 0796 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 165


 7125              	.L433:
2068:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7126              		.loc 1 2068 0
 7127 0798 3849     		ldr	r1, .L544+44
 7128 079a 7868     		ldr	r0, [r7, #4]
 7129 079c FFF7FEFF 		bl	filter
 7130 07a0 7860     		str	r0, [r7, #4]
2069:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7131              		.loc 1 2069 0
 7132 07a2 7B68     		ldr	r3, [r7, #4]
 7133 07a4 9B02     		lsls	r3, r3, #10
 7134 07a6 1A46     		mov	r2, r3
 7135 07a8 294B     		ldr	r3, .L544
 7136 07aa D3F8F431 		ldr	r3, [r3, #500]
 7137 07ae B2FBF3F3 		udiv	r3, r2, r3
 7138 07b2 7B60     		str	r3, [r7, #4]
2070:..\src/interruptions.c **** 
2071:..\src/interruptions.c ****             if (interrupt_flag){
 7139              		.loc 1 2071 0
 7140 07b4 2D4B     		ldr	r3, .L544+28
 7141 07b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7142 07b8 002B     		cmp	r3, #0
 7143 07ba 04D0     		beq	.L434
2072:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7144              		.loc 1 2072 0
 7145 07bc 2B4B     		ldr	r3, .L544+28
 7146 07be 0022     		movs	r2, #0
 7147 07c0 1A70     		strb	r2, [r3]
2073:..\src/interruptions.c ****                 interrupt_manager();
 7148              		.loc 1 2073 0
 7149 07c2 FFF7FEFF 		bl	interrupt_manager
 7150              	.L434:
2074:..\src/interruptions.c ****             }
2075:..\src/interruptions.c ****             //Saturation
2076:..\src/interruptions.c ****             if (i_aux < 0)
 7151              		.loc 1 2076 0
 7152 07c6 7B68     		ldr	r3, [r7, #4]
 7153 07c8 002B     		cmp	r3, #0
 7154 07ca 02DA     		bge	.L435
2077:..\src/interruptions.c ****                 i_aux = 0;
 7155              		.loc 1 2077 0
 7156 07cc 0023     		movs	r3, #0
 7157 07ce 7B60     		str	r3, [r7, #4]
 7158 07d0 06E0     		b	.L436
 7159              	.L435:
2078:..\src/interruptions.c ****             else 
2079:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7160              		.loc 1 2079 0
 7161 07d2 7B68     		ldr	r3, [r7, #4]
 7162 07d4 B3F5806F 		cmp	r3, #1024
 7163 07d8 02DD     		ble	.L436
2080:..\src/interruptions.c ****                     i_aux = 1024;
 7164              		.loc 1 2080 0
 7165 07da 4FF48063 		mov	r3, #1024
 7166 07de 7B60     		str	r3, [r7, #4]
 7167              	.L436:
2081:..\src/interruptions.c ****             
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 166


2082:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7168              		.loc 1 2082 0
 7169 07e0 274A     		ldr	r2, .L544+48
 7170 07e2 7B68     		ldr	r3, [r7, #4]
 7171 07e4 1360     		str	r3, [r2]
2083:..\src/interruptions.c **** 
2084:..\src/interruptions.c ****             if (interrupt_flag){
 7172              		.loc 1 2084 0
 7173 07e6 214B     		ldr	r3, .L544+28
 7174 07e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7175 07ea 002B     		cmp	r3, #0
 7176 07ec 00F0A380 		beq	.L524
2085:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7177              		.loc 1 2085 0
 7178 07f0 1E4B     		ldr	r3, .L544+28
 7179 07f2 0022     		movs	r2, #0
 7180 07f4 1A70     		strb	r2, [r3]
2086:..\src/interruptions.c ****                 interrupt_manager();
 7181              		.loc 1 2086 0
 7182 07f6 FFF7FEFF 		bl	interrupt_manager
2087:..\src/interruptions.c ****             }
2088:..\src/interruptions.c ****             
2089:..\src/interruptions.c ****             break;
 7183              		.loc 1 2089 0
 7184 07fa 9CE0     		b	.L524
 7185              	.L428:
2090:..\src/interruptions.c **** 
2091:..\src/interruptions.c ****         case RESET: // reset variables
2092:..\src/interruptions.c ****             emg_counter_1 = 0;
 7186              		.loc 1 2092 0
 7187 07fc 214B     		ldr	r3, .L544+52
 7188 07fe 0022     		movs	r2, #0
 7189 0800 1A80     		strh	r2, [r3]	@ movhi
2093:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7190              		.loc 1 2093 0
 7191 0802 134B     		ldr	r3, .L544
 7192 0804 0022     		movs	r2, #0
 7193 0806 C3F8F421 		str	r2, [r3, #500]
2094:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7194              		.loc 1 2094 0
 7195 080a 1A4B     		ldr	r3, .L544+36
 7196 080c 0222     		movs	r2, #2
 7197 080e 1A70     		strb	r2, [r3]
2095:..\src/interruptions.c ****             break;
 7198              		.loc 1 2095 0
 7199 0810 96E0     		b	.L438
 7200              	.L429:
2096:..\src/interruptions.c **** 
2097:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2098:..\src/interruptions.c ****             emg_counter_1++;
 7201              		.loc 1 2098 0
 7202 0812 1C4B     		ldr	r3, .L544+52
 7203 0814 1B88     		ldrh	r3, [r3]
 7204 0816 0133     		adds	r3, r3, #1
 7205 0818 9AB2     		uxth	r2, r3
 7206 081a 1A4B     		ldr	r3, .L544+52
 7207 081c 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 167


2099:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7208              		.loc 1 2099 0
 7209 081e 194B     		ldr	r3, .L544+52
 7210 0820 1B88     		ldrh	r3, [r3]
 7211 0822 B3F5FA7F 		cmp	r3, #500
 7212 0826 40F08880 		bne	.L525
2100:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7213              		.loc 1 2100 0
 7214 082a 164B     		ldr	r3, .L544+52
 7215 082c 0022     		movs	r2, #0
 7216 082e 1A80     		strh	r2, [r3]	@ movhi
2101:..\src/interruptions.c ****                 LED_control(1);
 7217              		.loc 1 2101 0
 7218 0830 0120     		movs	r0, #1
 7219 0832 FFF7FEFF 		bl	LED_control
2102:..\src/interruptions.c **** 				
2103:..\src/interruptions.c ****                 if (interrupt_flag){
 7220              		.loc 1 2103 0
 7221 0836 0D4B     		ldr	r3, .L544+28
 7222 0838 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7223 083a 002B     		cmp	r3, #0
 7224 083c 04D0     		beq	.L440
2104:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7225              		.loc 1 2104 0
 7226 083e 0B4B     		ldr	r3, .L544+28
 7227 0840 0022     		movs	r2, #0
 7228 0842 1A70     		strb	r2, [r3]
2105:..\src/interruptions.c ****                     interrupt_manager();
 7229              		.loc 1 2105 0
 7230 0844 FFF7FEFF 		bl	interrupt_manager
 7231              	.L440:
2106:..\src/interruptions.c ****                 }
2107:..\src/interruptions.c ****                 
2108:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7232              		.loc 1 2108 0
 7233 0848 0A4B     		ldr	r3, .L544+36
 7234 084a 0322     		movs	r2, #3
 7235 084c 1A70     		strb	r2, [r3]
2109:..\src/interruptions.c ****             }
2110:..\src/interruptions.c ****             break;
 7236              		.loc 1 2110 0
 7237 084e 74E0     		b	.L525
 7238              	.L545:
 7239              		.align	2
 7240              	.L544:
 7241 0850 00000000 		.word	g_mem
 7242 0854 00000000 		.word	ADC_buf
 7243 0858 08000000 		.word	filt_i+8
 7244 085c 00000000 		.word	pwm_sign
 7245 0860 00000000 		.word	g_meas
 7246 0864 00000000 		.word	g_ref
 7247 0868 08000000 		.word	filt_curr_diff+8
 7248 086c 00000000 		.word	interrupt_flag
 7249 0870 00000000 		.word	c_mem
 7250 0874 00000000 		.word	emg_1_status
 7251 0878 00000000 		.word	emg_2_status
 7252 087c 00000000 		.word	filt_emg
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 168


 7253 0880 00000000 		.word	g_adc_meas
 7254 0884 7C010000 		.word	emg_counter_1.10644
 7255              	.L430:
2111:..\src/interruptions.c **** 
2112:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2113:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2114:..\src/interruptions.c ****             emg_counter_1++;
 7256              		.loc 1 2114 0
 7257 0888 AF4B     		ldr	r3, .L546
 7258 088a 1B88     		ldrh	r3, [r3]
 7259 088c 0133     		adds	r3, r3, #1
 7260 088e 9AB2     		uxth	r2, r3
 7261 0890 AD4B     		ldr	r3, .L546
 7262 0892 1A80     		strh	r2, [r3]	@ movhi
2115:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7263              		.loc 1 2115 0
 7264 0894 AD4B     		ldr	r3, .L546+4
 7265 0896 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7266 089a 0233     		adds	r3, r3, #2
 7267 089c AC4A     		ldr	r2, .L546+8
 7268 089e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7269 08a2 002B     		cmp	r3, #0
 7270 08a4 07DA     		bge	.L441
2116:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7271              		.loc 1 2116 0
 7272 08a6 A94B     		ldr	r3, .L546+4
 7273 08a8 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7274 08ac 0233     		adds	r3, r3, #2
 7275 08ae A84A     		ldr	r2, .L546+8
 7276 08b0 0021     		movs	r1, #0
 7277 08b2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7278              	.L441:
2117:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7279              		.loc 1 2117 0
 7280 08b6 A54B     		ldr	r3, .L546+4
 7281 08b8 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7282 08bc 0233     		adds	r3, r3, #2
 7283 08be A44A     		ldr	r2, .L546+8
 7284 08c0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7285 08c4 A349     		ldr	r1, .L546+12
 7286 08c6 1846     		mov	r0, r3
 7287 08c8 FFF7FEFF 		bl	filter
 7288 08cc 0246     		mov	r2, r0
 7289 08ce A24B     		ldr	r3, .L546+16
 7290 08d0 D3F8F431 		ldr	r3, [r3, #500]
 7291 08d4 1344     		add	r3, r3, r2
 7292 08d6 A04A     		ldr	r2, .L546+16
 7293 08d8 C2F8F431 		str	r3, [r2, #500]
2118:..\src/interruptions.c ****             
2119:..\src/interruptions.c ****             if (interrupt_flag){
 7294              		.loc 1 2119 0
 7295 08dc 9F4B     		ldr	r3, .L546+20
 7296 08de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7297 08e0 002B     		cmp	r3, #0
 7298 08e2 04D0     		beq	.L442
2120:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7299              		.loc 1 2120 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 169


 7300 08e4 9D4B     		ldr	r3, .L546+20
 7301 08e6 0022     		movs	r2, #0
 7302 08e8 1A70     		strb	r2, [r3]
2121:..\src/interruptions.c ****                 interrupt_manager();
 7303              		.loc 1 2121 0
 7304 08ea FFF7FEFF 		bl	interrupt_manager
 7305              	.L442:
2122:..\src/interruptions.c ****             }
2123:..\src/interruptions.c ****             
2124:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7306              		.loc 1 2124 0
 7307 08ee 964B     		ldr	r3, .L546
 7308 08f0 1B88     		ldrh	r3, [r3]
 7309 08f2 B3F57A7F 		cmp	r3, #1000
 7310 08f6 22D1     		bne	.L526
2125:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7311              		.loc 1 2125 0
 7312 08f8 974B     		ldr	r3, .L546+16
 7313 08fa D3F8F431 		ldr	r3, [r3, #500]
 7314 08fe 984A     		ldr	r2, .L546+24
 7315 0900 A2FB0323 		umull	r2, r3, r2, r3
 7316 0904 9B09     		lsrs	r3, r3, #6
 7317 0906 944A     		ldr	r2, .L546+16
 7318 0908 C2F8F431 		str	r3, [r2, #500]
2126:..\src/interruptions.c **** 
2127:..\src/interruptions.c ****                 if (interrupt_flag){
 7319              		.loc 1 2127 0
 7320 090c 934B     		ldr	r3, .L546+20
 7321 090e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7322 0910 002B     		cmp	r3, #0
 7323 0912 04D0     		beq	.L444
2128:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7324              		.loc 1 2128 0
 7325 0914 914B     		ldr	r3, .L546+20
 7326 0916 0022     		movs	r2, #0
 7327 0918 1A70     		strb	r2, [r3]
2129:..\src/interruptions.c ****                     interrupt_manager();
 7328              		.loc 1 2129 0
 7329 091a FFF7FEFF 		bl	interrupt_manager
 7330              	.L444:
2130:..\src/interruptions.c ****                 }                    
2131:..\src/interruptions.c ****                 
2132:..\src/interruptions.c ****                 LED_control(0);
 7331              		.loc 1 2132 0
 7332 091e 0020     		movs	r0, #0
 7333 0920 FFF7FEFF 		bl	LED_control
2133:..\src/interruptions.c **** 				
2134:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7334              		.loc 1 2134 0
 7335 0924 884B     		ldr	r3, .L546
 7336 0926 0022     		movs	r2, #0
 7337 0928 1A80     		strh	r2, [r3]	@ movhi
2135:..\src/interruptions.c **** 
2136:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7338              		.loc 1 2136 0
 7339 092a 8E4B     		ldr	r3, .L546+28
 7340 092c 0022     		movs	r2, #0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 170


 7341 092e 1A70     		strb	r2, [r3]
2137:..\src/interruptions.c ****             }
2138:..\src/interruptions.c ****             break;
 7342              		.loc 1 2138 0
 7343 0930 05E0     		b	.L526
 7344              	.L523:
2139:..\src/interruptions.c **** 
2140:..\src/interruptions.c ****         default:
2141:..\src/interruptions.c ****             break;
 7345              		.loc 1 2141 0
 7346 0932 00BF     		nop
 7347 0934 04E0     		b	.L438
 7348              	.L524:
2089:..\src/interruptions.c **** 
 7349              		.loc 1 2089 0
 7350 0936 00BF     		nop
 7351 0938 02E0     		b	.L438
 7352              	.L525:
2110:..\src/interruptions.c **** 
 7353              		.loc 1 2110 0
 7354 093a 00BF     		nop
 7355 093c 00E0     		b	.L438
 7356              	.L526:
2138:..\src/interruptions.c **** 
 7357              		.loc 1 2138 0
 7358 093e 00BF     		nop
 7359              	.L438:
2142:..\src/interruptions.c ****     }
2143:..\src/interruptions.c **** 
2144:..\src/interruptions.c ****     if (interrupt_flag){
 7360              		.loc 1 2144 0
 7361 0940 864B     		ldr	r3, .L546+20
 7362 0942 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7363 0944 002B     		cmp	r3, #0
 7364 0946 04D0     		beq	.L445
2145:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7365              		.loc 1 2145 0
 7366 0948 844B     		ldr	r3, .L546+20
 7367 094a 0022     		movs	r2, #0
 7368 094c 1A70     		strb	r2, [r3]
2146:..\src/interruptions.c ****         interrupt_manager();
 7369              		.loc 1 2146 0
 7370 094e FFF7FEFF 		bl	interrupt_manager
 7371              	.L445:
2147:..\src/interruptions.c ****     }
2148:..\src/interruptions.c ****     // EMG 2 calibration state machine
2149:..\src/interruptions.c ****     switch(emg_2_status) {
 7372              		.loc 1 2149 0
 7373 0952 854B     		ldr	r3, .L546+32
 7374 0954 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7375 0956 052B     		cmp	r3, #5
 7376 0958 00F2CA81 		bhi	.L527
 7377 095c 01A2     		adr	r2, .L448
 7378 095e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7379 0962 00BF     		.p2align 2
 7380              	.L448:
 7381 0964 7D090000 		.word	.L447+1
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 171


 7382 0968 1D0A0000 		.word	.L449+1
 7383 096c 450A0000 		.word	.L450+1
 7384 0970 830A0000 		.word	.L451+1
 7385 0974 350B0000 		.word	.L452+1
 7386 0978 790B0000 		.word	.L453+1
 7387              		.p2align 1
 7388              	.L447:
2150:..\src/interruptions.c ****         case NORMAL: // normal execution
2151:..\src/interruptions.c ****         
2152:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7389              		.loc 1 2152 0
 7390 097c 764B     		ldr	r3, .L546+16
 7391 097e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7392 0982 022B     		cmp	r3, #2
 7393 0984 14D0     		beq	.L454
 7394              		.loc 1 2152 0 is_stmt 0 discriminator 1
 7395 0986 744B     		ldr	r3, .L546+16
 7396 0988 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7397 098c 032B     		cmp	r3, #3
 7398 098e 0FD0     		beq	.L454
2153:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7399              		.loc 1 2153 0 is_stmt 1
 7400 0990 6E4B     		ldr	r3, .L546+4
 7401 0992 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7402 0996 C3F10303 		rsb	r3, r3, #3
 7403 099a 6D4A     		ldr	r2, .L546+8
 7404 099c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7405 09a0 A3F26763 		subw	r3, r3, #1639
 7406 09a4 5722     		movs	r2, #87
 7407 09a6 02FB03F3 		mul	r3, r2, r3
 7408 09aa 5B11     		asrs	r3, r3, #5
 7409 09ac 7B60     		str	r3, [r7, #4]
 7410 09ae 08E0     		b	.L455
 7411              	.L454:
2154:..\src/interruptions.c ****             }
2155:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2156:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7412              		.loc 1 2156 0
 7413 09b0 664B     		ldr	r3, .L546+4
 7414 09b2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7415 09b6 C3F10303 		rsb	r3, r3, #3
 7416 09ba 654A     		ldr	r2, .L546+8
 7417 09bc 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7418 09c0 7B60     		str	r3, [r7, #4]
 7419              	.L455:
2157:..\src/interruptions.c ****             }
2158:..\src/interruptions.c **** 
2159:..\src/interruptions.c ****             if (i_aux < 0)
 7420              		.loc 1 2159 0
 7421 09c2 7B68     		ldr	r3, [r7, #4]
 7422 09c4 002B     		cmp	r3, #0
 7423 09c6 01DA     		bge	.L456
2160:..\src/interruptions.c ****                 i_aux = 0;
 7424              		.loc 1 2160 0
 7425 09c8 0023     		movs	r3, #0
 7426 09ca 7B60     		str	r3, [r7, #4]
 7427              	.L456:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 172


2161:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7428              		.loc 1 2161 0
 7429 09cc 6749     		ldr	r1, .L546+36
 7430 09ce 7868     		ldr	r0, [r7, #4]
 7431 09d0 FFF7FEFF 		bl	filter
 7432 09d4 7860     		str	r0, [r7, #4]
2162:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7433              		.loc 1 2162 0
 7434 09d6 7B68     		ldr	r3, [r7, #4]
 7435 09d8 9B02     		lsls	r3, r3, #10
 7436 09da 1A46     		mov	r2, r3
 7437 09dc 5E4B     		ldr	r3, .L546+16
 7438 09de D3F8F831 		ldr	r3, [r3, #504]
 7439 09e2 B2FBF3F3 		udiv	r3, r2, r3
 7440 09e6 7B60     		str	r3, [r7, #4]
2163:..\src/interruptions.c **** 
2164:..\src/interruptions.c ****             if (interrupt_flag){
 7441              		.loc 1 2164 0
 7442 09e8 5C4B     		ldr	r3, .L546+20
 7443 09ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7444 09ec 002B     		cmp	r3, #0
 7445 09ee 04D0     		beq	.L457
2165:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7446              		.loc 1 2165 0
 7447 09f0 5A4B     		ldr	r3, .L546+20
 7448 09f2 0022     		movs	r2, #0
 7449 09f4 1A70     		strb	r2, [r3]
2166:..\src/interruptions.c ****                 interrupt_manager();
 7450              		.loc 1 2166 0
 7451 09f6 FFF7FEFF 		bl	interrupt_manager
 7452              	.L457:
2167:..\src/interruptions.c ****             }
2168:..\src/interruptions.c ****             
2169:..\src/interruptions.c ****             if (i_aux < 0) 
 7453              		.loc 1 2169 0
 7454 09fa 7B68     		ldr	r3, [r7, #4]
 7455 09fc 002B     		cmp	r3, #0
 7456 09fe 02DA     		bge	.L458
2170:..\src/interruptions.c ****                 i_aux = 0;
 7457              		.loc 1 2170 0
 7458 0a00 0023     		movs	r3, #0
 7459 0a02 7B60     		str	r3, [r7, #4]
 7460 0a04 06E0     		b	.L459
 7461              	.L458:
2171:..\src/interruptions.c ****             else 
2172:..\src/interruptions.c ****                 if (i_aux > 1024)
 7462              		.loc 1 2172 0
 7463 0a06 7B68     		ldr	r3, [r7, #4]
 7464 0a08 B3F5806F 		cmp	r3, #1024
 7465 0a0c 02DD     		ble	.L459
2173:..\src/interruptions.c ****                     i_aux = 1024;
 7466              		.loc 1 2173 0
 7467 0a0e 4FF48063 		mov	r3, #1024
 7468 0a12 7B60     		str	r3, [r7, #4]
 7469              	.L459:
2174:..\src/interruptions.c ****             
2175:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 173


 7470              		.loc 1 2175 0
 7471 0a14 564A     		ldr	r2, .L546+40
 7472 0a16 7B68     		ldr	r3, [r7, #4]
 7473 0a18 5360     		str	r3, [r2, #4]
2176:..\src/interruptions.c **** 
2177:..\src/interruptions.c ****             break;
 7474              		.loc 1 2177 0
 7475 0a1a 72E1     		b	.L460
 7476              	.L449:
2178:..\src/interruptions.c **** 
2179:..\src/interruptions.c ****         case RESET: // reset variables
2180:..\src/interruptions.c ****             emg_counter_2 = 0;
 7477              		.loc 1 2180 0
 7478 0a1c 554B     		ldr	r3, .L546+44
 7479 0a1e 0022     		movs	r2, #0
 7480 0a20 1A80     		strh	r2, [r3]	@ movhi
2181:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7481              		.loc 1 2181 0
 7482 0a22 4D4B     		ldr	r3, .L546+16
 7483 0a24 0022     		movs	r2, #0
 7484 0a26 C3F8F821 		str	r2, [r3, #504]
2182:..\src/interruptions.c **** 
2183:..\src/interruptions.c ****             if (interrupt_flag){
 7485              		.loc 1 2183 0
 7486 0a2a 4C4B     		ldr	r3, .L546+20
 7487 0a2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7488 0a2e 002B     		cmp	r3, #0
 7489 0a30 04D0     		beq	.L461
2184:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7490              		.loc 1 2184 0
 7491 0a32 4A4B     		ldr	r3, .L546+20
 7492 0a34 0022     		movs	r2, #0
 7493 0a36 1A70     		strb	r2, [r3]
2185:..\src/interruptions.c ****                 interrupt_manager();
 7494              		.loc 1 2185 0
 7495 0a38 FFF7FEFF 		bl	interrupt_manager
 7496              	.L461:
2186:..\src/interruptions.c ****             }
2187:..\src/interruptions.c ****             
2188:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7497              		.loc 1 2188 0
 7498 0a3c 4A4B     		ldr	r3, .L546+32
 7499 0a3e 0422     		movs	r2, #4
 7500 0a40 1A70     		strb	r2, [r3]
2189:..\src/interruptions.c ****             break;
 7501              		.loc 1 2189 0
 7502 0a42 5EE1     		b	.L460
 7503              	.L450:
2190:..\src/interruptions.c **** 
2191:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2192:..\src/interruptions.c ****             emg_counter_2++;
 7504              		.loc 1 2192 0
 7505 0a44 4B4B     		ldr	r3, .L546+44
 7506 0a46 1B88     		ldrh	r3, [r3]
 7507 0a48 0133     		adds	r3, r3, #1
 7508 0a4a 9AB2     		uxth	r2, r3
 7509 0a4c 494B     		ldr	r3, .L546+44
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 174


 7510 0a4e 1A80     		strh	r2, [r3]	@ movhi
2193:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7511              		.loc 1 2193 0
 7512 0a50 484B     		ldr	r3, .L546+44
 7513 0a52 1B88     		ldrh	r3, [r3]
 7514 0a54 B3F5FA7F 		cmp	r3, #500
 7515 0a58 40F04C81 		bne	.L528
2194:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7516              		.loc 1 2194 0
 7517 0a5c 454B     		ldr	r3, .L546+44
 7518 0a5e 0022     		movs	r2, #0
 7519 0a60 1A80     		strh	r2, [r3]	@ movhi
2195:..\src/interruptions.c ****                 LED_control(1);
 7520              		.loc 1 2195 0
 7521 0a62 0120     		movs	r0, #1
 7522 0a64 FFF7FEFF 		bl	LED_control
2196:..\src/interruptions.c **** 
2197:..\src/interruptions.c ****                 if (interrupt_flag){
 7523              		.loc 1 2197 0
 7524 0a68 3C4B     		ldr	r3, .L546+20
 7525 0a6a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7526 0a6c 002B     		cmp	r3, #0
 7527 0a6e 04D0     		beq	.L463
2198:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7528              		.loc 1 2198 0
 7529 0a70 3A4B     		ldr	r3, .L546+20
 7530 0a72 0022     		movs	r2, #0
 7531 0a74 1A70     		strb	r2, [r3]
2199:..\src/interruptions.c ****                     interrupt_manager();
 7532              		.loc 1 2199 0
 7533 0a76 FFF7FEFF 		bl	interrupt_manager
 7534              	.L463:
2200:..\src/interruptions.c ****                 }
2201:..\src/interruptions.c ****                 
2202:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7535              		.loc 1 2202 0
 7536 0a7a 3B4B     		ldr	r3, .L546+32
 7537 0a7c 0322     		movs	r2, #3
 7538 0a7e 1A70     		strb	r2, [r3]
2203:..\src/interruptions.c ****             }
2204:..\src/interruptions.c ****             break;
 7539              		.loc 1 2204 0
 7540 0a80 38E1     		b	.L528
 7541              	.L451:
2205:..\src/interruptions.c **** 
2206:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2207:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2208:..\src/interruptions.c ****             emg_counter_2++;
 7542              		.loc 1 2208 0
 7543 0a82 3C4B     		ldr	r3, .L546+44
 7544 0a84 1B88     		ldrh	r3, [r3]
 7545 0a86 0133     		adds	r3, r3, #1
 7546 0a88 9AB2     		uxth	r2, r3
 7547 0a8a 3A4B     		ldr	r3, .L546+44
 7548 0a8c 1A80     		strh	r2, [r3]	@ movhi
2209:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7549              		.loc 1 2209 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 175


 7550 0a8e 2F4B     		ldr	r3, .L546+4
 7551 0a90 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7552 0a94 C3F10303 		rsb	r3, r3, #3
 7553 0a98 2D4A     		ldr	r2, .L546+8
 7554 0a9a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7555 0a9e 002B     		cmp	r3, #0
 7556 0aa0 08DA     		bge	.L464
2210:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7557              		.loc 1 2210 0
 7558 0aa2 2A4B     		ldr	r3, .L546+4
 7559 0aa4 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7560 0aa8 C3F10303 		rsb	r3, r3, #3
 7561 0aac 284A     		ldr	r2, .L546+8
 7562 0aae 0021     		movs	r1, #0
 7563 0ab0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7564              	.L464:
2211:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7565              		.loc 1 2211 0
 7566 0ab4 254B     		ldr	r3, .L546+4
 7567 0ab6 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7568 0aba C3F10303 		rsb	r3, r3, #3
 7569 0abe 244A     		ldr	r2, .L546+8
 7570 0ac0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7571 0ac4 2949     		ldr	r1, .L546+36
 7572 0ac6 1846     		mov	r0, r3
 7573 0ac8 FFF7FEFF 		bl	filter
 7574 0acc 0246     		mov	r2, r0
 7575 0ace 224B     		ldr	r3, .L546+16
 7576 0ad0 D3F8F831 		ldr	r3, [r3, #504]
 7577 0ad4 1344     		add	r3, r3, r2
 7578 0ad6 204A     		ldr	r2, .L546+16
 7579 0ad8 C2F8F831 		str	r3, [r2, #504]
2212:..\src/interruptions.c **** 
2213:..\src/interruptions.c ****             if (interrupt_flag){
 7580              		.loc 1 2213 0
 7581 0adc 1F4B     		ldr	r3, .L546+20
 7582 0ade 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7583 0ae0 002B     		cmp	r3, #0
 7584 0ae2 04D0     		beq	.L465
2214:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7585              		.loc 1 2214 0
 7586 0ae4 1D4B     		ldr	r3, .L546+20
 7587 0ae6 0022     		movs	r2, #0
 7588 0ae8 1A70     		strb	r2, [r3]
2215:..\src/interruptions.c ****                 interrupt_manager();
 7589              		.loc 1 2215 0
 7590 0aea FFF7FEFF 		bl	interrupt_manager
 7591              	.L465:
2216:..\src/interruptions.c ****             }
2217:..\src/interruptions.c ****             
2218:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7592              		.loc 1 2218 0
 7593 0aee 214B     		ldr	r3, .L546+44
 7594 0af0 1B88     		ldrh	r3, [r3]
 7595 0af2 B3F57A7F 		cmp	r3, #1000
 7596 0af6 40F0FF80 		bne	.L529
2219:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 176


 7597              		.loc 1 2219 0
 7598 0afa 174B     		ldr	r3, .L546+16
 7599 0afc D3F8F831 		ldr	r3, [r3, #504]
 7600 0b00 174A     		ldr	r2, .L546+24
 7601 0b02 A2FB0323 		umull	r2, r3, r2, r3
 7602 0b06 9B09     		lsrs	r3, r3, #6
 7603 0b08 134A     		ldr	r2, .L546+16
 7604 0b0a C2F8F831 		str	r3, [r2, #504]
2220:..\src/interruptions.c ****                 LED_control(0);
 7605              		.loc 1 2220 0
 7606 0b0e 0020     		movs	r0, #0
 7607 0b10 FFF7FEFF 		bl	LED_control
2221:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7608              		.loc 1 2221 0
 7609 0b14 174B     		ldr	r3, .L546+44
 7610 0b16 0022     		movs	r2, #0
 7611 0b18 1A80     		strh	r2, [r3]	@ movhi
2222:..\src/interruptions.c ****             
2223:..\src/interruptions.c ****                 if (interrupt_flag){
 7612              		.loc 1 2223 0
 7613 0b1a 104B     		ldr	r3, .L546+20
 7614 0b1c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7615 0b1e 002B     		cmp	r3, #0
 7616 0b20 04D0     		beq	.L467
2224:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7617              		.loc 1 2224 0
 7618 0b22 0E4B     		ldr	r3, .L546+20
 7619 0b24 0022     		movs	r2, #0
 7620 0b26 1A70     		strb	r2, [r3]
2225:..\src/interruptions.c ****                     interrupt_manager();
 7621              		.loc 1 2225 0
 7622 0b28 FFF7FEFF 		bl	interrupt_manager
 7623              	.L467:
2226:..\src/interruptions.c ****                 }
2227:..\src/interruptions.c ****                 
2228:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7624              		.loc 1 2228 0
 7625 0b2c 0E4B     		ldr	r3, .L546+32
 7626 0b2e 0522     		movs	r2, #5
 7627 0b30 1A70     		strb	r2, [r3]
2229:..\src/interruptions.c ****             }
2230:..\src/interruptions.c ****             break;
 7628              		.loc 1 2230 0
 7629 0b32 E1E0     		b	.L529
 7630              	.L452:
2231:..\src/interruptions.c **** 
2232:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2233:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7631              		.loc 1 2233 0
 7632 0b34 0B4B     		ldr	r3, .L546+28
 7633 0b36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7634 0b38 002B     		cmp	r3, #0
 7635 0b3a 40F0DF80 		bne	.L530
2234:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7636              		.loc 1 2234 0
 7637 0b3e 0A4B     		ldr	r3, .L546+32
 7638 0b40 0222     		movs	r2, #2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 177


 7639 0b42 1A70     		strb	r2, [r3]
2235:..\src/interruptions.c ****             break;
 7640              		.loc 1 2235 0
 7641 0b44 DAE0     		b	.L530
 7642              	.L547:
 7643 0b46 00BF     		.align	2
 7644              	.L546:
 7645 0b48 7C010000 		.word	emg_counter_1.10644
 7646 0b4c 00000000 		.word	c_mem
 7647 0b50 00000000 		.word	ADC_buf
 7648 0b54 00000000 		.word	filt_emg
 7649 0b58 00000000 		.word	g_mem
 7650 0b5c 00000000 		.word	interrupt_flag
 7651 0b60 D34D6210 		.word	274877907
 7652 0b64 00000000 		.word	emg_1_status
 7653 0b68 00000000 		.word	emg_2_status
 7654 0b6c 08000000 		.word	filt_emg+8
 7655 0b70 00000000 		.word	g_adc_meas
 7656 0b74 7E010000 		.word	emg_counter_2.10645
 7657              	.L453:
2236:..\src/interruptions.c **** 
2237:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2238:..\src/interruptions.c ****             emg_counter_2++;
 7658              		.loc 1 2238 0
 7659 0b78 B04B     		ldr	r3, .L548
 7660 0b7a 1B88     		ldrh	r3, [r3]
 7661 0b7c 0133     		adds	r3, r3, #1
 7662 0b7e 9AB2     		uxth	r2, r3
 7663 0b80 AE4B     		ldr	r3, .L548
 7664 0b82 1A80     		strh	r2, [r3]	@ movhi
2239:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7665              		.loc 1 2239 0
 7666 0b84 AD4B     		ldr	r3, .L548
 7667 0b86 1B88     		ldrh	r3, [r3]
 7668 0b88 B3F5FA7F 		cmp	r3, #500
 7669 0b8c 40F0B880 		bne	.L531
2240:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7670              		.loc 1 2240 0
 7671 0b90 AA4B     		ldr	r3, .L548
 7672 0b92 0022     		movs	r2, #0
 7673 0b94 1A80     		strh	r2, [r3]	@ movhi
2241:..\src/interruptions.c ****                 
2242:..\src/interruptions.c ****                 if (interrupt_flag){
 7674              		.loc 1 2242 0
 7675 0b96 AA4B     		ldr	r3, .L548+4
 7676 0b98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7677 0b9a 002B     		cmp	r3, #0
 7678 0b9c 04D0     		beq	.L470
2243:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7679              		.loc 1 2243 0
 7680 0b9e A84B     		ldr	r3, .L548+4
 7681 0ba0 0022     		movs	r2, #0
 7682 0ba2 1A70     		strb	r2, [r3]
2244:..\src/interruptions.c ****                     interrupt_manager();
 7683              		.loc 1 2244 0
 7684 0ba4 FFF7FEFF 		bl	interrupt_manager
 7685              	.L470:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 178


2245:..\src/interruptions.c ****                 }
2246:..\src/interruptions.c ****                 
2247:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7686              		.loc 1 2247 0
 7687 0ba8 A64B     		ldr	r3, .L548+8
 7688 0baa 0022     		movs	r2, #0
 7689 0bac 1A70     		strb	r2, [r3]
 7690 0bae 93E0     		b	.L471
 7691              	.L475:
2248:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7692              		.loc 1 2248 0
 7693 0bb0 A44B     		ldr	r3, .L548+8
 7694 0bb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7695 0bb4 1946     		mov	r1, r3
 7696 0bb6 A44A     		ldr	r2, .L548+12
 7697 0bb8 0B46     		mov	r3, r1
 7698 0bba DB00     		lsls	r3, r3, #3
 7699 0bbc 5B1A     		subs	r3, r3, r1
 7700 0bbe 1B01     		lsls	r3, r3, #4
 7701 0bc0 1344     		add	r3, r3, r2
 7702 0bc2 03F58773 		add	r3, r3, #270
 7703 0bc6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7704 0bc8 022B     		cmp	r3, #2
 7705 0bca 37D0     		beq	.L472
2249:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7706              		.loc 1 2249 0 discriminator 1
 7707 0bcc 9D4B     		ldr	r3, .L548+8
 7708 0bce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7709 0bd0 1946     		mov	r1, r3
 7710 0bd2 9D4A     		ldr	r2, .L548+12
 7711 0bd4 0B46     		mov	r3, r1
 7712 0bd6 DB00     		lsls	r3, r3, #3
 7713 0bd8 5B1A     		subs	r3, r3, r1
 7714 0bda 1B01     		lsls	r3, r3, #4
 7715 0bdc 1344     		add	r3, r3, r2
 7716 0bde 03F58773 		add	r3, r3, #270
 7717 0be2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2248:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7718              		.loc 1 2248 0 discriminator 1
 7719 0be4 032B     		cmp	r3, #3
 7720 0be6 29D0     		beq	.L472
2250:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7721              		.loc 1 2250 0
 7722 0be8 964B     		ldr	r3, .L548+8
 7723 0bea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7724 0bec 1946     		mov	r1, r3
 7725 0bee 964A     		ldr	r2, .L548+12
 7726 0bf0 0B46     		mov	r3, r1
 7727 0bf2 DB00     		lsls	r3, r3, #3
 7728 0bf4 5B1A     		subs	r3, r3, r1
 7729 0bf6 1B01     		lsls	r3, r3, #4
 7730 0bf8 1344     		add	r3, r3, r2
 7731 0bfa 03F58773 		add	r3, r3, #270
 7732 0bfe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2249:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7733              		.loc 1 2249 0
 7734 0c00 042B     		cmp	r3, #4
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 179


 7735 0c02 1BD0     		beq	.L472
2251:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7736              		.loc 1 2251 0
 7737 0c04 8F4B     		ldr	r3, .L548+8
 7738 0c06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7739 0c08 1946     		mov	r1, r3
 7740 0c0a 8F4A     		ldr	r2, .L548+12
 7741 0c0c 0B46     		mov	r3, r1
 7742 0c0e DB00     		lsls	r3, r3, #3
 7743 0c10 5B1A     		subs	r3, r3, r1
 7744 0c12 1B01     		lsls	r3, r3, #4
 7745 0c14 1344     		add	r3, r3, r2
 7746 0c16 03F58773 		add	r3, r3, #270
 7747 0c1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2250:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7748              		.loc 1 2250 0
 7749 0c1c 052B     		cmp	r3, #5
 7750 0c1e 0DD0     		beq	.L472
2252:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 7751              		.loc 1 2252 0
 7752 0c20 884B     		ldr	r3, .L548+8
 7753 0c22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7754 0c24 1946     		mov	r1, r3
 7755 0c26 884A     		ldr	r2, .L548+12
 7756 0c28 0B46     		mov	r3, r1
 7757 0c2a DB00     		lsls	r3, r3, #3
 7758 0c2c 5B1A     		subs	r3, r3, r1
 7759 0c2e 1B01     		lsls	r3, r3, #4
 7760 0c30 1344     		add	r3, r3, r2
 7761 0c32 03F58773 		add	r3, r3, #270
 7762 0c36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2251:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7763              		.loc 1 2251 0
 7764 0c38 072B     		cmp	r3, #7
 7765 0c3a 47D1     		bne	.L473
 7766              	.L472:
2253:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7767              		.loc 1 2253 0
 7768 0c3c 814B     		ldr	r3, .L548+8
 7769 0c3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7770 0c40 1946     		mov	r1, r3
 7771 0c42 814A     		ldr	r2, .L548+12
 7772 0c44 0B46     		mov	r3, r1
 7773 0c46 DB00     		lsls	r3, r3, #3
 7774 0c48 5B1A     		subs	r3, r3, r1
 7775 0c4a 1B01     		lsls	r3, r3, #4
 7776 0c4c 1344     		add	r3, r3, r2
 7777 0c4e 03F20F13 		addw	r3, r3, #271
 7778 0c52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7779 0c54 002B     		cmp	r3, #0
 7780 0c56 19D1     		bne	.L474
2254:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7781              		.loc 1 2254 0
 7782 0c58 7A4B     		ldr	r3, .L548+8
 7783 0c5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7784 0c5c 1846     		mov	r0, r3
 7785 0c5e 794B     		ldr	r3, .L548+8
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 180


 7786 0c60 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7787 0c62 1946     		mov	r1, r3
 7788 0c64 794A     		ldr	r2, .L548+16
 7789 0c66 0B46     		mov	r3, r1
 7790 0c68 DB00     		lsls	r3, r3, #3
 7791 0c6a 5B1A     		subs	r3, r3, r1
 7792 0c6c 1B01     		lsls	r3, r3, #4
 7793 0c6e 1344     		add	r3, r3, r2
 7794 0c70 03F58873 		add	r3, r3, #272
 7795 0c74 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7796 0c76 1946     		mov	r1, r3
 7797 0c78 754A     		ldr	r2, .L548+20
 7798 0c7a 3423     		movs	r3, #52
 7799 0c7c 03FB01F3 		mul	r3, r3, r1
 7800 0c80 1344     		add	r3, r3, r2
 7801 0c82 1A68     		ldr	r2, [r3]
 7802 0c84 7349     		ldr	r1, .L548+24
 7803 0c86 0301     		lsls	r3, r0, #4
 7804 0c88 0B44     		add	r3, r3, r1
 7805 0c8a 1A60     		str	r2, [r3]
 7806              	.L474:
2255:..\src/interruptions.c ****                         }
2256:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7807              		.loc 1 2256 0
 7808 0c8c 6D4B     		ldr	r3, .L548+8
 7809 0c8e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7810 0c90 1846     		mov	r0, r3
 7811 0c92 6C4B     		ldr	r3, .L548+8
 7812 0c94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7813 0c96 1946     		mov	r1, r3
 7814 0c98 6B4A     		ldr	r2, .L548+12
 7815 0c9a 0B46     		mov	r3, r1
 7816 0c9c DB00     		lsls	r3, r3, #3
 7817 0c9e 5B1A     		subs	r3, r3, r1
 7818 0ca0 1B01     		lsls	r3, r3, #4
 7819 0ca2 1344     		add	r3, r3, r2
 7820 0ca4 E033     		adds	r3, r3, #224
 7821 0ca6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7822 0ca8 6A4A     		ldr	r2, .L548+24
 7823 0caa 0301     		lsls	r3, r0, #4
 7824 0cac 1344     		add	r3, r3, r2
 7825 0cae 0C33     		adds	r3, r3, #12
 7826 0cb0 0A46     		mov	r2, r1
 7827 0cb2 1A70     		strb	r2, [r3]
2257:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7828              		.loc 1 2257 0
 7829 0cb4 634B     		ldr	r3, .L548+8
 7830 0cb6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7831 0cb8 624B     		ldr	r3, .L548+8
 7832 0cba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7833 0cbc 654A     		ldr	r2, .L548+24
 7834 0cbe 1B01     		lsls	r3, r3, #4
 7835 0cc0 1344     		add	r3, r3, r2
 7836 0cc2 0C33     		adds	r3, r3, #12
 7837 0cc4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7838 0cc6 1946     		mov	r1, r3
 7839 0cc8 FFF7FEFF 		bl	enable_motor
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 181


 7840              	.L473:
2247:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7841              		.loc 1 2247 0 discriminator 2
 7842 0ccc 5D4B     		ldr	r3, .L548+8
 7843 0cce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7844 0cd0 0133     		adds	r3, r3, #1
 7845 0cd2 DAB2     		uxtb	r2, r3
 7846 0cd4 5B4B     		ldr	r3, .L548+8
 7847 0cd6 1A70     		strb	r2, [r3]
 7848              	.L471:
2247:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7849              		.loc 1 2247 0 is_stmt 0 discriminator 1
 7850 0cd8 5A4B     		ldr	r3, .L548+8
 7851 0cda 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7852 0cdc 012B     		cmp	r3, #1
 7853 0cde 7FF667AF 		bls	.L475
2258:..\src/interruptions.c ****                     }
2259:..\src/interruptions.c ****                 }
2260:..\src/interruptions.c ****                     
2261:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7854              		.loc 1 2261 0 is_stmt 1
 7855 0ce2 0020     		movs	r0, #0
 7856 0ce4 FFF7FEFF 		bl	memStore
2262:..\src/interruptions.c ****                     
2263:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7857              		.loc 1 2263 0
 7858 0ce8 5B4B     		ldr	r3, .L548+28
 7859 0cea 0022     		movs	r2, #0
 7860 0cec 1A70     		strb	r2, [r3]
2264:..\src/interruptions.c ****             }
2265:..\src/interruptions.c ****             break;
 7861              		.loc 1 2265 0
 7862 0cee 07E0     		b	.L531
 7863              	.L527:
2266:..\src/interruptions.c ****         default:
2267:..\src/interruptions.c ****             break;
 7864              		.loc 1 2267 0
 7865 0cf0 00BF     		nop
 7866 0cf2 06E0     		b	.L460
 7867              	.L528:
2204:..\src/interruptions.c **** 
 7868              		.loc 1 2204 0
 7869 0cf4 00BF     		nop
 7870 0cf6 04E0     		b	.L460
 7871              	.L529:
2230:..\src/interruptions.c **** 
 7872              		.loc 1 2230 0
 7873 0cf8 00BF     		nop
 7874 0cfa 02E0     		b	.L460
 7875              	.L530:
2235:..\src/interruptions.c **** 
 7876              		.loc 1 2235 0
 7877 0cfc 00BF     		nop
 7878 0cfe 00E0     		b	.L460
 7879              	.L531:
2265:..\src/interruptions.c ****         default:
 7880              		.loc 1 2265 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 182


 7881 0d00 00BF     		nop
 7882              	.L460:
2268:..\src/interruptions.c ****     }
2269:..\src/interruptions.c ****         
2270:..\src/interruptions.c ****     if (interrupt_flag){
 7883              		.loc 1 2270 0
 7884 0d02 4F4B     		ldr	r3, .L548+4
 7885 0d04 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7886 0d06 002B     		cmp	r3, #0
 7887 0d08 04D0     		beq	.L476
2271:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7888              		.loc 1 2271 0
 7889 0d0a 4D4B     		ldr	r3, .L548+4
 7890 0d0c 0022     		movs	r2, #0
 7891 0d0e 1A70     		strb	r2, [r3]
2272:..\src/interruptions.c ****         interrupt_manager();
 7892              		.loc 1 2272 0
 7893 0d10 FFF7FEFF 		bl	interrupt_manager
 7894              	.L476:
2273:..\src/interruptions.c ****     }
2274:..\src/interruptions.c ****     
2275:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 7895              		.loc 1 2275 0
 7896 0d14 4C4B     		ldr	r3, .L548+12
 7897 0d16 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7898 0d1a 062B     		cmp	r3, #6
 7899 0d1c 05D0     		beq	.L477
 7900              		.loc 1 2275 0 is_stmt 0 discriminator 1
 7901 0d1e 4A4B     		ldr	r3, .L548+12
 7902 0d20 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 7903 0d24 062B     		cmp	r3, #6
 7904 0d26 40F0C881 		bne	.L478
 7905              	.L477:
2276:..\src/interruptions.c ****         // Read joystick
2277:..\src/interruptions.c ****         
2278:..\src/interruptions.c ****         switch (joy_UD_status) {
 7906              		.loc 1 2278 0 is_stmt 1
 7907 0d2a 4C4B     		ldr	r3, .L548+32
 7908 0d2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7909 0d2e 052B     		cmp	r3, #5
 7910 0d30 00F2E980 		bhi	.L479
 7911 0d34 01A2     		adr	r2, .L481
 7912 0d36 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7913 0d3a 00BF     		.p2align 2
 7914              	.L481:
 7915 0d3c 550D0000 		.word	.L480+1
 7916 0d40 F30D0000 		.word	.L482+1
 7917 0d44 070E0000 		.word	.L483+1
 7918 0d48 750E0000 		.word	.L484+1
 7919 0d4c E10E0000 		.word	.L485+1
 7920 0d50 E10E0000 		.word	.L485+1
 7921              		.p2align 1
 7922              	.L480:
2279:..\src/interruptions.c ****             case NORMAL:
2280:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 7923              		.loc 1 2280 0
 7924 0d54 424B     		ldr	r3, .L548+36
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 183


 7925 0d56 B3F90430 		ldrsh	r3, [r3, #4]
 7926 0d5a 7B60     		str	r3, [r7, #4]
2281:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2282:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 7927              		.loc 1 2282 0
 7928 0d5c 414B     		ldr	r3, .L548+40
 7929 0d5e 1B68     		ldr	r3, [r3]
 7930 0d60 7A68     		ldr	r2, [r7, #4]
 7931 0d62 D31A     		subs	r3, r2, r3
 7932 0d64 1846     		mov	r0, r3
 7933 0d66 FFF7FEFF 		bl	__aeabi_i2f
 7934 0d6a 0446     		mov	r4, r0
 7935 0d6c 3D4B     		ldr	r3, .L548+40
 7936 0d6e 1B68     		ldr	r3, [r3]
 7937 0d70 1846     		mov	r0, r3
 7938 0d72 FFF7FEFF 		bl	__aeabi_i2f
 7939 0d76 0346     		mov	r3, r0
 7940 0d78 1946     		mov	r1, r3
 7941 0d7a 2046     		mov	r0, r4
 7942 0d7c FFF7FEFF 		bl	__aeabi_fdiv
 7943 0d80 0346     		mov	r3, r0
 7944 0d82 1C46     		mov	r4, r3
 7945 0d84 304B     		ldr	r3, .L548+12
 7946 0d86 B3F8B632 		ldrh	r3, [r3, #694]
 7947 0d8a 1846     		mov	r0, r3
 7948 0d8c FFF7FEFF 		bl	__aeabi_i2f
 7949 0d90 0346     		mov	r3, r0
 7950 0d92 1946     		mov	r1, r3
 7951 0d94 2046     		mov	r0, r4
 7952 0d96 FFF7FEFF 		bl	__aeabi_fmul
 7953 0d9a 0346     		mov	r3, r0
 7954 0d9c 1846     		mov	r0, r3
 7955 0d9e FFF7FEFF 		bl	__aeabi_f2iz
 7956 0da2 0346     		mov	r3, r0
 7957 0da4 7B60     		str	r3, [r7, #4]
2283:..\src/interruptions.c ****                 
2284:..\src/interruptions.c ****                 if (interrupt_flag){
 7958              		.loc 1 2284 0
 7959 0da6 264B     		ldr	r3, .L548+4
 7960 0da8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7961 0daa 002B     		cmp	r3, #0
 7962 0dac 04D0     		beq	.L486
2285:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7963              		.loc 1 2285 0
 7964 0dae 244B     		ldr	r3, .L548+4
 7965 0db0 0022     		movs	r2, #0
 7966 0db2 1A70     		strb	r2, [r3]
2286:..\src/interruptions.c ****                     interrupt_manager();
 7967              		.loc 1 2286 0
 7968 0db4 FFF7FEFF 		bl	interrupt_manager
 7969              	.L486:
2287:..\src/interruptions.c ****                 }
2288:..\src/interruptions.c **** 
2289:..\src/interruptions.c ****                 //Saturation
2290:..\src/interruptions.c ****                 if (i_aux < -1024) 
 7970              		.loc 1 2290 0
 7971 0db8 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 184


 7972 0dba 13F5806F 		cmn	r3, #1024
 7973 0dbe 01DA     		bge	.L487
2291:..\src/interruptions.c ****                     i_aux = -1024;
 7974              		.loc 1 2291 0
 7975 0dc0 294B     		ldr	r3, .L548+44
 7976 0dc2 7B60     		str	r3, [r7, #4]
 7977              	.L487:
2292:..\src/interruptions.c ****                 if (i_aux > 1024)
 7978              		.loc 1 2292 0
 7979 0dc4 7B68     		ldr	r3, [r7, #4]
 7980 0dc6 B3F5806F 		cmp	r3, #1024
 7981 0dca 02DD     		ble	.L488
2293:..\src/interruptions.c ****                     i_aux = 1024;
 7982              		.loc 1 2293 0
 7983 0dcc 4FF48063 		mov	r3, #1024
 7984 0dd0 7B60     		str	r3, [r7, #4]
 7985              	.L488:
2294:..\src/interruptions.c **** 
2295:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 7986              		.loc 1 2295 0
 7987 0dd2 7B68     		ldr	r3, [r7, #4]
 7988 0dd4 1BB2     		sxth	r3, r3
 7989 0dd6 1A46     		mov	r2, r3
 7990 0dd8 244B     		ldr	r3, .L548+48
 7991 0dda 5A62     		str	r2, [r3, #36]
2296:..\src/interruptions.c **** 
2297:..\src/interruptions.c ****                 if (interrupt_flag){
 7992              		.loc 1 2297 0
 7993 0ddc 184B     		ldr	r3, .L548+4
 7994 0dde 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7995 0de0 002B     		cmp	r3, #0
 7996 0de2 00F08980 		beq	.L532
2298:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7997              		.loc 1 2298 0
 7998 0de6 164B     		ldr	r3, .L548+4
 7999 0de8 0022     		movs	r2, #0
 8000 0dea 1A70     		strb	r2, [r3]
2299:..\src/interruptions.c ****                     interrupt_manager();
 8001              		.loc 1 2299 0
 8002 0dec FFF7FEFF 		bl	interrupt_manager
2300:..\src/interruptions.c ****                 }
2301:..\src/interruptions.c **** 
2302:..\src/interruptions.c ****             break;
 8003              		.loc 1 2302 0
 8004 0df0 82E0     		b	.L532
 8005              	.L482:
2303:..\src/interruptions.c **** 
2304:..\src/interruptions.c ****             case RESET: // reset variables
2305:..\src/interruptions.c ****                 UD_counter = 0;
 8006              		.loc 1 2305 0
 8007 0df2 1F4B     		ldr	r3, .L548+52
 8008 0df4 0022     		movs	r2, #0
 8009 0df6 1A80     		strh	r2, [r3]	@ movhi
2306:..\src/interruptions.c ****                 UD_mean_value = 0;
 8010              		.loc 1 2306 0
 8011 0df8 1A4B     		ldr	r3, .L548+40
 8012 0dfa 0022     		movs	r2, #0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 185


 8013 0dfc 1A60     		str	r2, [r3]
2307:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8014              		.loc 1 2307 0
 8015 0dfe 174B     		ldr	r3, .L548+32
 8016 0e00 0422     		movs	r2, #4
 8017 0e02 1A70     		strb	r2, [r3]
2308:..\src/interruptions.c **** 
2309:..\src/interruptions.c ****             break;
 8018              		.loc 1 2309 0
 8019 0e04 7FE0     		b	.L479
 8020              	.L483:
2310:..\src/interruptions.c **** 
2311:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2312:..\src/interruptions.c ****                 UD_counter++;
 8021              		.loc 1 2312 0
 8022 0e06 1A4B     		ldr	r3, .L548+52
 8023 0e08 1B88     		ldrh	r3, [r3]
 8024 0e0a 0133     		adds	r3, r3, #1
 8025 0e0c 9AB2     		uxth	r2, r3
 8026 0e0e 184B     		ldr	r3, .L548+52
 8027 0e10 1A80     		strh	r2, [r3]	@ movhi
2313:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8028              		.loc 1 2313 0
 8029 0e12 174B     		ldr	r3, .L548+52
 8030 0e14 1B88     		ldrh	r3, [r3]
 8031 0e16 642B     		cmp	r3, #100
 8032 0e18 70D1     		bne	.L533
2314:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8033              		.loc 1 2314 0
 8034 0e1a 154B     		ldr	r3, .L548+52
 8035 0e1c 0022     		movs	r2, #0
 8036 0e1e 1A80     		strh	r2, [r3]	@ movhi
2315:..\src/interruptions.c **** 
2316:..\src/interruptions.c ****                     if (interrupt_flag){
 8037              		.loc 1 2316 0
 8038 0e20 074B     		ldr	r3, .L548+4
 8039 0e22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8040 0e24 002B     		cmp	r3, #0
 8041 0e26 04D0     		beq	.L491
2317:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8042              		.loc 1 2317 0
 8043 0e28 054B     		ldr	r3, .L548+4
 8044 0e2a 0022     		movs	r2, #0
 8045 0e2c 1A70     		strb	r2, [r3]
2318:..\src/interruptions.c ****                         interrupt_manager();
 8046              		.loc 1 2318 0
 8047 0e2e FFF7FEFF 		bl	interrupt_manager
 8048              	.L491:
2319:..\src/interruptions.c ****                     }
2320:..\src/interruptions.c **** 
2321:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8049              		.loc 1 2321 0
 8050 0e32 0A4B     		ldr	r3, .L548+32
 8051 0e34 0322     		movs	r2, #3
 8052 0e36 1A70     		strb	r2, [r3]
2322:..\src/interruptions.c ****                 }
2323:..\src/interruptions.c **** 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 186


2324:..\src/interruptions.c ****             break;
 8053              		.loc 1 2324 0
 8054 0e38 60E0     		b	.L533
 8055              	.L549:
 8056 0e3a 00BF     		.align	2
 8057              	.L548:
 8058 0e3c 7E010000 		.word	emg_counter_2.10645
 8059 0e40 00000000 		.word	interrupt_flag
 8060 0e44 76010000 		.word	idx.10653
 8061 0e48 00000000 		.word	c_mem
 8062 0e4c 00000000 		.word	g_mem
 8063 0e50 00000000 		.word	g_meas
 8064 0e54 00000000 		.word	g_ref
 8065 0e58 00000000 		.word	emg_2_status
 8066 0e5c 00000000 		.word	joy_UD_status
 8067 0e60 00000000 		.word	ADC_buf
 8068 0e64 80010000 		.word	UD_mean_value.10648
 8069 0e68 00FCFFFF 		.word	-1024
 8070 0e6c 00000000 		.word	g_adc_meas
 8071 0e70 84010000 		.word	UD_counter.10646
 8072              	.L484:
2325:..\src/interruptions.c **** 
2326:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2327:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2328:..\src/interruptions.c ****                 UD_counter++;
 8073              		.loc 1 2328 0
 8074 0e74 954B     		ldr	r3, .L550
 8075 0e76 1B88     		ldrh	r3, [r3]
 8076 0e78 0133     		adds	r3, r3, #1
 8077 0e7a 9AB2     		uxth	r2, r3
 8078 0e7c 934B     		ldr	r3, .L550
 8079 0e7e 1A80     		strh	r2, [r3]	@ movhi
2329:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8080              		.loc 1 2329 0
 8081 0e80 934B     		ldr	r3, .L550+4
 8082 0e82 B3F90430 		ldrsh	r3, [r3, #4]
 8083 0e86 1A46     		mov	r2, r3
 8084 0e88 924B     		ldr	r3, .L550+8
 8085 0e8a 1B68     		ldr	r3, [r3]
 8086 0e8c 1344     		add	r3, r3, r2
 8087 0e8e 914A     		ldr	r2, .L550+8
 8088 0e90 1360     		str	r3, [r2]
2330:..\src/interruptions.c **** 
2331:..\src/interruptions.c ****                 if (interrupt_flag){
 8089              		.loc 1 2331 0
 8090 0e92 914B     		ldr	r3, .L550+12
 8091 0e94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8092 0e96 002B     		cmp	r3, #0
 8093 0e98 04D0     		beq	.L492
2332:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8094              		.loc 1 2332 0
 8095 0e9a 8F4B     		ldr	r3, .L550+12
 8096 0e9c 0022     		movs	r2, #0
 8097 0e9e 1A70     		strb	r2, [r3]
2333:..\src/interruptions.c ****                     interrupt_manager();
 8098              		.loc 1 2333 0
 8099 0ea0 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 187


 8100              	.L492:
2334:..\src/interruptions.c ****                 }
2335:..\src/interruptions.c **** 
2336:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8101              		.loc 1 2336 0
 8102 0ea4 894B     		ldr	r3, .L550
 8103 0ea6 1B88     		ldrh	r3, [r3]
 8104 0ea8 C82B     		cmp	r3, #200
 8105 0eaa 29D1     		bne	.L534
2337:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8106              		.loc 1 2337 0
 8107 0eac 894B     		ldr	r3, .L550+8
 8108 0eae 1B68     		ldr	r3, [r3]
 8109 0eb0 8A4A     		ldr	r2, .L550+16
 8110 0eb2 82FB0312 		smull	r1, r2, r2, r3
 8111 0eb6 9211     		asrs	r2, r2, #6
 8112 0eb8 DB17     		asrs	r3, r3, #31
 8113 0eba D31A     		subs	r3, r2, r3
 8114 0ebc 854A     		ldr	r2, .L550+8
 8115 0ebe 1360     		str	r3, [r2]
2338:..\src/interruptions.c **** 
2339:..\src/interruptions.c ****                     if (interrupt_flag){
 8116              		.loc 1 2339 0
 8117 0ec0 854B     		ldr	r3, .L550+12
 8118 0ec2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8119 0ec4 002B     		cmp	r3, #0
 8120 0ec6 04D0     		beq	.L494
2340:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8121              		.loc 1 2340 0
 8122 0ec8 834B     		ldr	r3, .L550+12
 8123 0eca 0022     		movs	r2, #0
 8124 0ecc 1A70     		strb	r2, [r3]
2341:..\src/interruptions.c ****                         interrupt_manager();
 8125              		.loc 1 2341 0
 8126 0ece FFF7FEFF 		bl	interrupt_manager
 8127              	.L494:
2342:..\src/interruptions.c ****                     }
2343:..\src/interruptions.c **** 
2344:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8128              		.loc 1 2344 0
 8129 0ed2 7E4B     		ldr	r3, .L550
 8130 0ed4 0022     		movs	r2, #0
 8131 0ed6 1A80     		strh	r2, [r3]	@ movhi
2345:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8132              		.loc 1 2345 0
 8133 0ed8 814B     		ldr	r3, .L550+20
 8134 0eda 0022     		movs	r2, #0
 8135 0edc 1A70     		strb	r2, [r3]
2346:..\src/interruptions.c ****                 }
2347:..\src/interruptions.c ****             break;
 8136              		.loc 1 2347 0
 8137 0ede 0FE0     		b	.L534
 8138              	.L485:
2348:..\src/interruptions.c **** 
2349:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2350:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8139              		.loc 1 2350 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 188


 8140 0ee0 804B     		ldr	r3, .L550+24
 8141 0ee2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8142 0ee4 002B     		cmp	r3, #0
 8143 0ee6 0DD1     		bne	.L535
 8144              		.loc 1 2350 0 is_stmt 0 discriminator 1
 8145 0ee8 7F4B     		ldr	r3, .L550+28
 8146 0eea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8147 0eec 002B     		cmp	r3, #0
 8148 0eee 09D1     		bne	.L535
2351:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8149              		.loc 1 2351 0 is_stmt 1
 8150 0ef0 7B4B     		ldr	r3, .L550+20
 8151 0ef2 0222     		movs	r2, #2
 8152 0ef4 1A70     		strb	r2, [r3]
2352:..\src/interruptions.c ****             break;
 8153              		.loc 1 2352 0
 8154 0ef6 05E0     		b	.L535
 8155              	.L532:
2302:..\src/interruptions.c **** 
 8156              		.loc 1 2302 0
 8157 0ef8 00BF     		nop
 8158 0efa 04E0     		b	.L479
 8159              	.L533:
2324:..\src/interruptions.c **** 
 8160              		.loc 1 2324 0
 8161 0efc 00BF     		nop
 8162 0efe 02E0     		b	.L479
 8163              	.L534:
2347:..\src/interruptions.c **** 
 8164              		.loc 1 2347 0
 8165 0f00 00BF     		nop
 8166 0f02 00E0     		b	.L479
 8167              	.L535:
 8168              		.loc 1 2352 0
 8169 0f04 00BF     		nop
 8170              	.L479:
2353:..\src/interruptions.c ****         }
2354:..\src/interruptions.c **** 
2355:..\src/interruptions.c ****         if (interrupt_flag){
 8171              		.loc 1 2355 0
 8172 0f06 744B     		ldr	r3, .L550+12
 8173 0f08 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8174 0f0a 002B     		cmp	r3, #0
 8175 0f0c 04D0     		beq	.L496
2356:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8176              		.loc 1 2356 0
 8177 0f0e 724B     		ldr	r3, .L550+12
 8178 0f10 0022     		movs	r2, #0
 8179 0f12 1A70     		strb	r2, [r3]
2357:..\src/interruptions.c ****             interrupt_manager();
 8180              		.loc 1 2357 0
 8181 0f14 FFF7FEFF 		bl	interrupt_manager
 8182              	.L496:
2358:..\src/interruptions.c ****         }
2359:..\src/interruptions.c ****             
2360:..\src/interruptions.c ****         switch (joy_LR_status) {
 8183              		.loc 1 2360 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 189


 8184 0f18 744B     		ldr	r3, .L550+32
 8185 0f1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8186 0f1c 052B     		cmp	r3, #5
 8187 0f1e 00F2C380 		bhi	.L497
 8188 0f22 01A2     		adr	r2, .L499
 8189 0f24 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8190              		.p2align 2
 8191              	.L499:
 8192 0f28 410F0000 		.word	.L498+1
 8193 0f2c DD0F0000 		.word	.L500+1
 8194 0f30 F10F0000 		.word	.L501+1
 8195 0f34 25100000 		.word	.L502+1
 8196 0f38 7F100000 		.word	.L503+1
 8197 0f3c 7F100000 		.word	.L503+1
 8198              		.p2align 1
 8199              	.L498:
2361:..\src/interruptions.c ****             case NORMAL:
2362:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8200              		.loc 1 2362 0
 8201 0f40 634B     		ldr	r3, .L550+4
 8202 0f42 B3F90630 		ldrsh	r3, [r3, #6]
 8203 0f46 7B60     		str	r3, [r7, #4]
2363:..\src/interruptions.c **** 
2364:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8204              		.loc 1 2364 0
 8205 0f48 694B     		ldr	r3, .L550+36
 8206 0f4a 1B68     		ldr	r3, [r3]
 8207 0f4c 7A68     		ldr	r2, [r7, #4]
 8208 0f4e D31A     		subs	r3, r2, r3
 8209 0f50 1846     		mov	r0, r3
 8210 0f52 FFF7FEFF 		bl	__aeabi_i2f
 8211 0f56 0446     		mov	r4, r0
 8212 0f58 654B     		ldr	r3, .L550+36
 8213 0f5a 1B68     		ldr	r3, [r3]
 8214 0f5c 1846     		mov	r0, r3
 8215 0f5e FFF7FEFF 		bl	__aeabi_i2f
 8216 0f62 0346     		mov	r3, r0
 8217 0f64 1946     		mov	r1, r3
 8218 0f66 2046     		mov	r0, r4
 8219 0f68 FFF7FEFF 		bl	__aeabi_fdiv
 8220 0f6c 0346     		mov	r3, r0
 8221 0f6e 1C46     		mov	r4, r3
 8222 0f70 604B     		ldr	r3, .L550+40
 8223 0f72 B3F8B432 		ldrh	r3, [r3, #692]
 8224 0f76 1846     		mov	r0, r3
 8225 0f78 FFF7FEFF 		bl	__aeabi_i2f
 8226 0f7c 0346     		mov	r3, r0
 8227 0f7e 1946     		mov	r1, r3
 8228 0f80 2046     		mov	r0, r4
 8229 0f82 FFF7FEFF 		bl	__aeabi_fmul
 8230 0f86 0346     		mov	r3, r0
 8231 0f88 1846     		mov	r0, r3
 8232 0f8a FFF7FEFF 		bl	__aeabi_f2iz
 8233 0f8e 0346     		mov	r3, r0
 8234 0f90 7B60     		str	r3, [r7, #4]
2365:..\src/interruptions.c ****                 
2366:..\src/interruptions.c ****                 if (interrupt_flag){
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 190


 8235              		.loc 1 2366 0
 8236 0f92 514B     		ldr	r3, .L550+12
 8237 0f94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8238 0f96 002B     		cmp	r3, #0
 8239 0f98 04D0     		beq	.L504
2367:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8240              		.loc 1 2367 0
 8241 0f9a 4F4B     		ldr	r3, .L550+12
 8242 0f9c 0022     		movs	r2, #0
 8243 0f9e 1A70     		strb	r2, [r3]
2368:..\src/interruptions.c ****                     interrupt_manager();
 8244              		.loc 1 2368 0
 8245 0fa0 FFF7FEFF 		bl	interrupt_manager
 8246              	.L504:
2369:..\src/interruptions.c ****                 }
2370:..\src/interruptions.c **** 
2371:..\src/interruptions.c ****                 //Saturation
2372:..\src/interruptions.c ****                 if (i_aux < -1024)
 8247              		.loc 1 2372 0
 8248 0fa4 7B68     		ldr	r3, [r7, #4]
 8249 0fa6 13F5806F 		cmn	r3, #1024
 8250 0faa 01DA     		bge	.L505
2373:..\src/interruptions.c ****                     i_aux = -1024;
 8251              		.loc 1 2373 0
 8252 0fac 524B     		ldr	r3, .L550+44
 8253 0fae 7B60     		str	r3, [r7, #4]
 8254              	.L505:
2374:..\src/interruptions.c ****                 if (i_aux > 1024)
 8255              		.loc 1 2374 0
 8256 0fb0 7B68     		ldr	r3, [r7, #4]
 8257 0fb2 B3F5806F 		cmp	r3, #1024
 8258 0fb6 02DD     		ble	.L506
2375:..\src/interruptions.c ****                     i_aux = 1024;
 8259              		.loc 1 2375 0
 8260 0fb8 4FF48063 		mov	r3, #1024
 8261 0fbc 7B60     		str	r3, [r7, #4]
 8262              	.L506:
2376:..\src/interruptions.c **** 
2377:..\src/interruptions.c ****                 if (interrupt_flag){
 8263              		.loc 1 2377 0
 8264 0fbe 464B     		ldr	r3, .L550+12
 8265 0fc0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8266 0fc2 002B     		cmp	r3, #0
 8267 0fc4 04D0     		beq	.L507
2378:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8268              		.loc 1 2378 0
 8269 0fc6 444B     		ldr	r3, .L550+12
 8270 0fc8 0022     		movs	r2, #0
 8271 0fca 1A70     		strb	r2, [r3]
2379:..\src/interruptions.c ****                     interrupt_manager();
 8272              		.loc 1 2379 0
 8273 0fcc FFF7FEFF 		bl	interrupt_manager
 8274              	.L507:
2380:..\src/interruptions.c ****                 }
2381:..\src/interruptions.c **** 
2382:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8275              		.loc 1 2382 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 191


 8276 0fd0 7B68     		ldr	r3, [r7, #4]
 8277 0fd2 1BB2     		sxth	r3, r3
 8278 0fd4 1A46     		mov	r2, r3
 8279 0fd6 494B     		ldr	r3, .L550+48
 8280 0fd8 1A62     		str	r2, [r3, #32]
2383:..\src/interruptions.c **** 
2384:..\src/interruptions.c ****             break;
 8281              		.loc 1 2384 0
 8282 0fda 65E0     		b	.L497
 8283              	.L500:
2385:..\src/interruptions.c **** 
2386:..\src/interruptions.c ****             case RESET: // reset variables
2387:..\src/interruptions.c ****                 LR_counter = 0;
 8284              		.loc 1 2387 0
 8285 0fdc 484B     		ldr	r3, .L550+52
 8286 0fde 0022     		movs	r2, #0
 8287 0fe0 1A80     		strh	r2, [r3]	@ movhi
2388:..\src/interruptions.c ****                 LR_mean_value = 0;
 8288              		.loc 1 2388 0
 8289 0fe2 434B     		ldr	r3, .L550+36
 8290 0fe4 0022     		movs	r2, #0
 8291 0fe6 1A60     		str	r2, [r3]
2389:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8292              		.loc 1 2389 0
 8293 0fe8 404B     		ldr	r3, .L550+32
 8294 0fea 0422     		movs	r2, #4
 8295 0fec 1A70     		strb	r2, [r3]
2390:..\src/interruptions.c ****             break;
 8296              		.loc 1 2390 0
 8297 0fee 5BE0     		b	.L497
 8298              	.L501:
2391:..\src/interruptions.c **** 
2392:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2393:..\src/interruptions.c ****                 LR_counter++;
 8299              		.loc 1 2393 0
 8300 0ff0 434B     		ldr	r3, .L550+52
 8301 0ff2 1B88     		ldrh	r3, [r3]
 8302 0ff4 0133     		adds	r3, r3, #1
 8303 0ff6 9AB2     		uxth	r2, r3
 8304 0ff8 414B     		ldr	r3, .L550+52
 8305 0ffa 1A80     		strh	r2, [r3]	@ movhi
2394:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8306              		.loc 1 2394 0
 8307 0ffc 404B     		ldr	r3, .L550+52
 8308 0ffe 1B88     		ldrh	r3, [r3]
 8309 1000 642B     		cmp	r3, #100
 8310 1002 4CD1     		bne	.L536
2395:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8311              		.loc 1 2395 0
 8312 1004 3E4B     		ldr	r3, .L550+52
 8313 1006 0022     		movs	r2, #0
 8314 1008 1A80     		strh	r2, [r3]	@ movhi
2396:..\src/interruptions.c **** 
2397:..\src/interruptions.c ****                     if (interrupt_flag){
 8315              		.loc 1 2397 0
 8316 100a 334B     		ldr	r3, .L550+12
 8317 100c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 192


 8318 100e 002B     		cmp	r3, #0
 8319 1010 04D0     		beq	.L509
2398:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8320              		.loc 1 2398 0
 8321 1012 314B     		ldr	r3, .L550+12
 8322 1014 0022     		movs	r2, #0
 8323 1016 1A70     		strb	r2, [r3]
2399:..\src/interruptions.c ****                         interrupt_manager();
 8324              		.loc 1 2399 0
 8325 1018 FFF7FEFF 		bl	interrupt_manager
 8326              	.L509:
2400:..\src/interruptions.c ****                     }
2401:..\src/interruptions.c **** 
2402:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8327              		.loc 1 2402 0
 8328 101c 334B     		ldr	r3, .L550+32
 8329 101e 0322     		movs	r2, #3
 8330 1020 1A70     		strb	r2, [r3]
2403:..\src/interruptions.c ****                 }
2404:..\src/interruptions.c ****             break;
 8331              		.loc 1 2404 0
 8332 1022 3CE0     		b	.L536
 8333              	.L502:
2405:..\src/interruptions.c **** 
2406:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2407:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2408:..\src/interruptions.c ****                 LR_counter++;
 8334              		.loc 1 2408 0
 8335 1024 364B     		ldr	r3, .L550+52
 8336 1026 1B88     		ldrh	r3, [r3]
 8337 1028 0133     		adds	r3, r3, #1
 8338 102a 9AB2     		uxth	r2, r3
 8339 102c 344B     		ldr	r3, .L550+52
 8340 102e 1A80     		strh	r2, [r3]	@ movhi
2409:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8341              		.loc 1 2409 0
 8342 1030 274B     		ldr	r3, .L550+4
 8343 1032 B3F90630 		ldrsh	r3, [r3, #6]
 8344 1036 1A46     		mov	r2, r3
 8345 1038 2D4B     		ldr	r3, .L550+36
 8346 103a 1B68     		ldr	r3, [r3]
 8347 103c 1344     		add	r3, r3, r2
 8348 103e 2C4A     		ldr	r2, .L550+36
 8349 1040 1360     		str	r3, [r2]
2410:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8350              		.loc 1 2410 0
 8351 1042 2F4B     		ldr	r3, .L550+52
 8352 1044 1B88     		ldrh	r3, [r3]
 8353 1046 C82B     		cmp	r3, #200
 8354 1048 2BD1     		bne	.L537
2411:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8355              		.loc 1 2411 0
 8356 104a 294B     		ldr	r3, .L550+36
 8357 104c 1B68     		ldr	r3, [r3]
 8358 104e 234A     		ldr	r2, .L550+16
 8359 1050 82FB0312 		smull	r1, r2, r2, r3
 8360 1054 9211     		asrs	r2, r2, #6
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 193


 8361 1056 DB17     		asrs	r3, r3, #31
 8362 1058 D31A     		subs	r3, r2, r3
 8363 105a 254A     		ldr	r2, .L550+36
 8364 105c 1360     		str	r3, [r2]
2412:..\src/interruptions.c ****                     
2413:..\src/interruptions.c ****                     if (interrupt_flag){
 8365              		.loc 1 2413 0
 8366 105e 1E4B     		ldr	r3, .L550+12
 8367 1060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8368 1062 002B     		cmp	r3, #0
 8369 1064 04D0     		beq	.L511
2414:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8370              		.loc 1 2414 0
 8371 1066 1C4B     		ldr	r3, .L550+12
 8372 1068 0022     		movs	r2, #0
 8373 106a 1A70     		strb	r2, [r3]
2415:..\src/interruptions.c ****                         interrupt_manager();
 8374              		.loc 1 2415 0
 8375 106c FFF7FEFF 		bl	interrupt_manager
 8376              	.L511:
2416:..\src/interruptions.c ****                     }
2417:..\src/interruptions.c **** 
2418:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8377              		.loc 1 2418 0
 8378 1070 234B     		ldr	r3, .L550+52
 8379 1072 0022     		movs	r2, #0
 8380 1074 1A80     		strh	r2, [r3]	@ movhi
2419:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8381              		.loc 1 2419 0
 8382 1076 1D4B     		ldr	r3, .L550+32
 8383 1078 0022     		movs	r2, #0
 8384 107a 1A70     		strb	r2, [r3]
2420:..\src/interruptions.c ****                 }
2421:..\src/interruptions.c ****             break;
 8385              		.loc 1 2421 0
 8386 107c 11E0     		b	.L537
 8387              	.L503:
2422:..\src/interruptions.c **** 
2423:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2424:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8388              		.loc 1 2424 0
 8389 107e 194B     		ldr	r3, .L550+24
 8390 1080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8391 1082 002B     		cmp	r3, #0
 8392 1084 0FD1     		bne	.L538
 8393              		.loc 1 2424 0 is_stmt 0 discriminator 1
 8394 1086 184B     		ldr	r3, .L550+28
 8395 1088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8396 108a 002B     		cmp	r3, #0
 8397 108c 0BD1     		bne	.L538
 8398              		.loc 1 2424 0 discriminator 2
 8399 108e 144B     		ldr	r3, .L550+20
 8400 1090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8401 1092 002B     		cmp	r3, #0
 8402 1094 07D1     		bne	.L538
2425:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8403              		.loc 1 2425 0 is_stmt 1
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 194


 8404 1096 154B     		ldr	r3, .L550+32
 8405 1098 0222     		movs	r2, #2
 8406 109a 1A70     		strb	r2, [r3]
2426:..\src/interruptions.c ****             break;
 8407              		.loc 1 2426 0
 8408 109c 03E0     		b	.L538
 8409              	.L536:
2404:..\src/interruptions.c **** 
 8410              		.loc 1 2404 0
 8411 109e 00BF     		nop
 8412 10a0 02E0     		b	.L497
 8413              	.L537:
2421:..\src/interruptions.c **** 
 8414              		.loc 1 2421 0
 8415 10a2 00BF     		nop
 8416 10a4 00E0     		b	.L497
 8417              	.L538:
 8418              		.loc 1 2426 0
 8419 10a6 00BF     		nop
 8420              	.L497:
2427:..\src/interruptions.c ****         }
2428:..\src/interruptions.c ****        
2429:..\src/interruptions.c ****         if (interrupt_flag){
 8421              		.loc 1 2429 0
 8422 10a8 0B4B     		ldr	r3, .L550+12
 8423 10aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8424 10ac 002B     		cmp	r3, #0
 8425 10ae 04D0     		beq	.L478
2430:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8426              		.loc 1 2430 0
 8427 10b0 094B     		ldr	r3, .L550+12
 8428 10b2 0022     		movs	r2, #0
 8429 10b4 1A70     		strb	r2, [r3]
2431:..\src/interruptions.c ****             interrupt_manager();
 8430              		.loc 1 2431 0
 8431 10b6 FFF7FEFF 		bl	interrupt_manager
 8432              	.L478:
2432:..\src/interruptions.c ****         }
2433:..\src/interruptions.c ****     }
2434:..\src/interruptions.c ****     
2435:..\src/interruptions.c ****     // Read also EMG additional sensors port
2436:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8433              		.loc 1 2436 0
 8434 10ba 124B     		ldr	r3, .L550+56
 8435 10bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8436 10be 062B     		cmp	r3, #6
 8437 10c0 73D9     		bls	.L539
2437:..\src/interruptions.c ****         
2438:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8438              		.loc 1 2438 0
 8439 10c2 114B     		ldr	r3, .L550+60
 8440 10c4 0022     		movs	r2, #0
 8441 10c6 1A70     		strb	r2, [r3]
 8442 10c8 6BE0     		b	.L514
 8443              	.L551:
 8444 10ca 00BF     		.align	2
 8445              	.L550:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 195


 8446 10cc 84010000 		.word	UD_counter.10646
 8447 10d0 00000000 		.word	ADC_buf
 8448 10d4 80010000 		.word	UD_mean_value.10648
 8449 10d8 00000000 		.word	interrupt_flag
 8450 10dc 1F85EB51 		.word	1374389535
 8451 10e0 00000000 		.word	joy_UD_status
 8452 10e4 00000000 		.word	emg_1_status
 8453 10e8 00000000 		.word	emg_2_status
 8454 10ec 00000000 		.word	joy_LR_status
 8455 10f0 88010000 		.word	LR_mean_value.10649
 8456 10f4 00000000 		.word	c_mem
 8457 10f8 00FCFFFF 		.word	-1024
 8458 10fc 00000000 		.word	g_adc_meas
 8459 1100 8C010000 		.word	LR_counter.10647
 8460 1104 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8461 1108 76010000 		.word	idx.10653
 8462              	.L521:
2439:..\src/interruptions.c ****             
2440:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8463              		.loc 1 2440 0
 8464 110c 294B     		ldr	r3, .L552
 8465 110e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8466 1110 0633     		adds	r3, r3, #6
 8467 1112 294A     		ldr	r2, .L552+4
 8468 1114 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8469 1118 7B60     		str	r3, [r7, #4]
2441:..\src/interruptions.c ****             if (i_aux < 0) 
 8470              		.loc 1 2441 0
 8471 111a 7B68     		ldr	r3, [r7, #4]
 8472 111c 002B     		cmp	r3, #0
 8473 111e 01DA     		bge	.L515
2442:..\src/interruptions.c ****                 i_aux = 0;
 8474              		.loc 1 2442 0
 8475 1120 0023     		movs	r3, #0
 8476 1122 7B60     		str	r3, [r7, #4]
 8477              	.L515:
2443:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8478              		.loc 1 2443 0
 8479 1124 234B     		ldr	r3, .L552
 8480 1126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8481 1128 0233     		adds	r3, r3, #2
 8482 112a DB00     		lsls	r3, r3, #3
 8483 112c 234A     		ldr	r2, .L552+8
 8484 112e 1344     		add	r3, r3, r2
 8485 1130 1946     		mov	r1, r3
 8486 1132 7868     		ldr	r0, [r7, #4]
 8487 1134 FFF7FEFF 		bl	filter
 8488 1138 7860     		str	r0, [r7, #4]
2444:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8489              		.loc 1 2444 0
 8490 113a 7B68     		ldr	r3, [r7, #4]
 8491 113c 9B02     		lsls	r3, r3, #10
 8492 113e 002B     		cmp	r3, #0
 8493 1140 01DA     		bge	.L516
 8494 1142 03F2FF33 		addw	r3, r3, #1023
 8495              	.L516:
 8496 1146 9B12     		asrs	r3, r3, #10
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 196


 8497 1148 7B60     		str	r3, [r7, #4]
2445:..\src/interruptions.c **** 
2446:..\src/interruptions.c ****             if (interrupt_flag){
 8498              		.loc 1 2446 0
 8499 114a 1D4B     		ldr	r3, .L552+12
 8500 114c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8501 114e 002B     		cmp	r3, #0
 8502 1150 04D0     		beq	.L517
2447:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8503              		.loc 1 2447 0
 8504 1152 1B4B     		ldr	r3, .L552+12
 8505 1154 0022     		movs	r2, #0
 8506 1156 1A70     		strb	r2, [r3]
2448:..\src/interruptions.c ****                 interrupt_manager();
 8507              		.loc 1 2448 0
 8508 1158 FFF7FEFF 		bl	interrupt_manager
 8509              	.L517:
2449:..\src/interruptions.c ****             }
2450:..\src/interruptions.c ****             //Saturation
2451:..\src/interruptions.c ****             if (i_aux < 0)
 8510              		.loc 1 2451 0
 8511 115c 7B68     		ldr	r3, [r7, #4]
 8512 115e 002B     		cmp	r3, #0
 8513 1160 02DA     		bge	.L518
2452:..\src/interruptions.c ****                 i_aux = 0;
 8514              		.loc 1 2452 0
 8515 1162 0023     		movs	r3, #0
 8516 1164 7B60     		str	r3, [r7, #4]
 8517 1166 06E0     		b	.L519
 8518              	.L518:
2453:..\src/interruptions.c ****             else 
2454:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8519              		.loc 1 2454 0
 8520 1168 7B68     		ldr	r3, [r7, #4]
 8521 116a B3F5806F 		cmp	r3, #1024
 8522 116e 02DD     		ble	.L519
2455:..\src/interruptions.c ****                     i_aux = 1024;
 8523              		.loc 1 2455 0
 8524 1170 4FF48063 		mov	r3, #1024
 8525 1174 7B60     		str	r3, [r7, #4]
 8526              	.L519:
2456:..\src/interruptions.c ****             
2457:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8527              		.loc 1 2457 0
 8528 1176 0F4B     		ldr	r3, .L552
 8529 1178 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8530 117a 1249     		ldr	r1, .L552+16
 8531 117c 0233     		adds	r3, r3, #2
 8532 117e 7A68     		ldr	r2, [r7, #4]
 8533 1180 41F82320 		str	r2, [r1, r3, lsl #2]
2458:..\src/interruptions.c **** 
2459:..\src/interruptions.c ****             if (interrupt_flag){
 8534              		.loc 1 2459 0
 8535 1184 0E4B     		ldr	r3, .L552+12
 8536 1186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8537 1188 002B     		cmp	r3, #0
 8538 118a 04D0     		beq	.L520
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 197


2460:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8539              		.loc 1 2460 0
 8540 118c 0C4B     		ldr	r3, .L552+12
 8541 118e 0022     		movs	r2, #0
 8542 1190 1A70     		strb	r2, [r3]
2461:..\src/interruptions.c ****                 interrupt_manager();
 8543              		.loc 1 2461 0
 8544 1192 FFF7FEFF 		bl	interrupt_manager
 8545              	.L520:
2438:..\src/interruptions.c ****             
 8546              		.loc 1 2438 0 discriminator 2
 8547 1196 074B     		ldr	r3, .L552
 8548 1198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8549 119a 0133     		adds	r3, r3, #1
 8550 119c DAB2     		uxtb	r2, r3
 8551 119e 054B     		ldr	r3, .L552
 8552 11a0 1A70     		strb	r2, [r3]
 8553              	.L514:
2438:..\src/interruptions.c ****             
 8554              		.loc 1 2438 0 is_stmt 0 discriminator 1
 8555 11a2 044B     		ldr	r3, .L552
 8556 11a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8557 11a6 052B     		cmp	r3, #5
 8558 11a8 B0D9     		bls	.L521
 8559              	.L539:
2462:..\src/interruptions.c ****             }
2463:..\src/interruptions.c ****         }
2464:..\src/interruptions.c ****     }
2465:..\src/interruptions.c ****     
2466:..\src/interruptions.c **** }
 8560              		.loc 1 2466 0 is_stmt 1
 8561 11aa 00BF     		nop
 8562 11ac 0C37     		adds	r7, r7, #12
 8563              		.cfi_def_cfa_offset 20
 8564 11ae BD46     		mov	sp, r7
 8565              		.cfi_def_cfa_register 13
 8566              		@ sp needed
 8567 11b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 8568              	.L553:
 8569 11b2 00BF     		.align	2
 8570              	.L552:
 8571 11b4 76010000 		.word	idx.10653
 8572 11b8 00000000 		.word	ADC_buf
 8573 11bc 00000000 		.word	filt_emg
 8574 11c0 00000000 		.word	interrupt_flag
 8575 11c4 00000000 		.word	g_adc_meas
 8576              		.cfi_endproc
 8577              	.LFE74:
 8578              		.size	analog_read_end, .-analog_read_end
 8579              		.section	.text.overcurrent_control,"ax",%progbits
 8580              		.align	2
 8581              		.global	overcurrent_control
 8582              		.thumb
 8583              		.thumb_func
 8584              		.type	overcurrent_control, %function
 8585              	overcurrent_control:
 8586              	.LFB75:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 198


2467:..\src/interruptions.c **** 
2468:..\src/interruptions.c **** //==============================================================================
2469:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2470:..\src/interruptions.c **** //==============================================================================
2471:..\src/interruptions.c **** 
2472:..\src/interruptions.c **** void overcurrent_control() {
 8587              		.loc 1 2472 0
 8588              		.cfi_startproc
 8589              		@ args = 0, pretend = 0, frame = 8
 8590              		@ frame_needed = 1, uses_anonymous_args = 0
 8591              		@ link register save eliminated.
 8592 0000 80B4     		push	{r7}
 8593              		.cfi_def_cfa_offset 4
 8594              		.cfi_offset 7, -4
 8595 0002 83B0     		sub	sp, sp, #12
 8596              		.cfi_def_cfa_offset 16
 8597 0004 00AF     		add	r7, sp, #0
 8598              		.cfi_def_cfa_register 7
 8599              	.LBB11:
2473:..\src/interruptions.c ****     
2474:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8600              		.loc 1 2474 0
 8601 0006 0023     		movs	r3, #0
 8602 0008 FB71     		strb	r3, [r7, #7]
 8603 000a 69E0     		b	.L555
 8604              	.L560:
2475:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8605              		.loc 1 2475 0
 8606 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8607 000e 3849     		ldr	r1, .L562
 8608 0010 1346     		mov	r3, r2
 8609 0012 DB00     		lsls	r3, r3, #3
 8610 0014 9B1A     		subs	r3, r3, r2
 8611 0016 1B01     		lsls	r3, r3, #4
 8612 0018 0B44     		add	r3, r3, r1
 8613 001a 03F58673 		add	r3, r3, #268
 8614 001e B3F90030 		ldrsh	r3, [r3]
 8615 0022 002B     		cmp	r3, #0
 8616 0024 59D0     		beq	.L556
 8617              	.LBB12:
2476:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8618              		.loc 1 2476 0
 8619 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8620 0028 3249     		ldr	r1, .L562+4
 8621 002a 1346     		mov	r3, r2
 8622 002c DB00     		lsls	r3, r3, #3
 8623 002e 9B1A     		subs	r3, r3, r2
 8624 0030 1B01     		lsls	r3, r3, #4
 8625 0032 0B44     		add	r3, r3, r1
 8626 0034 03F58873 		add	r3, r3, #272
 8627 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8628 003a 1946     		mov	r1, r3
 8629 003c 2E4A     		ldr	r2, .L562+8
 8630 003e 3423     		movs	r3, #52
 8631 0040 03FB01F3 		mul	r3, r3, r1
 8632 0044 1344     		add	r3, r3, r2
 8633 0046 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 199


 8634 0048 1B68     		ldr	r3, [r3]
 8635 004a 3B60     		str	r3, [r7]
2477:..\src/interruptions.c ****             // check if the current is over the limit
2478:..\src/interruptions.c ****             if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 8636              		.loc 1 2478 0
 8637 004c 284B     		ldr	r3, .L562
 8638 004e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 8639 0052 042B     		cmp	r3, #4
 8640 0054 05D1     		bne	.L557
2479:..\src/interruptions.c ****                 if (curr < 0){
 8641              		.loc 1 2479 0
 8642 0056 3B68     		ldr	r3, [r7]
 8643 0058 002B     		cmp	r3, #0
 8644 005a 02DA     		bge	.L557
2480:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8645              		.loc 1 2480 0
 8646 005c 3B68     		ldr	r3, [r7]
 8647 005e 5B42     		negs	r3, r3
 8648 0060 3B60     		str	r3, [r7]
 8649              	.L557:
2481:..\src/interruptions.c ****                 }
2482:..\src/interruptions.c ****             }
2483:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8650              		.loc 1 2483 0
 8651 0062 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8652 0064 2249     		ldr	r1, .L562
 8653 0066 1346     		mov	r3, r2
 8654 0068 DB00     		lsls	r3, r3, #3
 8655 006a 9B1A     		subs	r3, r3, r2
 8656 006c 1B01     		lsls	r3, r3, #4
 8657 006e 0B44     		add	r3, r3, r1
 8658 0070 03F58673 		add	r3, r3, #268
 8659 0074 B3F90030 		ldrsh	r3, [r3]
 8660 0078 1A46     		mov	r2, r3
 8661 007a 3B68     		ldr	r3, [r7]
 8662 007c 9A42     		cmp	r2, r3
 8663 007e 07DA     		bge	.L558
2484:..\src/interruptions.c ****                 //decrease pwm_limit
2485:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8664              		.loc 1 2485 0
 8665 0080 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8666 0082 1E4A     		ldr	r2, .L562+12
 8667 0084 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8668 0086 013A     		subs	r2, r2, #1
 8669 0088 D1B2     		uxtb	r1, r2
 8670 008a 1C4A     		ldr	r2, .L562+12
 8671 008c D154     		strb	r1, [r2, r3]
 8672 008e 16E0     		b	.L561
 8673              	.L558:
2486:..\src/interruptions.c ****             // check if the current is in the safe zone
2487:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8674              		.loc 1 2487 0
 8675 0090 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8676 0092 1749     		ldr	r1, .L562
 8677 0094 1346     		mov	r3, r2
 8678 0096 DB00     		lsls	r3, r3, #3
 8679 0098 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 200


 8680 009a 1B01     		lsls	r3, r3, #4
 8681 009c 0B44     		add	r3, r3, r1
 8682 009e 03F58673 		add	r3, r3, #268
 8683 00a2 B3F90030 		ldrsh	r3, [r3]
 8684 00a6 A3F10A02 		sub	r2, r3, #10
 8685 00aa 3B68     		ldr	r3, [r7]
 8686 00ac 9A42     		cmp	r2, r3
 8687 00ae 06DD     		ble	.L561
2488:..\src/interruptions.c ****                 //increase pwm_limit
2489:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8688              		.loc 1 2489 0
 8689 00b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8690 00b2 124A     		ldr	r2, .L562+12
 8691 00b4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8692 00b6 0132     		adds	r2, r2, #1
 8693 00b8 D1B2     		uxtb	r1, r2
 8694 00ba 104A     		ldr	r2, .L562+12
 8695 00bc D154     		strb	r1, [r2, r3]
 8696              	.L561:
2490:..\src/interruptions.c ****             }
2491:..\src/interruptions.c **** 
2492:..\src/interruptions.c ****             // Bound pwm_limit
2493:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2494:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2495:..\src/interruptions.c ****             else 
2496:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8697              		.loc 1 2496 0
 8698 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8699 00c0 0E4A     		ldr	r2, .L562+12
 8700 00c2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8701 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8702 00c6 0E49     		ldr	r1, .L562+16
 8703 00c8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8704 00ca 9A42     		cmp	r2, r3
 8705 00cc 05D9     		bls	.L556
2497:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8706              		.loc 1 2497 0
 8707 00ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8708 00d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8709 00d2 0B49     		ldr	r1, .L562+16
 8710 00d4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8711 00d6 094A     		ldr	r2, .L562+12
 8712 00d8 D154     		strb	r1, [r2, r3]
 8713              	.L556:
 8714              	.LBE12:
2474:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8715              		.loc 1 2474 0 discriminator 2
 8716 00da FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8717 00dc 0133     		adds	r3, r3, #1
 8718 00de FB71     		strb	r3, [r7, #7]
 8719              	.L555:
2474:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8720              		.loc 1 2474 0 is_stmt 0 discriminator 1
 8721 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8722 00e2 012B     		cmp	r3, #1
 8723 00e4 92D9     		bls	.L560
 8724              	.LBE11:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 201


2498:..\src/interruptions.c ****         }
2499:..\src/interruptions.c ****     }
2500:..\src/interruptions.c **** }
 8725              		.loc 1 2500 0 is_stmt 1
 8726 00e6 00BF     		nop
 8727 00e8 0C37     		adds	r7, r7, #12
 8728              		.cfi_def_cfa_offset 4
 8729 00ea BD46     		mov	sp, r7
 8730              		.cfi_def_cfa_register 13
 8731              		@ sp needed
 8732 00ec 80BC     		pop	{r7}
 8733              		.cfi_restore 7
 8734              		.cfi_def_cfa_offset 0
 8735 00ee 7047     		bx	lr
 8736              	.L563:
 8737              		.align	2
 8738              	.L562:
 8739 00f0 00000000 		.word	c_mem
 8740 00f4 00000000 		.word	g_mem
 8741 00f8 00000000 		.word	g_meas
 8742 00fc 00000000 		.word	dev_pwm_limit
 8743 0100 00000000 		.word	dev_pwm_sat
 8744              		.cfi_endproc
 8745              	.LFE75:
 8746              		.size	overcurrent_control, .-overcurrent_control
 8747              		.section	.text.pwm_limit_search,"ax",%progbits
 8748              		.align	2
 8749              		.global	pwm_limit_search
 8750              		.thumb
 8751              		.thumb_func
 8752              		.type	pwm_limit_search, %function
 8753              	pwm_limit_search:
 8754              	.LFB76:
2501:..\src/interruptions.c **** 
2502:..\src/interruptions.c **** //==============================================================================
2503:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2504:..\src/interruptions.c **** //==============================================================================
2505:..\src/interruptions.c **** 
2506:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 8755              		.loc 1 2506 0
 8756              		.cfi_startproc
 8757              		@ args = 0, pretend = 0, frame = 16
 8758              		@ frame_needed = 1, uses_anonymous_args = 0
 8759              		@ link register save eliminated.
 8760 0000 80B4     		push	{r7}
 8761              		.cfi_def_cfa_offset 4
 8762              		.cfi_offset 7, -4
 8763 0002 85B0     		sub	sp, sp, #20
 8764              		.cfi_def_cfa_offset 24
 8765 0004 00AF     		add	r7, sp, #0
 8766              		.cfi_def_cfa_register 7
 8767 0006 0346     		mov	r3, r0
 8768 0008 FB71     		strb	r3, [r7, #7]
2507:..\src/interruptions.c **** 
2508:..\src/interruptions.c ****     uint8 CYDATA index;
2509:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 8769              		.loc 1 2509 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 202


 8770 000a 46F29C33 		movw	r3, #25500
 8771 000e FB81     		strh	r3, [r7, #14]	@ movhi
2510:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 8772              		.loc 1 2510 0
 8773 0010 42F6EC43 		movw	r3, #11500
 8774 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2511:..\src/interruptions.c ****     
2512:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 8775              		.loc 1 2512 0
 8776 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8777 0018 144A     		ldr	r2, .L569
 8778 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8779 001e FB89     		ldrh	r3, [r7, #14]
 8780 0020 9A42     		cmp	r2, r3
 8781 0022 04DD     		ble	.L565
2513:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 8782              		.loc 1 2513 0
 8783 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8784 0026 124A     		ldr	r2, .L569+4
 8785 0028 0021     		movs	r1, #0
 8786 002a D154     		strb	r1, [r2, r3]
2514:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2515:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2516:..\src/interruptions.c ****     } else {
2517:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2518:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2519:..\src/interruptions.c ****     }
2520:..\src/interruptions.c **** }
 8787              		.loc 1 2520 0
 8788 002c 19E0     		b	.L568
 8789              	.L565:
2514:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 8790              		.loc 1 2514 0
 8791 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8792 0030 0E4A     		ldr	r2, .L569
 8793 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8794 0036 BB89     		ldrh	r3, [r7, #12]
 8795 0038 9A42     		cmp	r2, r3
 8796 003a 04DA     		bge	.L567
2515:..\src/interruptions.c ****     } else {
 8797              		.loc 1 2515 0
 8798 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8799 003e 0C4A     		ldr	r2, .L569+4
 8800 0040 6421     		movs	r1, #100
 8801 0042 D154     		strb	r1, [r2, r3]
 8802              		.loc 1 2520 0
 8803 0044 0DE0     		b	.L568
 8804              	.L567:
2517:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 8805              		.loc 1 2517 0
 8806 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8807 0048 084A     		ldr	r2, .L569
 8808 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8809 004e BB89     		ldrh	r3, [r7, #12]
 8810 0050 D31A     		subs	r3, r2, r3
 8811 0052 5B12     		asrs	r3, r3, #9
 8812 0054 FB72     		strb	r3, [r7, #11]
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 203


2518:..\src/interruptions.c ****     }
 8813              		.loc 1 2518 0
 8814 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8815 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8816 005a 0649     		ldr	r1, .L569+8
 8817 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8818 005e 044A     		ldr	r2, .L569+4
 8819 0060 D154     		strb	r1, [r2, r3]
 8820              	.L568:
 8821              		.loc 1 2520 0
 8822 0062 00BF     		nop
 8823 0064 1437     		adds	r7, r7, #20
 8824              		.cfi_def_cfa_offset 4
 8825 0066 BD46     		mov	sp, r7
 8826              		.cfi_def_cfa_register 13
 8827              		@ sp needed
 8828 0068 80BC     		pop	{r7}
 8829              		.cfi_restore 7
 8830              		.cfi_def_cfa_offset 0
 8831 006a 7047     		bx	lr
 8832              	.L570:
 8833              		.align	2
 8834              	.L569:
 8835 006c 00000000 		.word	dev_tension
 8836 0070 00000000 		.word	dev_pwm_sat
 8837 0074 00000000 		.word	pwm_preload_values
 8838              		.cfi_endproc
 8839              	.LFE76:
 8840              		.size	pwm_limit_search, .-pwm_limit_search
 8841              		.section	.text.cycles_counter_update,"ax",%progbits
 8842              		.align	2
 8843              		.global	cycles_counter_update
 8844              		.thumb
 8845              		.thumb_func
 8846              		.type	cycles_counter_update, %function
 8847              	cycles_counter_update:
 8848              	.LFB77:
2521:..\src/interruptions.c **** 
2522:..\src/interruptions.c **** //==============================================================================
2523:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2524:..\src/interruptions.c **** //==============================================================================
2525:..\src/interruptions.c **** 
2526:..\src/interruptions.c **** void cycles_counter_update() {
 8849              		.loc 1 2526 0
 8850              		.cfi_startproc
 8851              		@ args = 0, pretend = 0, frame = 24
 8852              		@ frame_needed = 1, uses_anonymous_args = 0
 8853 0000 80B5     		push	{r7, lr}
 8854              		.cfi_def_cfa_offset 8
 8855              		.cfi_offset 7, -8
 8856              		.cfi_offset 14, -4
 8857 0002 86B0     		sub	sp, sp, #24
 8858              		.cfi_def_cfa_offset 32
 8859 0004 00AF     		add	r7, sp, #0
 8860              		.cfi_def_cfa_register 7
2527:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2528:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 204


2529:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2530:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2531:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2532:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2533:..\src/interruptions.c ****     int32 curr_pos, curr_off, curr_ref;
2534:..\src/interruptions.c ****     int32 step;
2535:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2536:..\src/interruptions.c **** 
2537:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 8861              		.loc 1 2537 0
 8862 0006 AB4B     		ldr	r3, .L617
 8863 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8864 000c 1946     		mov	r1, r3
 8865 000e AA4A     		ldr	r2, .L617+4
 8866 0010 3423     		movs	r3, #52
 8867 0012 03FB01F3 		mul	r3, r3, r1
 8868 0016 1344     		add	r3, r3, r2
 8869 0018 1A68     		ldr	r2, [r3]
 8870 001a A64B     		ldr	r3, .L617
 8871 001c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8872 0020 1846     		mov	r0, r3
 8873 0022 A449     		ldr	r1, .L617
 8874 0024 0346     		mov	r3, r0
 8875 0026 5B00     		lsls	r3, r3, #1
 8876 0028 0344     		add	r3, r3, r0
 8877 002a 1B01     		lsls	r3, r3, #4
 8878 002c 0B44     		add	r3, r3, r1
 8879 002e 03F29513 		addw	r3, r3, #405
 8880 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8881 0034 42FA03F3 		asr	r3, r2, r3
 8882 0038 FB60     		str	r3, [r7, #12]
2538:..\src/interruptions.c ****     
2539:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2540:..\src/interruptions.c ****     switch (pos_cycle_status){
 8883              		.loc 1 2540 0
 8884 003a A04B     		ldr	r3, .L617+8
 8885 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8886 003e 012B     		cmp	r3, #1
 8887 0040 3AD0     		beq	.L573
 8888 0042 022B     		cmp	r3, #2
 8889 0044 6ED0     		beq	.L574
 8890 0046 002B     		cmp	r3, #0
 8891 0048 40F01881 		bne	.L572
2541:..\src/interruptions.c ****         case STATE_INACTIVE:
2542:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 8892              		.loc 1 2542 0
 8893 004c 994B     		ldr	r3, .L617
 8894 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8895 0052 072B     		cmp	r3, #7
 8896 0054 04D0     		beq	.L576
 8897              		.loc 1 2542 0 is_stmt 0 discriminator 1
 8898 0056 9A4B     		ldr	r3, .L617+12
 8899 0058 93F90030 		ldrsb	r3, [r3]
 8900 005c 012B     		cmp	r3, #1
 8901 005e 0CD0     		beq	.L577
 8902              	.L576:
 8903              		.loc 1 2542 0 discriminator 3
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 205


 8904 0060 944B     		ldr	r3, .L617
 8905 0062 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8906 0066 072B     		cmp	r3, #7
 8907 0068 40F00581 		bne	.L611
 8908              		.loc 1 2542 0 discriminator 4
 8909 006c 944B     		ldr	r3, .L617+12
 8910 006e 93F90030 		ldrsb	r3, [r3]
 8911 0072 B3F1FF3F 		cmp	r3, #-1
 8912 0076 40F0FE80 		bne	.L611
 8913              	.L577:
2543:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 8914              		.loc 1 2543 0 is_stmt 1
 8915 007a 924A     		ldr	r2, .L617+16
 8916 007c FB68     		ldr	r3, [r7, #12]
 8917 007e 1360     		str	r3, [r2]
2544:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8918              		.loc 1 2544 0
 8919 0080 914B     		ldr	r3, .L617+20
 8920 0082 1A68     		ldr	r2, [r3]
 8921 0084 8F4B     		ldr	r3, .L617+16
 8922 0086 1B68     		ldr	r3, [r3]
 8923 0088 9A42     		cmp	r2, r3
 8924 008a 05DD     		ble	.L579
 8925              		.loc 1 2544 0 is_stmt 0 discriminator 1
 8926 008c 8E4B     		ldr	r3, .L617+20
 8927 008e 1A68     		ldr	r2, [r3]
 8928 0090 8C4B     		ldr	r3, .L617+16
 8929 0092 1B68     		ldr	r3, [r3]
 8930 0094 D31A     		subs	r3, r2, r3
 8931 0096 04E0     		b	.L580
 8932              	.L579:
 8933              		.loc 1 2544 0 discriminator 2
 8934 0098 8A4B     		ldr	r3, .L617+16
 8935 009a 1A68     		ldr	r2, [r3]
 8936 009c 8A4B     		ldr	r3, .L617+20
 8937 009e 1B68     		ldr	r3, [r3]
 8938 00a0 D31A     		subs	r3, r2, r3
 8939              	.L580:
 8940              		.loc 1 2544 0 discriminator 4
 8941 00a2 BB60     		str	r3, [r7, #8]
2545:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 8942              		.loc 1 2545 0 is_stmt 1 discriminator 4
 8943 00a4 834B     		ldr	r3, .L617
 8944 00a6 5A6D     		ldr	r2, [r3, #84]
 8945 00a8 BB68     		ldr	r3, [r7, #8]
 8946 00aa 1344     		add	r3, r3, r2
 8947 00ac 814A     		ldr	r2, .L617
 8948 00ae 5365     		str	r3, [r2, #84]
2546:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 8949              		.loc 1 2546 0 discriminator 4
 8950 00b0 824B     		ldr	r3, .L617+8
 8951 00b2 0122     		movs	r2, #1
 8952 00b4 1A70     		strb	r2, [r3]
2547:..\src/interruptions.c ****             }
2548:..\src/interruptions.c ****             break;
 8953              		.loc 1 2548 0 discriminator 4
 8954 00b6 DEE0     		b	.L611
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 206


 8955              	.L573:
2549:..\src/interruptions.c ****         case STATE_ACTIVE:
2550:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 8956              		.loc 1 2550 0
 8957 00b8 7E4B     		ldr	r3, .L617
 8958 00ba 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8959 00be 072B     		cmp	r3, #7
 8960 00c0 05D0     		beq	.L581
 8961              		.loc 1 2550 0 is_stmt 0 discriminator 1
 8962 00c2 7F4B     		ldr	r3, .L617+12
 8963 00c4 93F90030 		ldrsb	r3, [r3]
 8964 00c8 B3F1FF3F 		cmp	r3, #-1
 8965 00cc 0BD0     		beq	.L582
 8966              	.L581:
 8967              		.loc 1 2550 0 discriminator 3
 8968 00ce 794B     		ldr	r3, .L617
 8969 00d0 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8970 00d4 072B     		cmp	r3, #7
 8971 00d6 40F0D080 		bne	.L612
 8972              		.loc 1 2550 0 discriminator 4
 8973 00da 794B     		ldr	r3, .L617+12
 8974 00dc 93F90030 		ldrsb	r3, [r3]
 8975 00e0 012B     		cmp	r3, #1
 8976 00e2 40F0CA80 		bne	.L612
 8977              	.L582:
2551:..\src/interruptions.c ****                 max_pos = curr_pos;
 8978              		.loc 1 2551 0 is_stmt 1
 8979 00e6 784A     		ldr	r2, .L617+20
 8980 00e8 FB68     		ldr	r3, [r7, #12]
 8981 00ea 1360     		str	r3, [r2]
2552:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8982              		.loc 1 2552 0
 8983 00ec 764B     		ldr	r3, .L617+20
 8984 00ee 1A68     		ldr	r2, [r3]
 8985 00f0 744B     		ldr	r3, .L617+16
 8986 00f2 1B68     		ldr	r3, [r3]
 8987 00f4 9A42     		cmp	r2, r3
 8988 00f6 05DD     		ble	.L584
 8989              		.loc 1 2552 0 is_stmt 0 discriminator 1
 8990 00f8 734B     		ldr	r3, .L617+20
 8991 00fa 1A68     		ldr	r2, [r3]
 8992 00fc 714B     		ldr	r3, .L617+16
 8993 00fe 1B68     		ldr	r3, [r3]
 8994 0100 D31A     		subs	r3, r2, r3
 8995 0102 04E0     		b	.L585
 8996              	.L584:
 8997              		.loc 1 2552 0 discriminator 2
 8998 0104 6F4B     		ldr	r3, .L617+16
 8999 0106 1A68     		ldr	r2, [r3]
 9000 0108 6F4B     		ldr	r3, .L617+20
 9001 010a 1B68     		ldr	r3, [r3]
 9002 010c D31A     		subs	r3, r2, r3
 9003              	.L585:
 9004              		.loc 1 2552 0 discriminator 4
 9005 010e BB60     		str	r3, [r7, #8]
2553:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9006              		.loc 1 2553 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 207


 9007 0110 684B     		ldr	r3, .L617
 9008 0112 5A6D     		ldr	r2, [r3, #84]
 9009 0114 BB68     		ldr	r3, [r7, #8]
 9010 0116 1344     		add	r3, r3, r2
 9011 0118 664A     		ldr	r2, .L617
 9012 011a 5365     		str	r3, [r2, #84]
2554:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9013              		.loc 1 2554 0 discriminator 4
 9014 011c 674B     		ldr	r3, .L617+8
 9015 011e 0222     		movs	r2, #2
 9016 0120 1A70     		strb	r2, [r3]
2555:..\src/interruptions.c ****             }
2556:..\src/interruptions.c ****             break;
 9017              		.loc 1 2556 0 discriminator 4
 9018 0122 AAE0     		b	.L612
 9019              	.L574:
2557:..\src/interruptions.c ****         case COUNTER_INC:
2558:..\src/interruptions.c **** 
2559:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9020              		.loc 1 2559 0
 9021 0124 684B     		ldr	r3, .L617+20
 9022 0126 1A68     		ldr	r2, [r3]
 9023 0128 664B     		ldr	r3, .L617+16
 9024 012a 1B68     		ldr	r3, [r3]
 9025 012c 9A42     		cmp	r2, r3
 9026 012e 05DD     		ble	.L586
 9027              		.loc 1 2559 0 is_stmt 0 discriminator 1
 9028 0130 654B     		ldr	r3, .L617+20
 9029 0132 1A68     		ldr	r2, [r3]
 9030 0134 634B     		ldr	r3, .L617+16
 9031 0136 1B68     		ldr	r3, [r3]
 9032 0138 D31A     		subs	r3, r2, r3
 9033 013a 04E0     		b	.L587
 9034              	.L586:
 9035              		.loc 1 2559 0 discriminator 2
 9036 013c 614B     		ldr	r3, .L617+16
 9037 013e 1A68     		ldr	r2, [r3]
 9038 0140 614B     		ldr	r3, .L617+20
 9039 0142 1B68     		ldr	r3, [r3]
 9040 0144 D31A     		subs	r3, r2, r3
 9041              	.L587:
 9042              		.loc 1 2559 0 discriminator 4
 9043 0146 BB60     		str	r3, [r7, #8]
2560:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9044              		.loc 1 2560 0 is_stmt 1 discriminator 4
 9045 0148 604B     		ldr	r3, .L617+24
 9046 014a 1B68     		ldr	r3, [r3]
 9047 014c BA68     		ldr	r2, [r7, #8]
 9048 014e 9A42     		cmp	r2, r3
 9049 0150 40F38D80 		ble	.L588
2561:..\src/interruptions.c ****                 //update position histogram
2562:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9050              		.loc 1 2562 0
 9051 0154 574B     		ldr	r3, .L617
 9052 0156 D3F8E820 		ldr	r2, [r3, #232]
 9053 015a 564B     		ldr	r3, .L617
 9054 015c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 208


 9055 0160 1846     		mov	r0, r3
 9056 0162 5449     		ldr	r1, .L617
 9057 0164 0346     		mov	r3, r0
 9058 0166 5B00     		lsls	r3, r3, #1
 9059 0168 0344     		add	r3, r3, r0
 9060 016a 1B01     		lsls	r3, r3, #4
 9061 016c 0B44     		add	r3, r3, r1
 9062 016e 03F29513 		addw	r3, r3, #405
 9063 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9064 0174 42FA03F3 		asr	r3, r2, r3
 9065 0178 554A     		ldr	r2, .L617+28
 9066 017a 82FB0312 		smull	r1, r2, r2, r3
 9067 017e 9210     		asrs	r2, r2, #2
 9068 0180 DB17     		asrs	r3, r3, #31
 9069 0182 D31A     		subs	r3, r2, r3
 9070 0184 7B60     		str	r3, [r7, #4]
2563:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9071              		.loc 1 2563 0
 9072 0186 4F4B     		ldr	r3, .L617+16
 9073 0188 1A68     		ldr	r2, [r3]
 9074 018a 7B68     		ldr	r3, [r7, #4]
 9075 018c 92FBF3F3 		sdiv	r3, r2, r3
 9076 0190 FB70     		strb	r3, [r7, #3]
2564:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9077              		.loc 1 2564 0
 9078 0192 4D4B     		ldr	r3, .L617+20
 9079 0194 1A68     		ldr	r2, [r3]
 9080 0196 7B68     		ldr	r3, [r7, #4]
 9081 0198 92FBF3F3 		sdiv	r3, r2, r3
 9082 019c BB70     		strb	r3, [r7, #2]
2565:..\src/interruptions.c ****                 
2566:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2567:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9083              		.loc 1 2567 0
 9084 019e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9085 01a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9086 01a2 9342     		cmp	r3, r2
 9087 01a4 28BF     		it	cs
 9088 01a6 1346     		movcs	r3, r2
 9089 01a8 7B70     		strb	r3, [r7, #1]
2568:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9090              		.loc 1 2568 0
 9091 01aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9092 01ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9093 01ae 9342     		cmp	r3, r2
 9094 01b0 38BF     		it	cc
 9095 01b2 1346     		movcc	r3, r2
 9096 01b4 3B70     		strb	r3, [r7]
2569:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 9097              		.loc 1 2569 0
 9098 01b6 7B78     		ldrb	r3, [r7, #1]
 9099 01b8 FB75     		strb	r3, [r7, #23]
 9100 01ba 0DE0     		b	.L589
 9101              	.L590:
2570:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2571:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9102              		.loc 1 2571 0 discriminator 3
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 209


 9103 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9104 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9105 01c0 3C49     		ldr	r1, .L617
 9106 01c2 0632     		adds	r2, r2, #6
 9107 01c4 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9108 01c8 0132     		adds	r2, r2, #1
 9109 01ca 3A49     		ldr	r1, .L617
 9110 01cc 0633     		adds	r3, r3, #6
 9111 01ce 41F82320 		str	r2, [r1, r3, lsl #2]
2569:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 9112              		.loc 1 2569 0 discriminator 3
 9113 01d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9114 01d4 0133     		adds	r3, r3, #1
 9115 01d6 FB75     		strb	r3, [r7, #23]
 9116              	.L589:
2569:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 9117              		.loc 1 2569 0 is_stmt 0 discriminator 1
 9118 01d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9119 01da 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9120 01dc 9A42     		cmp	r2, r3
 9121 01de EDD9     		bls	.L590
2572:..\src/interruptions.c ****                 }
2573:..\src/interruptions.c ****                 
2574:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2575:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9122              		.loc 1 2575 0 is_stmt 1
 9123 01e0 344B     		ldr	r3, .L617
 9124 01e2 B3F90C31 		ldrsh	r3, [r3, #268]
 9125 01e6 002B     		cmp	r3, #0
 9126 01e8 00DA     		bge	.L591
 9127 01ea 0333     		adds	r3, r3, #3
 9128              	.L591:
 9129 01ec 9B10     		asrs	r3, r3, #2
 9130 01ee 1BB2     		sxth	r3, r3
 9131 01f0 7B60     		str	r3, [r7, #4]
2576:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9132              		.loc 1 2576 0
 9133 01f2 304B     		ldr	r3, .L617
 9134 01f4 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9135 01f8 012B     		cmp	r3, #1
 9136 01fa 0CD1     		bne	.L592
2577:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9137              		.loc 1 2577 0
 9138 01fc 2D4B     		ldr	r3, .L617
 9139 01fe 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9140 0202 1946     		mov	r1, r3
 9141 0204 2C4A     		ldr	r2, .L617+4
 9142 0206 3423     		movs	r3, #52
 9143 0208 03FB01F3 		mul	r3, r3, r1
 9144 020c 1344     		add	r3, r3, r2
 9145 020e 1433     		adds	r3, r3, #20
 9146 0210 1B68     		ldr	r3, [r3]
 9147 0212 3B61     		str	r3, [r7, #16]
 9148 0214 0BE0     		b	.L593
 9149              	.L592:
2578:..\src/interruptions.c ****                 else
2579:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 210


 9150              		.loc 1 2579 0
 9151 0216 274B     		ldr	r3, .L617
 9152 0218 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9153 021c 1946     		mov	r1, r3
 9154 021e 264A     		ldr	r2, .L617+4
 9155 0220 3423     		movs	r3, #52
 9156 0222 03FB01F3 		mul	r3, r3, r1
 9157 0226 1344     		add	r3, r3, r2
 9158 0228 0C33     		adds	r3, r3, #12
 9159 022a 1B68     		ldr	r3, [r3]
 9160 022c 3B61     		str	r3, [r7, #16]
 9161              	.L593:
2580:..\src/interruptions.c ****                     
2581:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9162              		.loc 1 2581 0
 9163 022e 214B     		ldr	r3, .L617
 9164 0230 B3F90C31 		ldrsh	r3, [r3, #268]
 9165 0234 1A46     		mov	r2, r3
 9166 0236 3B69     		ldr	r3, [r7, #16]
 9167 0238 9A42     		cmp	r2, r3
 9168 023a 05DA     		bge	.L594
2582:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9169              		.loc 1 2582 0
 9170 023c 1D4B     		ldr	r3, .L617
 9171 023e DB6C     		ldr	r3, [r3, #76]
 9172 0240 0133     		adds	r3, r3, #1
 9173 0242 1C4A     		ldr	r2, .L617
 9174 0244 D364     		str	r3, [r2, #76]
 9175 0246 12E0     		b	.L588
 9176              	.L594:
2583:..\src/interruptions.c ****                 else
2584:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9177              		.loc 1 2584 0
 9178 0248 3A69     		ldr	r2, [r7, #16]
 9179 024a 7B68     		ldr	r3, [r7, #4]
 9180 024c 92FBF3F3 		sdiv	r3, r2, r3
 9181 0250 DBB2     		uxtb	r3, r3
 9182 0252 3969     		ldr	r1, [r7, #16]
 9183 0254 7A68     		ldr	r2, [r7, #4]
 9184 0256 91FBF2F2 		sdiv	r2, r1, r2
 9185 025a D2B2     		uxtb	r2, r2
 9186 025c 1549     		ldr	r1, .L617
 9187 025e 1032     		adds	r2, r2, #16
 9188 0260 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9189 0264 0132     		adds	r2, r2, #1
 9190 0266 1349     		ldr	r1, .L617
 9191 0268 1033     		adds	r3, r3, #16
 9192 026a 41F82320 		str	r2, [r1, r3, lsl #2]
 9193              	.L588:
2585:..\src/interruptions.c ****             }
2586:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9194              		.loc 1 2586 0
 9195 026e 134B     		ldr	r3, .L617+8
 9196 0270 0022     		movs	r2, #0
 9197 0272 1A70     		strb	r2, [r3]
2587:..\src/interruptions.c ****             break;
 9198              		.loc 1 2587 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 211


 9199 0274 02E0     		b	.L572
 9200              	.L611:
2548:..\src/interruptions.c ****         case STATE_ACTIVE:
 9201              		.loc 1 2548 0
 9202 0276 00BF     		nop
 9203 0278 00E0     		b	.L572
 9204              	.L612:
2556:..\src/interruptions.c ****         case COUNTER_INC:
 9205              		.loc 1 2556 0
 9206 027a 00BF     		nop
 9207              	.L572:
2588:..\src/interruptions.c ****     }
2589:..\src/interruptions.c ****     
2590:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2591:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9208              		.loc 1 2591 0
 9209 027c 0023     		movs	r3, #0
 9210 027e FB75     		strb	r3, [r7, #23]
 9211 0280 53E0     		b	.L595
 9212              	.L603:
2592:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9213              		.loc 1 2592 0
 9214 0282 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9215 0284 134A     		ldr	r2, .L617+32
 9216 0286 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9217 0288 012B     		cmp	r3, #1
 9218 028a 27D0     		beq	.L597
 9219 028c 022B     		cmp	r3, #2
 9220 028e 36D0     		beq	.L598
 9221 0290 002B     		cmp	r3, #0
 9222 0292 47D1     		bne	.L596
2593:..\src/interruptions.c ****             case STATE_INACTIVE:
2594:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9223              		.loc 1 2594 0
 9224 0294 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9225 0296 104A     		ldr	r2, .L617+36
 9226 0298 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9227 029c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9228 029e 0549     		ldr	r1, .L617
 9229 02a0 F832     		adds	r2, r2, #248
 9230 02a2 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9231 02a6 9342     		cmp	r3, r2
 9232 02a8 39DD     		ble	.L613
2595:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9233              		.loc 1 2595 0
 9234 02aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9235 02ac 094A     		ldr	r2, .L617+32
 9236 02ae 0121     		movs	r1, #1
 9237 02b0 D154     		strb	r1, [r2, r3]
2596:..\src/interruptions.c ****                 }
2597:..\src/interruptions.c ****                 break;
 9238              		.loc 1 2597 0
 9239 02b2 34E0     		b	.L613
 9240              	.L618:
 9241              		.align	2
 9242              	.L617:
 9243 02b4 00000000 		.word	g_mem
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 212


 9244 02b8 00000000 		.word	g_meas
 9245 02bc 8E010000 		.word	pos_cycle_status.10724
 9246 02c0 00000000 		.word	pwm_sign
 9247 02c4 90010000 		.word	thr_pos.10728
 9248 02c8 94010000 		.word	max_pos.10729
 9249 02cc 08000000 		.word	bin_threshold.10727
 9250 02d0 67666666 		.word	1717986919
 9251 02d4 98010000 		.word	emg_cycle_status.10725
 9252 02d8 00000000 		.word	g_adc_meas
 9253              	.L597:
2598:..\src/interruptions.c ****             case STATE_ACTIVE:
2599:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 9254              		.loc 1 2599 0
 9255 02dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9256 02de 414A     		ldr	r2, .L619
 9257 02e0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9258 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9259 02e6 4049     		ldr	r1, .L619+4
 9260 02e8 F833     		adds	r3, r3, #248
 9261 02ea 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9262 02ee 0A3B     		subs	r3, r3, #10
 9263 02f0 9A42     		cmp	r2, r3
 9264 02f2 16DA     		bge	.L614
2600:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9265              		.loc 1 2600 0
 9266 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9267 02f6 3D4A     		ldr	r2, .L619+8
 9268 02f8 0221     		movs	r1, #2
 9269 02fa D154     		strb	r1, [r2, r3]
2601:..\src/interruptions.c ****                 }
2602:..\src/interruptions.c ****                 break;
 9270              		.loc 1 2602 0
 9271 02fc 11E0     		b	.L614
 9272              	.L598:
2603:..\src/interruptions.c ****             case COUNTER_INC:
2604:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 9273              		.loc 1 2604 0
 9274 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9275 0300 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9276 0302 3949     		ldr	r1, .L619+4
 9277 0304 0432     		adds	r2, r2, #4
 9278 0306 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9279 030a 0132     		adds	r2, r2, #1
 9280 030c 3649     		ldr	r1, .L619+4
 9281 030e 0433     		adds	r3, r3, #4
 9282 0310 41F82320 		str	r2, [r1, r3, lsl #2]
2605:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9283              		.loc 1 2605 0
 9284 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9285 0316 354A     		ldr	r2, .L619+8
 9286 0318 0021     		movs	r1, #0
 9287 031a D154     		strb	r1, [r2, r3]
2606:..\src/interruptions.c ****                 break;
 9288              		.loc 1 2606 0
 9289 031c 02E0     		b	.L596
 9290              	.L613:
2597:..\src/interruptions.c ****             case STATE_ACTIVE:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 213


 9291              		.loc 1 2597 0
 9292 031e 00BF     		nop
 9293 0320 00E0     		b	.L596
 9294              	.L614:
2602:..\src/interruptions.c ****             case COUNTER_INC:
 9295              		.loc 1 2602 0
 9296 0322 00BF     		nop
 9297              	.L596:
2591:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9298              		.loc 1 2591 0 discriminator 2
 9299 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9300 0326 0133     		adds	r3, r3, #1
 9301 0328 FB75     		strb	r3, [r7, #23]
 9302              	.L595:
2591:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9303              		.loc 1 2591 0 is_stmt 0 discriminator 1
 9304 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9305 032c 012B     		cmp	r3, #1
 9306 032e 07D8     		bhi	.L602
2591:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9307              		.loc 1 2591 0 discriminator 3
 9308 0330 2F4B     		ldr	r3, .L619+12
 9309 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9310 0334 002B     		cmp	r3, #0
 9311 0336 03D1     		bne	.L602
2591:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9312              		.loc 1 2591 0 discriminator 4
 9313 0338 2E4B     		ldr	r3, .L619+16
 9314 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9315 033c 002B     		cmp	r3, #0
 9316 033e A0D0     		beq	.L603
 9317              	.L602:
2607:..\src/interruptions.c ****         }
2608:..\src/interruptions.c ****     }
2609:..\src/interruptions.c ****     
2610:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2611:..\src/interruptions.c ****     switch (rest_cycle_status){
 9318              		.loc 1 2611 0 is_stmt 1
 9319 0340 2D4B     		ldr	r3, .L619+20
 9320 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9321 0344 012B     		cmp	r3, #1
 9322 0346 11D0     		beq	.L605
 9323 0348 022B     		cmp	r3, #2
 9324 034a 2AD0     		beq	.L606
 9325 034c 002B     		cmp	r3, #0
 9326 034e 42D1     		bne	.L604
2612:..\src/interruptions.c ****         case STATE_INACTIVE:
2613:..\src/interruptions.c ****             if (rest_enabled){
 9327              		.loc 1 2613 0
 9328 0350 2A4B     		ldr	r3, .L619+24
 9329 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9330 0354 002B     		cmp	r3, #0
 9331 0356 3BD0     		beq	.L615
2614:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9332              		.loc 1 2614 0
 9333 0358 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9334 035c 0346     		mov	r3, r0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 214


 9335 035e 1A46     		mov	r2, r3
 9336 0360 274B     		ldr	r3, .L619+28
 9337 0362 1A60     		str	r2, [r3]
2615:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9338              		.loc 1 2615 0
 9339 0364 244B     		ldr	r3, .L619+20
 9340 0366 0122     		movs	r2, #1
 9341 0368 1A70     		strb	r2, [r3]
2616:..\src/interruptions.c ****             }
2617:..\src/interruptions.c ****             break;
 9342              		.loc 1 2617 0
 9343 036a 31E0     		b	.L615
 9344              	.L605:
2618:..\src/interruptions.c ****         case STATE_ACTIVE:
2619:..\src/interruptions.c ****             if (!rest_enabled){
 9345              		.loc 1 2619 0
 9346 036c 234B     		ldr	r3, .L619+24
 9347 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9348 0370 002B     		cmp	r3, #0
 9349 0372 2FD1     		bne	.L616
2620:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9350              		.loc 1 2620 0
 9351 0374 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9352 0378 0346     		mov	r3, r0
 9353 037a 1A46     		mov	r2, r3
 9354 037c 214B     		ldr	r3, .L619+32
 9355 037e 1A60     		str	r2, [r3]
2621:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9356              		.loc 1 2621 0
 9357 0380 1F4B     		ldr	r3, .L619+28
 9358 0382 1A68     		ldr	r2, [r3]
 9359 0384 1F4B     		ldr	r3, .L619+32
 9360 0386 1B68     		ldr	r3, [r3]
 9361 0388 9A42     		cmp	r2, r3
 9362 038a 06D2     		bcs	.L610
2622:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9363              		.loc 1 2622 0
 9364 038c 1C4B     		ldr	r3, .L619+28
 9365 038e 1B68     		ldr	r3, [r3]
 9366 0390 03F5BB53 		add	r3, r3, #5984
 9367 0394 1033     		adds	r3, r3, #16
 9368 0396 1A4A     		ldr	r2, .L619+28
 9369 0398 1360     		str	r3, [r2]
 9370              	.L610:
2623:..\src/interruptions.c ****                 }
2624:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9371              		.loc 1 2624 0
 9372 039a 174B     		ldr	r3, .L619+20
 9373 039c 0222     		movs	r2, #2
 9374 039e 1A70     		strb	r2, [r3]
2625:..\src/interruptions.c ****             }
2626:..\src/interruptions.c ****             break;
 9375              		.loc 1 2626 0
 9376 03a0 18E0     		b	.L616
 9377              	.L606:
2627:..\src/interruptions.c ****         case COUNTER_INC: 
2628:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 215


 9378              		.loc 1 2628 0
 9379 03a2 114B     		ldr	r3, .L619+4
 9380 03a4 DA6D     		ldr	r2, [r3, #92]
 9381 03a6 164B     		ldr	r3, .L619+28
 9382 03a8 1968     		ldr	r1, [r3]
 9383 03aa 164B     		ldr	r3, .L619+32
 9384 03ac 1B68     		ldr	r3, [r3]
 9385 03ae CB1A     		subs	r3, r1, r3
 9386 03b0 1549     		ldr	r1, .L619+36
 9387 03b2 A1FB0313 		umull	r1, r3, r1, r3
 9388 03b6 1B09     		lsrs	r3, r3, #4
 9389 03b8 1344     		add	r3, r3, r2
 9390 03ba 0B4A     		ldr	r2, .L619+4
 9391 03bc D365     		str	r3, [r2, #92]
2629:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9392              		.loc 1 2629 0
 9393 03be 0A4B     		ldr	r3, .L619+4
 9394 03c0 1B6D     		ldr	r3, [r3, #80]
 9395 03c2 0133     		adds	r3, r3, #1
 9396 03c4 084A     		ldr	r2, .L619+4
 9397 03c6 1365     		str	r3, [r2, #80]
2630:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9398              		.loc 1 2630 0
 9399 03c8 0B4B     		ldr	r3, .L619+20
 9400 03ca 0022     		movs	r2, #0
 9401 03cc 1A70     		strb	r2, [r3]
2631:..\src/interruptions.c ****             break;
 9402              		.loc 1 2631 0
 9403 03ce 02E0     		b	.L604
 9404              	.L615:
2617:..\src/interruptions.c ****         case STATE_ACTIVE:
 9405              		.loc 1 2617 0
 9406 03d0 00BF     		nop
 9407 03d2 00E0     		b	.L604
 9408              	.L616:
2626:..\src/interruptions.c ****         case COUNTER_INC: 
 9409              		.loc 1 2626 0
 9410 03d4 00BF     		nop
 9411              	.L604:
2632:..\src/interruptions.c ****     }
2633:..\src/interruptions.c ****           
2634:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2635:..\src/interruptions.c ****     save_cycles_eeprom();
 9412              		.loc 1 2635 0
 9413 03d6 FFF7FEFF 		bl	save_cycles_eeprom
2636:..\src/interruptions.c ****     
2637:..\src/interruptions.c **** }
 9414              		.loc 1 2637 0
 9415 03da 00BF     		nop
 9416 03dc 1837     		adds	r7, r7, #24
 9417              		.cfi_def_cfa_offset 8
 9418 03de BD46     		mov	sp, r7
 9419              		.cfi_def_cfa_register 13
 9420              		@ sp needed
 9421 03e0 80BD     		pop	{r7, pc}
 9422              	.L620:
 9423 03e2 00BF     		.align	2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 216


 9424              	.L619:
 9425 03e4 00000000 		.word	g_adc_meas
 9426 03e8 00000000 		.word	g_mem
 9427 03ec 98010000 		.word	emg_cycle_status.10725
 9428 03f0 00000000 		.word	emg_1_status
 9429 03f4 00000000 		.word	emg_2_status
 9430 03f8 9A010000 		.word	rest_cycle_status.10726
 9431 03fc 00000000 		.word	rest_enabled
 9432 0400 9C010000 		.word	timer_value_s.10739
 9433 0404 A0010000 		.word	timer_value_e.10740
 9434 0408 1F85EB51 		.word	1374389535
 9435              		.cfi_endproc
 9436              	.LFE77:
 9437              		.size	cycles_counter_update, .-cycles_counter_update
 9438              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9439              		.align	2
 9440              		.global	save_cycles_eeprom
 9441              		.thumb
 9442              		.thumb_func
 9443              		.type	save_cycles_eeprom, %function
 9444              	save_cycles_eeprom:
 9445              	.LFB78:
2638:..\src/interruptions.c **** 
2639:..\src/interruptions.c **** //==============================================================================
2640:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2641:..\src/interruptions.c **** //==============================================================================
2642:..\src/interruptions.c **** 
2643:..\src/interruptions.c **** void save_cycles_eeprom() {
 9446              		.loc 1 2643 0
 9447              		.cfi_startproc
 9448              		@ args = 0, pretend = 0, frame = 24
 9449              		@ frame_needed = 1, uses_anonymous_args = 0
 9450 0000 80B5     		push	{r7, lr}
 9451              		.cfi_def_cfa_offset 8
 9452              		.cfi_offset 7, -8
 9453              		.cfi_offset 14, -4
 9454 0002 86B0     		sub	sp, sp, #24
 9455              		.cfi_def_cfa_offset 32
 9456 0004 00AF     		add	r7, sp, #0
 9457              		.cfi_def_cfa_register 7
2644:..\src/interruptions.c **** 
2645:..\src/interruptions.c ****     cystatus status;
2646:..\src/interruptions.c ****     static uint8 row_number;
2647:..\src/interruptions.c ****     uint8 row_start = 1;
 9458              		.loc 1 2647 0
 9459 0006 0123     		movs	r3, #1
 9460 0008 FB75     		strb	r3, [r7, #23]
2648:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 9461              		.loc 1 2648 0
 9462 000a 394B     		ldr	r3, .L637
 9463 000c 3B61     		str	r3, [r7, #16]
2649:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 9464              		.loc 1 2649 0
 9465 000e 394B     		ldr	r3, .L637+4
 9466 0010 FB60     		str	r3, [r7, #12]
2650:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9467              		.loc 1 2650 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 217


 9468 0012 FB7D     		ldrb	r3, [r7, #23]
 9469 0014 0433     		adds	r3, r3, #4
 9470 0016 FB72     		strb	r3, [r7, #11]
2651:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2652:..\src/interruptions.c **** 
2653:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2654:..\src/interruptions.c ****     switch(cycles_status) {
 9471              		.loc 1 2654 0
 9472 0018 374B     		ldr	r3, .L637+8
 9473 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9474 001c 042B     		cmp	r3, #4
 9475 001e 63D8     		bhi	.L633
 9476 0020 01A2     		adr	r2, .L624
 9477 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9478 0026 00BF     		.p2align 2
 9479              	.L624:
 9480 0028 3D000000 		.word	.L623+1
 9481 002c 5B000000 		.word	.L625+1
 9482 0030 8B000000 		.word	.L626+1
 9483 0034 C7000000 		.word	.L627+1
 9484 0038 DF000000 		.word	.L634+1
 9485              		.p2align 1
 9486              	.L623:
2655:..\src/interruptions.c ****         case PREPARE_DATA:
2656:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2657:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9487              		.loc 1 2657 0
 9488 003c 5022     		movs	r2, #80
 9489 003e 3969     		ldr	r1, [r7, #16]
 9490 0040 F868     		ldr	r0, [r7, #12]
 9491 0042 FFF7FEFF 		bl	memcpy
2658:..\src/interruptions.c ****             m_addr = addr_start;
 9492              		.loc 1 2658 0
 9493 0046 2D4A     		ldr	r2, .L637+12
 9494 0048 3B69     		ldr	r3, [r7, #16]
 9495 004a 1360     		str	r3, [r2]
2659:..\src/interruptions.c ****             row_number = row_start;
 9496              		.loc 1 2659 0
 9497 004c 2C4A     		ldr	r2, .L637+16
 9498 004e FB7D     		ldrb	r3, [r7, #23]
 9499 0050 1370     		strb	r3, [r2]
2660:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 9500              		.loc 1 2660 0
 9501 0052 294B     		ldr	r3, .L637+8
 9502 0054 0122     		movs	r2, #1
 9503 0056 1A70     		strb	r2, [r3]
2661:..\src/interruptions.c ****             break;
 9504              		.loc 1 2661 0
 9505 0058 46E0     		b	.L622
 9506              	.L625:
2662:..\src/interruptions.c ****             
2663:..\src/interruptions.c ****         case WRITE_CYCLES:
2664:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 9507              		.loc 1 2664 0
 9508 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2665:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 9509              		.loc 1 2665 0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 218


 9510 005e 274B     		ldr	r3, .L637+12
 9511 0060 1A68     		ldr	r2, [r3]
 9512 0062 274B     		ldr	r3, .L637+16
 9513 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9514 0066 1946     		mov	r1, r3
 9515 0068 1046     		mov	r0, r2
 9516 006a FFF7FEFF 		bl	EEPROM_StartWrite
 9517 006e 7860     		str	r0, [r7, #4]
2666:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 9518              		.loc 1 2666 0
 9519 0070 7B68     		ldr	r3, [r7, #4]
 9520 0072 072B     		cmp	r3, #7
 9521 0074 02D0     		beq	.L629
 9522              		.loc 1 2666 0 is_stmt 0 discriminator 1
 9523 0076 7B68     		ldr	r3, [r7, #4]
 9524 0078 002B     		cmp	r3, #0
 9525 007a 32D1     		bne	.L635
 9526              	.L629:
2667:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 9527              		.loc 1 2667 0 is_stmt 1
 9528 007c 1E4B     		ldr	r3, .L637+8
 9529 007e 0222     		movs	r2, #2
 9530 0080 1A70     		strb	r2, [r3]
2668:..\src/interruptions.c ****                 can_write = FALSE;
 9531              		.loc 1 2668 0
 9532 0082 204B     		ldr	r3, .L637+20
 9533 0084 0022     		movs	r2, #0
 9534 0086 1A70     		strb	r2, [r3]
2669:..\src/interruptions.c ****             }
2670:..\src/interruptions.c ****             break;
 9535              		.loc 1 2670 0
 9536 0088 2BE0     		b	.L635
 9537              	.L626:
2671:..\src/interruptions.c ****             
2672:..\src/interruptions.c ****         case WAIT_QUERY:
2673:..\src/interruptions.c ****             status = EEPROM_Query();
 9538              		.loc 1 2673 0
 9539 008a FFF7FEFF 		bl	EEPROM_Query
 9540 008e 7860     		str	r0, [r7, #4]
2674:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 9541              		.loc 1 2674 0
 9542 0090 7B68     		ldr	r3, [r7, #4]
 9543 0092 002B     		cmp	r3, #0
 9544 0094 27D1     		bne	.L636
2675:..\src/interruptions.c ****                 if (row_number < row_end) {
 9545              		.loc 1 2675 0
 9546 0096 1A4B     		ldr	r3, .L637+16
 9547 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9548 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9549 009c 9A42     		cmp	r2, r3
 9550 009e 0ED9     		bls	.L632
2676:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 9551              		.loc 1 2676 0
 9552 00a0 164B     		ldr	r3, .L637+12
 9553 00a2 1B68     		ldr	r3, [r3]
 9554 00a4 1033     		adds	r3, r3, #16
 9555 00a6 154A     		ldr	r2, .L637+12
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 219


 9556 00a8 1360     		str	r3, [r2]
2677:..\src/interruptions.c ****                     row_number = row_number + 1;
 9557              		.loc 1 2677 0
 9558 00aa 154B     		ldr	r3, .L637+16
 9559 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9560 00ae 0133     		adds	r3, r3, #1
 9561 00b0 DAB2     		uxtb	r2, r3
 9562 00b2 134B     		ldr	r3, .L637+16
 9563 00b4 1A70     		strb	r2, [r3]
2678:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 9564              		.loc 1 2678 0
 9565 00b6 104B     		ldr	r3, .L637+8
 9566 00b8 0122     		movs	r2, #1
 9567 00ba 1A70     		strb	r2, [r3]
2679:..\src/interruptions.c ****                 }
2680:..\src/interruptions.c ****                 else {
2681:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2682:..\src/interruptions.c ****                 }
2683:..\src/interruptions.c ****             }
2684:..\src/interruptions.c ****             break;
 9568              		.loc 1 2684 0
 9569 00bc 13E0     		b	.L636
 9570              	.L632:
2681:..\src/interruptions.c ****                 }
 9571              		.loc 1 2681 0
 9572 00be 0E4B     		ldr	r3, .L637+8
 9573 00c0 0322     		movs	r2, #3
 9574 00c2 1A70     		strb	r2, [r3]
 9575              		.loc 1 2684 0
 9576 00c4 0FE0     		b	.L636
 9577              	.L627:
2685:..\src/interruptions.c ****            
2686:..\src/interruptions.c ****         case WRITE_END:
2687:..\src/interruptions.c ****             can_write = TRUE;            
 9578              		.loc 1 2687 0
 9579 00c6 0F4B     		ldr	r3, .L637+20
 9580 00c8 0122     		movs	r2, #1
 9581 00ca 1A70     		strb	r2, [r3]
2688:..\src/interruptions.c ****             cycles_status = NONE;
 9582              		.loc 1 2688 0
 9583 00cc 0A4B     		ldr	r3, .L637+8
 9584 00ce 0422     		movs	r2, #4
 9585 00d0 1A70     		strb	r2, [r3]
2689:..\src/interruptions.c ****             
2690:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2691:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 9586              		.loc 1 2691 0
 9587 00d2 5022     		movs	r2, #80
 9588 00d4 F968     		ldr	r1, [r7, #12]
 9589 00d6 3869     		ldr	r0, [r7, #16]
 9590 00d8 FFF7FEFF 		bl	memcpy
2692:..\src/interruptions.c ****             break;
 9591              		.loc 1 2692 0
 9592 00dc 04E0     		b	.L622
 9593              	.L634:
2693:..\src/interruptions.c ****             
2694:..\src/interruptions.c ****         case NONE:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 220


2695:..\src/interruptions.c ****             break;
 9594              		.loc 1 2695 0
 9595 00de 00BF     		nop
 9596 00e0 02E0     		b	.L633
 9597              	.L635:
2670:..\src/interruptions.c ****             
 9598              		.loc 1 2670 0
 9599 00e2 00BF     		nop
 9600 00e4 00E0     		b	.L633
 9601              	.L636:
2684:..\src/interruptions.c ****            
 9602              		.loc 1 2684 0
 9603 00e6 00BF     		nop
 9604              	.L622:
 9605              	.L633:
2696:..\src/interruptions.c ****     }
2697:..\src/interruptions.c ****     
2698:..\src/interruptions.c **** }
 9606              		.loc 1 2698 0
 9607 00e8 00BF     		nop
 9608 00ea 1837     		adds	r7, r7, #24
 9609              		.cfi_def_cfa_offset 8
 9610 00ec BD46     		mov	sp, r7
 9611              		.cfi_def_cfa_register 13
 9612              		@ sp needed
 9613 00ee 80BD     		pop	{r7, pc}
 9614              	.L638:
 9615              		.align	2
 9616              	.L637:
 9617 00f0 10000000 		.word	g_mem+16
 9618 00f4 10000000 		.word	c_mem+16
 9619 00f8 00000000 		.word	cycles_status
 9620 00fc A4010000 		.word	m_addr.10767
 9621 0100 A8010000 		.word	row_number.10762
 9622 0104 00000000 		.word	can_write
 9623              		.cfi_endproc
 9624              	.LFE78:
 9625              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 9626              		.bss
 9627              	state.10445:
 9628 0000 00       		.space	1
 9629 0001 000000   		.align	2
 9630              	rx_queue.10449:
 9631 0004 000000   		.space	3
 9632              	data_packet_length.10447:
 9633 0007 00       		.space	1
 9634              	data_packet_index.10446:
 9635 0008 00       		.space	1
 9636 0009 000000   		.align	2
 9637              	data_packet_buffer.10448:
 9638 000c 00000000 		.space	128
 9638      00000000 
 9638      00000000 
 9638      00000000 
 9638      00000000 
 9639              		.data
 9640              		.align	1
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 221


 9641              		.type	counter_calibration.10465, %object
 9642              		.size	counter_calibration.10465, 2
 9643              	counter_calibration.10465:
 9644 0000 0100     		.short	1
 9645              		.align	1
 9646              		.type	counter_tension_func.10466, %object
 9647              		.size	counter_tension_func.10466, 2
 9648              	counter_tension_func.10466:
 9649 0002 0100     		.short	1
 9650              		.bss
 9651              		.align	2
 9652              	current_emg.10491:
 9653 008c 0000     		.space	2
 9654              	fsm_state.10528:
 9655 008e 00       		.space	1
 9656 008f 00       		.align	2
 9657              	pos_error_sum.10555:
 9658 0090 00000000 		.space	4
 9659              		.align	2
 9660              	prev_pos_err.10557:
 9661 0094 00000000 		.space	4
 9662              	motor_dir.10560:
 9663 0098 00       		.space	1
 9664 0099 000000   		.align	2
 9665              	curr_error_sum.10556:
 9666 009c 00000000 		.space	4
 9667              		.align	2
 9668              	prev_curr_err.10558:
 9669 00a0 00000000 		.space	4
 9670              		.align	2
 9671              	prev_pwm.10559:
 9672 00a4 00000000 		.space	4
 9673              		.align	2
 9674              	position_counter.10561:
 9675 00a8 00000000 		.space	4
 9676              		.align	2
 9677              	pos_error_sum.10588:
 9678 00ac 00000000 		.space	8
 9678      00000000 
 9679              		.align	2
 9680              	prev_pos_err.10590:
 9681 00b4 00000000 		.space	8
 9681      00000000 
 9682              		.align	2
 9683              	motor_dir.10593:
 9684 00bc 0000     		.space	2
 9685 00be 0000     		.align	2
 9686              	curr_error_sum.10589:
 9687 00c0 00000000 		.space	8
 9687      00000000 
 9688              		.align	2
 9689              	prev_curr_err.10591:
 9690 00c8 00000000 		.space	8
 9690      00000000 
 9691              		.align	2
 9692              	prev_pwm.10592:
 9693 00d0 00000000 		.space	8
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 222


 9693      00000000 
 9694              		.align	2
 9695              	position_counter.10594:
 9696 00d8 00000000 		.space	8
 9696      00000000 
 9697              		.align	2
 9698              	last_value_encoder.10617:
 9699 00e0 00000000 		.space	24
 9699      00000000 
 9699      00000000 
 9699      00000000 
 9699      00000000 
 9700              		.align	2
 9701              	comp_value_encoder.10618:
 9702 00f8 00000000 		.space	24
 9702      00000000 
 9702      00000000 
 9702      00000000 
 9702      00000000 
 9703              		.data
 9704              		.align	2
 9705              		.type	only_first_time.10620, %object
 9706              		.size	only_first_time.10620, 2
 9707              	only_first_time.10620:
 9708 0004 01       		.byte	1
 9709 0005 01       		.byte	1
 9710              		.bss
 9711              		.align	2
 9712              	error.10619:
 9713 0110 00000000 		.space	6
 9713      0000
 9714 0116 0000     		.align	2
 9715              	v_value.10625:
 9716 0118 00000000 		.space	24
 9716      00000000 
 9716      00000000 
 9716      00000000 
 9716      00000000 
 9717              		.align	2
 9718              	vv_value.10626:
 9719 0130 00000000 		.space	24
 9719      00000000 
 9719      00000000 
 9719      00000000 
 9719      00000000 
 9720              		.align	2
 9721              	vvv_value.10627:
 9722 0148 00000000 		.space	24
 9722      00000000 
 9722      00000000 
 9722      00000000 
 9722      00000000 
 9723              		.align	2
 9724              	pos_reconstruct.10624:
 9725 0160 0000     		.space	2
 9726 0162 0000     		.align	2
 9727              	one_time_execute.10622:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 223


 9728 0164 0000     		.space	2
 9729 0166 0000     		.align	2
 9730              	safe_startup_motor_activation.10621:
 9731 0168 0000     		.space	2
 9732 016a 0000     		.align	2
 9733              	count_startup_motor.10623:
 9734 016c 00000000 		.space	8
 9734      00000000 
 9735              		.data
 9736              		.type	first_tension_valid.10650, %object
 9737              		.size	first_tension_valid.10650, 1
 9738              	first_tension_valid.10650:
 9739 0006 01       		.byte	1
 9740              		.bss
 9741              		.align	1
 9742              	count.10651:
 9743 0174 0000     		.space	2
 9744              	idx.10653:
 9745 0176 00       		.space	1
 9746 0177 00       		.align	2
 9747              	v_count.10652:
 9748 0178 00000000 		.space	4
 9749              		.align	1
 9750              	emg_counter_1.10644:
 9751 017c 0000     		.space	2
 9752              		.align	1
 9753              	emg_counter_2.10645:
 9754 017e 0000     		.space	2
 9755              		.align	2
 9756              	UD_mean_value.10648:
 9757 0180 00000000 		.space	4
 9758              		.align	1
 9759              	UD_counter.10646:
 9760 0184 0000     		.space	2
 9761 0186 0000     		.align	2
 9762              	LR_mean_value.10649:
 9763 0188 00000000 		.space	4
 9764              		.align	1
 9765              	LR_counter.10647:
 9766 018c 0000     		.space	2
 9767              	pos_cycle_status.10724:
 9768 018e 00       		.space	1
 9769 018f 00       		.align	2
 9770              	thr_pos.10728:
 9771 0190 00000000 		.space	4
 9772              		.align	2
 9773              	max_pos.10729:
 9774 0194 00000000 		.space	4
 9775              		.data
 9776 0007 00       		.align	2
 9777              		.type	bin_threshold.10727, %object
 9778              		.size	bin_threshold.10727, 4
 9779              	bin_threshold.10727:
 9780 0008 FA000000 		.word	250
 9781              		.bss
 9782              		.align	2
 9783              	emg_cycle_status.10725:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 224


 9784 0198 0000     		.space	2
 9785              	rest_cycle_status.10726:
 9786 019a 00       		.space	1
 9787 019b 00       		.align	2
 9788              	timer_value_s.10739:
 9789 019c 00000000 		.space	4
 9790              		.align	2
 9791              	timer_value_e.10740:
 9792 01a0 00000000 		.space	4
 9793              		.align	2
 9794              	m_addr.10767:
 9795 01a4 00000000 		.space	4
 9796              	row_number.10762:
 9797 01a8 00       		.space	1
 9798              		.text
 9799              	.Letext0:
 9800              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 9801              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 9802              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 9803              		.file 5 "..\\src\\commands.h"
 9804              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 9805              		.file 7 "..\\src\\globals.h"
 9806              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 9807              		.section	.debug_info,"",%progbits
 9808              	.Ldebug_info0:
 9809 0000 2D1B0000 		.4byte	0x1b2d
 9810 0004 0400     		.2byte	0x4
 9811 0006 00000000 		.4byte	.Ldebug_abbrev0
 9812 000a 04       		.byte	0x4
 9813 000b 01       		.uleb128 0x1
 9814 000c 4E080000 		.4byte	.LASF342
 9815 0010 0C       		.byte	0xc
 9816 0011 53100000 		.4byte	.LASF343
 9817 0015 4D110000 		.4byte	.LASF344
 9818 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 9819 001d 00000000 		.4byte	0
 9820 0021 00000000 		.4byte	.Ldebug_line0
 9821 0025 02       		.uleb128 0x2
 9822 0026 01       		.byte	0x1
 9823 0027 06       		.byte	0x6
 9824 0028 B1030000 		.4byte	.LASF0
 9825 002c 02       		.uleb128 0x2
 9826 002d 01       		.byte	0x1
 9827 002e 08       		.byte	0x8
 9828 002f 2E040000 		.4byte	.LASF1
 9829 0033 02       		.uleb128 0x2
 9830 0034 02       		.byte	0x2
 9831 0035 05       		.byte	0x5
 9832 0036 480E0000 		.4byte	.LASF2
 9833 003a 02       		.uleb128 0x2
 9834 003b 02       		.byte	0x2
 9835 003c 07       		.byte	0x7
 9836 003d F70F0000 		.4byte	.LASF3
 9837 0041 03       		.uleb128 0x3
 9838 0042 E9100000 		.4byte	.LASF9
 9839 0046 02       		.byte	0x2
 9840 0047 3F       		.byte	0x3f
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 225


 9841 0048 4C000000 		.4byte	0x4c
 9842 004c 02       		.uleb128 0x2
 9843 004d 04       		.byte	0x4
 9844 004e 05       		.byte	0x5
 9845 004f 91020000 		.4byte	.LASF4
 9846 0053 02       		.uleb128 0x2
 9847 0054 04       		.byte	0x4
 9848 0055 07       		.byte	0x7
 9849 0056 41070000 		.4byte	.LASF5
 9850 005a 02       		.uleb128 0x2
 9851 005b 08       		.byte	0x8
 9852 005c 05       		.byte	0x5
 9853 005d 14090000 		.4byte	.LASF6
 9854 0061 02       		.uleb128 0x2
 9855 0062 08       		.byte	0x8
 9856 0063 07       		.byte	0x7
 9857 0064 F30B0000 		.4byte	.LASF7
 9858 0068 04       		.uleb128 0x4
 9859 0069 04       		.byte	0x4
 9860 006a 05       		.byte	0x5
 9861 006b 696E7400 		.ascii	"int\000"
 9862 006f 02       		.uleb128 0x2
 9863 0070 04       		.byte	0x4
 9864 0071 07       		.byte	0x7
 9865 0072 2A0A0000 		.4byte	.LASF8
 9866 0076 03       		.uleb128 0x3
 9867 0077 6E000000 		.4byte	.LASF10
 9868 007b 03       		.byte	0x3
 9869 007c 2C       		.byte	0x2c
 9870 007d 41000000 		.4byte	0x41
 9871 0081 05       		.uleb128 0x5
 9872 0082 220E0000 		.4byte	.LASF11
 9873 0086 04       		.byte	0x4
 9874 0087 E401     		.2byte	0x1e4
 9875 0089 2C000000 		.4byte	0x2c
 9876 008d 05       		.uleb128 0x5
 9877 008e 46110000 		.4byte	.LASF12
 9878 0092 04       		.byte	0x4
 9879 0093 E501     		.2byte	0x1e5
 9880 0095 3A000000 		.4byte	0x3a
 9881 0099 05       		.uleb128 0x5
 9882 009a 94000000 		.4byte	.LASF13
 9883 009e 04       		.byte	0x4
 9884 009f E601     		.2byte	0x1e6
 9885 00a1 53000000 		.4byte	0x53
 9886 00a5 05       		.uleb128 0x5
 9887 00a6 78010000 		.4byte	.LASF14
 9888 00aa 04       		.byte	0x4
 9889 00ab E701     		.2byte	0x1e7
 9890 00ad 25000000 		.4byte	0x25
 9891 00b1 05       		.uleb128 0x5
 9892 00b2 EF0E0000 		.4byte	.LASF15
 9893 00b6 04       		.byte	0x4
 9894 00b7 E801     		.2byte	0x1e8
 9895 00b9 33000000 		.4byte	0x33
 9896 00bd 05       		.uleb128 0x5
 9897 00be 76100000 		.4byte	.LASF16
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 226


 9898 00c2 04       		.byte	0x4
 9899 00c3 E901     		.2byte	0x1e9
 9900 00c5 4C000000 		.4byte	0x4c
 9901 00c9 05       		.uleb128 0x5
 9902 00ca 4D030000 		.4byte	.LASF17
 9903 00ce 04       		.byte	0x4
 9904 00cf EA01     		.2byte	0x1ea
 9905 00d1 D5000000 		.4byte	0xd5
 9906 00d5 02       		.uleb128 0x2
 9907 00d6 04       		.byte	0x4
 9908 00d7 04       		.byte	0x4
 9909 00d8 FC090000 		.4byte	.LASF18
 9910 00dc 02       		.uleb128 0x2
 9911 00dd 08       		.byte	0x8
 9912 00de 04       		.byte	0x4
 9913 00df 57090000 		.4byte	.LASF19
 9914 00e3 02       		.uleb128 0x2
 9915 00e4 01       		.byte	0x1
 9916 00e5 08       		.byte	0x8
 9917 00e6 C0040000 		.4byte	.LASF20
 9918 00ea 05       		.uleb128 0x5
 9919 00eb 630A0000 		.4byte	.LASF21
 9920 00ef 04       		.byte	0x4
 9921 00f0 8602     		.2byte	0x286
 9922 00f2 53000000 		.4byte	0x53
 9923 00f6 05       		.uleb128 0x5
 9924 00f7 9E0C0000 		.4byte	.LASF22
 9925 00fb 04       		.byte	0x4
 9926 00fc 8E02     		.2byte	0x28e
 9927 00fe 02010000 		.4byte	0x102
 9928 0102 06       		.uleb128 0x6
 9929 0103 81000000 		.4byte	0x81
 9930 0107 02       		.uleb128 0x2
 9931 0108 08       		.byte	0x8
 9932 0109 04       		.byte	0x4
 9933 010a 020B0000 		.4byte	.LASF23
 9934 010e 02       		.uleb128 0x2
 9935 010f 04       		.byte	0x4
 9936 0110 07       		.byte	0x7
 9937 0111 00000000 		.4byte	.LASF24
 9938 0115 07       		.uleb128 0x7
 9939 0116 E3000000 		.4byte	0xe3
 9940 011a 25010000 		.4byte	0x125
 9941 011e 08       		.uleb128 0x8
 9942 011f 0E010000 		.4byte	0x10e
 9943 0123 07       		.byte	0x7
 9944 0124 00       		.byte	0
 9945 0125 09       		.uleb128 0x9
 9946 0126 23110000 		.4byte	.LASF33
 9947 012a 01       		.byte	0x1
 9948 012b 2C000000 		.4byte	0x2c
 9949 012f 05       		.byte	0x5
 9950 0130 8E       		.byte	0x8e
 9951 0131 66010000 		.4byte	0x166
 9952 0135 0A       		.uleb128 0xa
 9953 0136 B4060000 		.4byte	.LASF25
 9954 013a 00       		.byte	0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 227


 9955 013b 0A       		.uleb128 0xa
 9956 013c 6C0A0000 		.4byte	.LASF26
 9957 0140 01       		.byte	0x1
 9958 0141 0A       		.uleb128 0xa
 9959 0142 03020000 		.4byte	.LASF27
 9960 0146 02       		.byte	0x2
 9961 0147 0A       		.uleb128 0xa
 9962 0148 46010000 		.4byte	.LASF28
 9963 014c 03       		.byte	0x3
 9964 014d 0A       		.uleb128 0xa
 9965 014e 00010000 		.4byte	.LASF29
 9966 0152 04       		.byte	0x4
 9967 0153 0A       		.uleb128 0xa
 9968 0154 36000000 		.4byte	.LASF30
 9969 0158 05       		.byte	0x5
 9970 0159 0A       		.uleb128 0xa
 9971 015a 91070000 		.4byte	.LASF31
 9972 015e 06       		.byte	0x6
 9973 015f 0A       		.uleb128 0xa
 9974 0160 C20D0000 		.4byte	.LASF32
 9975 0164 07       		.byte	0x7
 9976 0165 00       		.byte	0
 9977 0166 09       		.uleb128 0x9
 9978 0167 22090000 		.4byte	.LASF34
 9979 016b 01       		.byte	0x1
 9980 016c 2C000000 		.4byte	0x2c
 9981 0170 05       		.byte	0x5
 9982 0171 A2       		.byte	0xa2
 9983 0172 8F010000 		.4byte	0x18f
 9984 0176 0A       		.uleb128 0xa
 9985 0177 DB100000 		.4byte	.LASF35
 9986 017b 00       		.byte	0
 9987 017c 0A       		.uleb128 0xa
 9988 017d 2C080000 		.4byte	.LASF36
 9989 0181 01       		.byte	0x1
 9990 0182 0A       		.uleb128 0xa
 9991 0183 F20A0000 		.4byte	.LASF37
 9992 0187 02       		.byte	0x2
 9993 0188 0A       		.uleb128 0xa
 9994 0189 24070000 		.4byte	.LASF38
 9995 018d 03       		.byte	0x3
 9996 018e 00       		.byte	0
 9997 018f 03       		.uleb128 0x3
 9998 0190 A6100000 		.4byte	.LASF39
 9999 0194 06       		.byte	0x6
 10000 0195 7E       		.byte	0x7e
 10001 0196 9A010000 		.4byte	0x19a
 10002 019a 0B       		.uleb128 0xb
 10003 019b A6100000 		.4byte	.LASF39
 10004 019f 0C       		.uleb128 0xc
 10005 01a0 04       		.byte	0x4
 10006 01a1 8F010000 		.4byte	0x18f
 10007 01a5 0D       		.uleb128 0xd
 10008 01a6 DC080000 		.4byte	.LASF42
 10009 01aa 10       		.byte	0x10
 10010 01ab 07       		.byte	0x7
 10011 01ac E2       		.byte	0xe2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 228


 10012 01ad E2010000 		.4byte	0x1e2
 10013 01b1 0E       		.uleb128 0xe
 10014 01b2 706F7300 		.ascii	"pos\000"
 10015 01b6 07       		.byte	0x7
 10016 01b7 E3       		.byte	0xe3
 10017 01b8 BD000000 		.4byte	0xbd
 10018 01bc 00       		.byte	0
 10019 01bd 0F       		.uleb128 0xf
 10020 01be 11080000 		.4byte	.LASF40
 10021 01c2 07       		.byte	0x7
 10022 01c3 E4       		.byte	0xe4
 10023 01c4 BD000000 		.4byte	0xbd
 10024 01c8 04       		.byte	0x4
 10025 01c9 0E       		.uleb128 0xe
 10026 01ca 70776D00 		.ascii	"pwm\000"
 10027 01ce 07       		.byte	0x7
 10028 01cf E5       		.byte	0xe5
 10029 01d0 BD000000 		.4byte	0xbd
 10030 01d4 08       		.byte	0x8
 10031 01d5 0F       		.uleb128 0xf
 10032 01d6 350C0000 		.4byte	.LASF41
 10033 01da 07       		.byte	0x7
 10034 01db E6       		.byte	0xe6
 10035 01dc 81000000 		.4byte	0x81
 10036 01e0 0C       		.byte	0xc
 10037 01e1 00       		.byte	0
 10038 01e2 0D       		.uleb128 0xd
 10039 01e3 890D0000 		.4byte	.LASF43
 10040 01e7 34       		.byte	0x34
 10041 01e8 07       		.byte	0x7
 10042 01e9 ED       		.byte	0xed
 10043 01ea 43020000 		.4byte	0x243
 10044 01ee 0E       		.uleb128 0xe
 10045 01ef 706F7300 		.ascii	"pos\000"
 10046 01f3 07       		.byte	0x7
 10047 01f4 EE       		.byte	0xee
 10048 01f5 43020000 		.4byte	0x243
 10049 01f9 00       		.byte	0
 10050 01fa 0F       		.uleb128 0xf
 10051 01fb 11080000 		.4byte	.LASF40
 10052 01ff 07       		.byte	0x7
 10053 0200 EF       		.byte	0xef
 10054 0201 BD000000 		.4byte	0xbd
 10055 0205 0C       		.byte	0xc
 10056 0206 0F       		.uleb128 0xf
 10057 0207 260F0000 		.4byte	.LASF44
 10058 020b 07       		.byte	0x7
 10059 020c F0       		.byte	0xf0
 10060 020d BD000000 		.4byte	0xbd
 10061 0211 10       		.byte	0x10
 10062 0212 0F       		.uleb128 0xf
 10063 0213 87070000 		.4byte	.LASF45
 10064 0217 07       		.byte	0x7
 10065 0218 F1       		.byte	0xf1
 10066 0219 BD000000 		.4byte	0xbd
 10067 021d 14       		.byte	0x14
 10068 021e 0E       		.uleb128 0xe
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 229


 10069 021f 726F7400 		.ascii	"rot\000"
 10070 0223 07       		.byte	0x7
 10071 0224 F2       		.byte	0xf2
 10072 0225 53020000 		.4byte	0x253
 10073 0229 18       		.byte	0x18
 10074 022a 0E       		.uleb128 0xe
 10075 022b 76656C00 		.ascii	"vel\000"
 10076 022f 07       		.byte	0x7
 10077 0230 F3       		.byte	0xf3
 10078 0231 43020000 		.4byte	0x243
 10079 0235 1C       		.byte	0x1c
 10080 0236 0E       		.uleb128 0xe
 10081 0237 61636300 		.ascii	"acc\000"
 10082 023b 07       		.byte	0x7
 10083 023c F4       		.byte	0xf4
 10084 023d 43020000 		.4byte	0x243
 10085 0241 28       		.byte	0x28
 10086 0242 00       		.byte	0
 10087 0243 07       		.uleb128 0x7
 10088 0244 BD000000 		.4byte	0xbd
 10089 0248 53020000 		.4byte	0x253
 10090 024c 08       		.uleb128 0x8
 10091 024d 0E010000 		.4byte	0x10e
 10092 0251 02       		.byte	0x2
 10093 0252 00       		.byte	0
 10094 0253 07       		.uleb128 0x7
 10095 0254 A5000000 		.4byte	0xa5
 10096 0258 63020000 		.4byte	0x263
 10097 025c 08       		.uleb128 0x8
 10098 025d 0E010000 		.4byte	0x10e
 10099 0261 02       		.byte	0x2
 10100 0262 00       		.byte	0
 10101 0263 0D       		.uleb128 0xd
 10102 0264 110A0000 		.4byte	.LASF46
 10103 0268 28       		.byte	0x28
 10104 0269 07       		.byte	0x7
 10105 026a F7       		.byte	0xf7
 10106 026b 94020000 		.4byte	0x294
 10107 026f 0E       		.uleb128 0xe
 10108 0270 656D6700 		.ascii	"emg\000"
 10109 0274 07       		.byte	0x7
 10110 0275 F8       		.byte	0xf8
 10111 0276 94020000 		.4byte	0x294
 10112 027a 00       		.byte	0
 10113 027b 0F       		.uleb128 0xf
 10114 027c B60A0000 		.4byte	.LASF47
 10115 0280 07       		.byte	0x7
 10116 0281 F9       		.byte	0xf9
 10117 0282 A4020000 		.4byte	0x2a4
 10118 0286 08       		.byte	0x8
 10119 0287 0F       		.uleb128 0xf
 10120 0288 670E0000 		.4byte	.LASF48
 10121 028c 07       		.byte	0x7
 10122 028d FA       		.byte	0xfa
 10123 028e 94020000 		.4byte	0x294
 10124 0292 20       		.byte	0x20
 10125 0293 00       		.byte	0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 230


 10126 0294 07       		.uleb128 0x7
 10127 0295 BD000000 		.4byte	0xbd
 10128 0299 A4020000 		.4byte	0x2a4
 10129 029d 08       		.uleb128 0x8
 10130 029e 0E010000 		.4byte	0x10e
 10131 02a2 01       		.byte	0x1
 10132 02a3 00       		.byte	0
 10133 02a4 07       		.uleb128 0x7
 10134 02a5 BD000000 		.4byte	0xbd
 10135 02a9 B4020000 		.4byte	0x2b4
 10136 02ad 08       		.uleb128 0x8
 10137 02ae 0E010000 		.4byte	0x10e
 10138 02b2 05       		.byte	0x5
 10139 02b3 00       		.byte	0
 10140 02b4 10       		.uleb128 0x10
 10141 02b5 8C000000 		.4byte	.LASF49
 10142 02b9 86       		.byte	0x86
 10143 02ba 07       		.byte	0x7
 10144 02bb 0501     		.2byte	0x105
 10145 02bd F6020000 		.4byte	0x2f6
 10146 02c1 11       		.uleb128 0x11
 10147 02c2 CC050000 		.4byte	.LASF50
 10148 02c6 07       		.byte	0x7
 10149 02c7 0601     		.2byte	0x106
 10150 02c9 F6020000 		.4byte	0x2f6
 10151 02cd 00       		.byte	0
 10152 02ce 11       		.uleb128 0x11
 10153 02cf 180C0000 		.4byte	.LASF51
 10154 02d3 07       		.byte	0x7
 10155 02d4 0701     		.2byte	0x107
 10156 02d6 B1000000 		.4byte	0xb1
 10157 02da 80       		.byte	0x80
 10158 02db 12       		.uleb128 0x12
 10159 02dc 696E6400 		.ascii	"ind\000"
 10160 02e0 07       		.byte	0x7
 10161 02e1 0801     		.2byte	0x108
 10162 02e3 B1000000 		.4byte	0xb1
 10163 02e7 82       		.byte	0x82
 10164 02e8 11       		.uleb128 0x11
 10165 02e9 D6010000 		.4byte	.LASF52
 10166 02ed 07       		.byte	0x7
 10167 02ee 0901     		.2byte	0x109
 10168 02f0 81000000 		.4byte	0x81
 10169 02f4 84       		.byte	0x84
 10170 02f5 00       		.byte	0
 10171 02f6 07       		.uleb128 0x7
 10172 02f7 81000000 		.4byte	0x81
 10173 02fb 06030000 		.4byte	0x306
 10174 02ff 08       		.uleb128 0x8
 10175 0300 0E010000 		.4byte	0x10e
 10176 0304 7F       		.byte	0x7f
 10177 0305 00       		.byte	0
 10178 0306 10       		.uleb128 0x10
 10179 0307 3A030000 		.4byte	.LASF53
 10180 030b 50       		.byte	0x50
 10181 030c 07       		.byte	0x7
 10182 030d 1201     		.2byte	0x112
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 231


 10183 030f 6F030000 		.4byte	0x36f
 10184 0313 11       		.uleb128 0x11
 10185 0314 6F030000 		.4byte	.LASF54
 10186 0318 07       		.byte	0x7
 10187 0319 1301     		.2byte	0x113
 10188 031b 6F030000 		.4byte	0x36f
 10189 031f 00       		.byte	0
 10190 0320 11       		.uleb128 0x11
 10191 0321 93010000 		.4byte	.LASF55
 10192 0325 07       		.byte	0x7
 10193 0326 1401     		.2byte	0x114
 10194 0328 7F030000 		.4byte	0x37f
 10195 032c 08       		.byte	0x8
 10196 032d 11       		.uleb128 0x11
 10197 032e E50A0000 		.4byte	.LASF56
 10198 0332 07       		.byte	0x7
 10199 0333 1501     		.2byte	0x115
 10200 0335 8F030000 		.4byte	0x38f
 10201 0339 30       		.byte	0x30
 10202 033a 11       		.uleb128 0x11
 10203 033b 2A010000 		.4byte	.LASF57
 10204 033f 07       		.byte	0x7
 10205 0340 1601     		.2byte	0x116
 10206 0342 99000000 		.4byte	0x99
 10207 0346 40       		.byte	0x40
 10208 0347 11       		.uleb128 0x11
 10209 0348 F3100000 		.4byte	.LASF58
 10210 034c 07       		.byte	0x7
 10211 034d 1701     		.2byte	0x117
 10212 034f 99000000 		.4byte	0x99
 10213 0353 44       		.byte	0x44
 10214 0354 11       		.uleb128 0x11
 10215 0355 5D070000 		.4byte	.LASF59
 10216 0359 07       		.byte	0x7
 10217 035a 1801     		.2byte	0x118
 10218 035c 99000000 		.4byte	0x99
 10219 0360 48       		.byte	0x48
 10220 0361 11       		.uleb128 0x11
 10221 0362 A5070000 		.4byte	.LASF60
 10222 0366 07       		.byte	0x7
 10223 0367 1901     		.2byte	0x119
 10224 0369 99000000 		.4byte	0x99
 10225 036d 4C       		.byte	0x4c
 10226 036e 00       		.byte	0
 10227 036f 07       		.uleb128 0x7
 10228 0370 99000000 		.4byte	0x99
 10229 0374 7F030000 		.4byte	0x37f
 10230 0378 08       		.uleb128 0x8
 10231 0379 0E010000 		.4byte	0x10e
 10232 037d 01       		.byte	0x1
 10233 037e 00       		.byte	0
 10234 037f 07       		.uleb128 0x7
 10235 0380 99000000 		.4byte	0x99
 10236 0384 8F030000 		.4byte	0x38f
 10237 0388 08       		.uleb128 0x8
 10238 0389 0E010000 		.4byte	0x10e
 10239 038d 09       		.byte	0x9
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 232


 10240 038e 00       		.byte	0
 10241 038f 07       		.uleb128 0x7
 10242 0390 99000000 		.4byte	0x99
 10243 0394 9F030000 		.4byte	0x39f
 10244 0398 08       		.uleb128 0x8
 10245 0399 0E010000 		.4byte	0x10e
 10246 039d 03       		.byte	0x3
 10247 039e 00       		.byte	0
 10248 039f 10       		.uleb128 0x10
 10249 03a0 F9010000 		.4byte	.LASF61
 10250 03a4 10       		.byte	0x10
 10251 03a5 07       		.byte	0x7
 10252 03a6 2001     		.2byte	0x120
 10253 03a8 2E040000 		.4byte	0x42e
 10254 03ac 12       		.uleb128 0x12
 10255 03ad 696400   		.ascii	"id\000"
 10256 03b0 07       		.byte	0x7
 10257 03b1 2101     		.2byte	0x121
 10258 03b3 81000000 		.4byte	0x81
 10259 03b7 00       		.byte	0
 10260 03b8 11       		.uleb128 0x11
 10261 03b9 820E0000 		.4byte	.LASF62
 10262 03bd 07       		.byte	0x7
 10263 03be 2201     		.2byte	0x122
 10264 03c0 2E040000 		.4byte	0x42e
 10265 03c4 01       		.byte	0x1
 10266 03c5 11       		.uleb128 0x11
 10267 03c6 BE0E0000 		.4byte	.LASF63
 10268 03ca 07       		.byte	0x7
 10269 03cb 2301     		.2byte	0x123
 10270 03cd 2E040000 		.4byte	0x42e
 10271 03d1 04       		.byte	0x4
 10272 03d2 11       		.uleb128 0x11
 10273 03d3 88040000 		.4byte	.LASF64
 10274 03d7 07       		.byte	0x7
 10275 03d8 2401     		.2byte	0x124
 10276 03da 81000000 		.4byte	0x81
 10277 03de 07       		.byte	0x7
 10278 03df 11       		.uleb128 0x11
 10279 03e0 C3020000 		.4byte	.LASF65
 10280 03e4 07       		.byte	0x7
 10281 03e5 2501     		.2byte	0x125
 10282 03e7 81000000 		.4byte	0x81
 10283 03eb 08       		.byte	0x8
 10284 03ec 11       		.uleb128 0x11
 10285 03ed 1F020000 		.4byte	.LASF66
 10286 03f1 07       		.byte	0x7
 10287 03f2 2601     		.2byte	0x126
 10288 03f4 81000000 		.4byte	0x81
 10289 03f8 09       		.byte	0x9
 10290 03f9 11       		.uleb128 0x11
 10291 03fa CB0F0000 		.4byte	.LASF67
 10292 03fe 07       		.byte	0x7
 10293 03ff 2701     		.2byte	0x127
 10294 0401 81000000 		.4byte	0x81
 10295 0405 0A       		.byte	0xa
 10296 0406 11       		.uleb128 0x11
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 233


 10297 0407 5F0F0000 		.4byte	.LASF68
 10298 040b 07       		.byte	0x7
 10299 040c 2801     		.2byte	0x128
 10300 040e 81000000 		.4byte	0x81
 10301 0412 0B       		.byte	0xb
 10302 0413 11       		.uleb128 0x11
 10303 0414 380D0000 		.4byte	.LASF69
 10304 0418 07       		.byte	0x7
 10305 0419 2901     		.2byte	0x129
 10306 041b 81000000 		.4byte	0x81
 10307 041f 0C       		.byte	0xc
 10308 0420 11       		.uleb128 0x11
 10309 0421 07030000 		.4byte	.LASF70
 10310 0425 07       		.byte	0x7
 10311 0426 2A01     		.2byte	0x12a
 10312 0428 2E040000 		.4byte	0x42e
 10313 042c 0D       		.byte	0xd
 10314 042d 00       		.byte	0
 10315 042e 07       		.uleb128 0x7
 10316 042f 81000000 		.4byte	0x81
 10317 0433 3E040000 		.4byte	0x43e
 10318 0437 08       		.uleb128 0x8
 10319 0438 0E010000 		.4byte	0x10e
 10320 043c 02       		.byte	0x2
 10321 043d 00       		.byte	0
 10322 043e 10       		.uleb128 0x10
 10323 043f 91100000 		.4byte	.LASF71
 10324 0443 70       		.byte	0x70
 10325 0444 07       		.byte	0x7
 10326 0445 3101     		.2byte	0x131
 10327 0447 B8050000 		.4byte	0x5b8
 10328 044b 12       		.uleb128 0x12
 10329 044c 6B5F7000 		.ascii	"k_p\000"
 10330 0450 07       		.byte	0x7
 10331 0451 3201     		.2byte	0x132
 10332 0453 BD000000 		.4byte	0xbd
 10333 0457 00       		.byte	0
 10334 0458 12       		.uleb128 0x12
 10335 0459 6B5F6900 		.ascii	"k_i\000"
 10336 045d 07       		.byte	0x7
 10337 045e 3301     		.2byte	0x133
 10338 0460 BD000000 		.4byte	0xbd
 10339 0464 04       		.byte	0x4
 10340 0465 12       		.uleb128 0x12
 10341 0466 6B5F6400 		.ascii	"k_d\000"
 10342 046a 07       		.byte	0x7
 10343 046b 3401     		.2byte	0x134
 10344 046d BD000000 		.4byte	0xbd
 10345 0471 08       		.byte	0x8
 10346 0472 11       		.uleb128 0x11
 10347 0473 710C0000 		.4byte	.LASF72
 10348 0477 07       		.byte	0x7
 10349 0478 3501     		.2byte	0x135
 10350 047a BD000000 		.4byte	0xbd
 10351 047e 0C       		.byte	0xc
 10352 047f 11       		.uleb128 0x11
 10353 0480 29050000 		.4byte	.LASF73
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 234


 10354 0484 07       		.byte	0x7
 10355 0485 3601     		.2byte	0x136
 10356 0487 BD000000 		.4byte	0xbd
 10357 048b 10       		.byte	0x10
 10358 048c 11       		.uleb128 0x11
 10359 048d 11050000 		.4byte	.LASF74
 10360 0491 07       		.byte	0x7
 10361 0492 3701     		.2byte	0x137
 10362 0494 BD000000 		.4byte	0xbd
 10363 0498 14       		.byte	0x14
 10364 0499 11       		.uleb128 0x11
 10365 049a 1F0F0000 		.4byte	.LASF75
 10366 049e 07       		.byte	0x7
 10367 049f 3801     		.2byte	0x138
 10368 04a1 BD000000 		.4byte	0xbd
 10369 04a5 18       		.byte	0x18
 10370 04a6 11       		.uleb128 0x11
 10371 04a7 C5050000 		.4byte	.LASF76
 10372 04ab 07       		.byte	0x7
 10373 04ac 3901     		.2byte	0x139
 10374 04ae BD000000 		.4byte	0xbd
 10375 04b2 1C       		.byte	0x1c
 10376 04b3 11       		.uleb128 0x11
 10377 04b4 520E0000 		.4byte	.LASF77
 10378 04b8 07       		.byte	0x7
 10379 04b9 3A01     		.2byte	0x13a
 10380 04bb BD000000 		.4byte	0xbd
 10381 04bf 20       		.byte	0x20
 10382 04c0 11       		.uleb128 0x11
 10383 04c1 D3050000 		.4byte	.LASF78
 10384 04c5 07       		.byte	0x7
 10385 04c6 3B01     		.2byte	0x13b
 10386 04c8 BD000000 		.4byte	0xbd
 10387 04cc 24       		.byte	0x24
 10388 04cd 11       		.uleb128 0x11
 10389 04ce 0D070000 		.4byte	.LASF79
 10390 04d2 07       		.byte	0x7
 10391 04d3 3C01     		.2byte	0x13c
 10392 04d5 BD000000 		.4byte	0xbd
 10393 04d9 28       		.byte	0x28
 10394 04da 11       		.uleb128 0x11
 10395 04db C3110000 		.4byte	.LASF80
 10396 04df 07       		.byte	0x7
 10397 04e0 3D01     		.2byte	0x13d
 10398 04e2 BD000000 		.4byte	0xbd
 10399 04e6 2C       		.byte	0x2c
 10400 04e7 11       		.uleb128 0x11
 10401 04e8 B5070000 		.4byte	.LASF81
 10402 04ec 07       		.byte	0x7
 10403 04ed 3E01     		.2byte	0x13e
 10404 04ef 81000000 		.4byte	0x81
 10405 04f3 30       		.byte	0x30
 10406 04f4 11       		.uleb128 0x11
 10407 04f5 080F0000 		.4byte	.LASF82
 10408 04f9 07       		.byte	0x7
 10409 04fa 3F01     		.2byte	0x13f
 10410 04fc 81000000 		.4byte	0x81
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 235


 10411 0500 31       		.byte	0x31
 10412 0501 11       		.uleb128 0x11
 10413 0502 830C0000 		.4byte	.LASF83
 10414 0506 07       		.byte	0x7
 10415 0507 4001     		.2byte	0x140
 10416 0509 81000000 		.4byte	0x81
 10417 050d 32       		.byte	0x32
 10418 050e 11       		.uleb128 0x11
 10419 050f AE100000 		.4byte	.LASF84
 10420 0513 07       		.byte	0x7
 10421 0514 4101     		.2byte	0x141
 10422 0516 81000000 		.4byte	0x81
 10423 051a 33       		.byte	0x33
 10424 051b 11       		.uleb128 0x11
 10425 051c AB000000 		.4byte	.LASF85
 10426 0520 07       		.byte	0x7
 10427 0521 4201     		.2byte	0x142
 10428 0523 BD000000 		.4byte	0xbd
 10429 0527 34       		.byte	0x34
 10430 0528 11       		.uleb128 0x11
 10431 0529 59050000 		.4byte	.LASF86
 10432 052d 07       		.byte	0x7
 10433 052e 4301     		.2byte	0x143
 10434 0530 BD000000 		.4byte	0xbd
 10435 0534 38       		.byte	0x38
 10436 0535 11       		.uleb128 0x11
 10437 0536 CD090000 		.4byte	.LASF87
 10438 053a 07       		.byte	0x7
 10439 053b 4401     		.2byte	0x144
 10440 053d BD000000 		.4byte	0xbd
 10441 0541 3C       		.byte	0x3c
 10442 0542 11       		.uleb128 0x11
 10443 0543 C5040000 		.4byte	.LASF88
 10444 0547 07       		.byte	0x7
 10445 0548 4501     		.2byte	0x145
 10446 054a BD000000 		.4byte	0xbd
 10447 054e 40       		.byte	0x40
 10448 054f 11       		.uleb128 0x11
 10449 0550 14010000 		.4byte	.LASF89
 10450 0554 07       		.byte	0x7
 10451 0555 4601     		.2byte	0x146
 10452 0557 B8050000 		.4byte	0x5b8
 10453 055b 44       		.byte	0x44
 10454 055c 11       		.uleb128 0x11
 10455 055d 15110000 		.4byte	.LASF90
 10456 0561 07       		.byte	0x7
 10457 0562 4701     		.2byte	0x147
 10458 0564 B1000000 		.4byte	0xb1
 10459 0568 5C       		.byte	0x5c
 10460 0569 11       		.uleb128 0x11
 10461 056a 21080000 		.4byte	.LASF91
 10462 056e 07       		.byte	0x7
 10463 056f 4801     		.2byte	0x148
 10464 0571 81000000 		.4byte	0x81
 10465 0575 5E       		.byte	0x5e
 10466 0576 11       		.uleb128 0x11
 10467 0577 560A0000 		.4byte	.LASF92
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 236


 10468 057b 07       		.byte	0x7
 10469 057c 4901     		.2byte	0x149
 10470 057e 81000000 		.4byte	0x81
 10471 0582 5F       		.byte	0x5f
 10472 0583 11       		.uleb128 0x11
 10473 0584 93040000 		.4byte	.LASF93
 10474 0588 07       		.byte	0x7
 10475 0589 4A01     		.2byte	0x14a
 10476 058b 81000000 		.4byte	0x81
 10477 058f 60       		.byte	0x60
 10478 0590 11       		.uleb128 0x11
 10479 0591 00050000 		.4byte	.LASF94
 10480 0595 07       		.byte	0x7
 10481 0596 4B01     		.2byte	0x14b
 10482 0598 81000000 		.4byte	0x81
 10483 059c 61       		.byte	0x61
 10484 059d 11       		.uleb128 0x11
 10485 059e 3C040000 		.4byte	.LASF95
 10486 05a2 07       		.byte	0x7
 10487 05a3 4C01     		.2byte	0x14c
 10488 05a5 81000000 		.4byte	0x81
 10489 05a9 62       		.byte	0x62
 10490 05aa 11       		.uleb128 0x11
 10491 05ab 07030000 		.4byte	.LASF70
 10492 05af 07       		.byte	0x7
 10493 05b0 4D01     		.2byte	0x14d
 10494 05b2 C8050000 		.4byte	0x5c8
 10495 05b6 63       		.byte	0x63
 10496 05b7 00       		.byte	0
 10497 05b8 07       		.uleb128 0x7
 10498 05b9 D5000000 		.4byte	0xd5
 10499 05bd C8050000 		.4byte	0x5c8
 10500 05c1 08       		.uleb128 0x8
 10501 05c2 0E010000 		.4byte	0x10e
 10502 05c6 05       		.byte	0x5
 10503 05c7 00       		.byte	0
 10504 05c8 07       		.uleb128 0x7
 10505 05c9 81000000 		.4byte	0x81
 10506 05cd D8050000 		.4byte	0x5d8
 10507 05d1 08       		.uleb128 0x8
 10508 05d2 0E010000 		.4byte	0x10e
 10509 05d6 0C       		.byte	0xc
 10510 05d7 00       		.byte	0
 10511 05d8 10       		.uleb128 0x10
 10512 05d9 0A100000 		.4byte	.LASF96
 10513 05dd 30       		.byte	0x30
 10514 05de 07       		.byte	0x7
 10515 05df 5401     		.2byte	0x154
 10516 05e1 5B060000 		.4byte	0x65b
 10517 05e5 11       		.uleb128 0x11
 10518 05e6 87090000 		.4byte	.LASF97
 10519 05ea 07       		.byte	0x7
 10520 05eb 5501     		.2byte	0x155
 10521 05ed 5B060000 		.4byte	0x65b
 10522 05f1 00       		.byte	0
 10523 05f2 12       		.uleb128 0x12
 10524 05f3 72657300 		.ascii	"res\000"
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 237


 10525 05f7 07       		.byte	0x7
 10526 05f8 5601     		.2byte	0x156
 10527 05fa 2E040000 		.4byte	0x42e
 10528 05fe 05       		.byte	0x5
 10529 05ff 11       		.uleb128 0x11
 10530 0600 E1070000 		.4byte	.LASF98
 10531 0604 07       		.byte	0x7
 10532 0605 5701     		.2byte	0x157
 10533 0607 43020000 		.4byte	0x243
 10534 060b 08       		.byte	0x8
 10535 060c 11       		.uleb128 0x11
 10536 060d 22050000 		.4byte	.LASF99
 10537 0611 07       		.byte	0x7
 10538 0612 5801     		.2byte	0x158
 10539 0614 6B060000 		.4byte	0x66b
 10540 0618 14       		.byte	0x14
 10541 0619 11       		.uleb128 0x11
 10542 061a 8A0B0000 		.4byte	.LASF100
 10543 061e 07       		.byte	0x7
 10544 061f 5901     		.2byte	0x159
 10545 0621 81000000 		.4byte	0x81
 10546 0625 20       		.byte	0x20
 10547 0626 11       		.uleb128 0x11
 10548 0627 DC010000 		.4byte	.LASF101
 10549 062b 07       		.byte	0x7
 10550 062c 5A01     		.2byte	0x15a
 10551 062e 2E040000 		.4byte	0x42e
 10552 0632 21       		.byte	0x21
 10553 0633 11       		.uleb128 0x11
 10554 0634 3B0B0000 		.4byte	.LASF102
 10555 0638 07       		.byte	0x7
 10556 0639 5B01     		.2byte	0x15b
 10557 063b A5000000 		.4byte	0xa5
 10558 063f 24       		.byte	0x24
 10559 0640 11       		.uleb128 0x11
 10560 0641 5A0D0000 		.4byte	.LASF103
 10561 0645 07       		.byte	0x7
 10562 0646 5C01     		.2byte	0x15c
 10563 0648 53020000 		.4byte	0x253
 10564 064c 25       		.byte	0x25
 10565 064d 11       		.uleb128 0x11
 10566 064e 07030000 		.4byte	.LASF70
 10567 0652 07       		.byte	0x7
 10568 0653 5D01     		.2byte	0x15d
 10569 0655 7B060000 		.4byte	0x67b
 10570 0659 28       		.byte	0x28
 10571 065a 00       		.byte	0
 10572 065b 07       		.uleb128 0x7
 10573 065c 81000000 		.4byte	0x81
 10574 0660 6B060000 		.4byte	0x66b
 10575 0664 08       		.uleb128 0x8
 10576 0665 0E010000 		.4byte	0x10e
 10577 0669 04       		.byte	0x4
 10578 066a 00       		.byte	0
 10579 066b 07       		.uleb128 0x7
 10580 066c C9000000 		.4byte	0xc9
 10581 0670 7B060000 		.4byte	0x67b
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 238


 10582 0674 08       		.uleb128 0x8
 10583 0675 0E010000 		.4byte	0x10e
 10584 0679 02       		.byte	0x2
 10585 067a 00       		.byte	0
 10586 067b 07       		.uleb128 0x7
 10587 067c 81000000 		.4byte	0x81
 10588 0680 8B060000 		.4byte	0x68b
 10589 0684 08       		.uleb128 0x8
 10590 0685 0E010000 		.4byte	0x10e
 10591 0689 07       		.byte	0x7
 10592 068a 00       		.byte	0
 10593 068b 10       		.uleb128 0x10
 10594 068c 8C010000 		.4byte	.LASF104
 10595 0690 10       		.byte	0x10
 10596 0691 07       		.byte	0x7
 10597 0692 6401     		.2byte	0x164
 10598 0694 DA060000 		.4byte	0x6da
 10599 0698 11       		.uleb128 0x11
 10600 0699 C40A0000 		.4byte	.LASF105
 10601 069d 07       		.byte	0x7
 10602 069e 6501     		.2byte	0x165
 10603 06a0 DA060000 		.4byte	0x6da
 10604 06a4 00       		.byte	0
 10605 06a5 11       		.uleb128 0x11
 10606 06a6 07110000 		.4byte	.LASF106
 10607 06aa 07       		.byte	0x7
 10608 06ab 6601     		.2byte	0x166
 10609 06ad 6F030000 		.4byte	0x36f
 10610 06b1 04       		.byte	0x4
 10611 06b2 11       		.uleb128 0x11
 10612 06b3 6F050000 		.4byte	.LASF107
 10613 06b7 07       		.byte	0x7
 10614 06b8 6701     		.2byte	0x167
 10615 06ba EA060000 		.4byte	0x6ea
 10616 06be 0C       		.byte	0xc
 10617 06bf 11       		.uleb128 0x11
 10618 06c0 740D0000 		.4byte	.LASF108
 10619 06c4 07       		.byte	0x7
 10620 06c5 6801     		.2byte	0x168
 10621 06c7 81000000 		.4byte	0x81
 10622 06cb 0E       		.byte	0xe
 10623 06cc 11       		.uleb128 0x11
 10624 06cd EB030000 		.4byte	.LASF109
 10625 06d1 07       		.byte	0x7
 10626 06d2 6901     		.2byte	0x169
 10627 06d4 81000000 		.4byte	0x81
 10628 06d8 0F       		.byte	0xf
 10629 06d9 00       		.byte	0
 10630 06da 07       		.uleb128 0x7
 10631 06db 8D000000 		.4byte	0x8d
 10632 06df EA060000 		.4byte	0x6ea
 10633 06e3 08       		.uleb128 0x8
 10634 06e4 0E010000 		.4byte	0x10e
 10635 06e8 01       		.byte	0x1
 10636 06e9 00       		.byte	0
 10637 06ea 07       		.uleb128 0x7
 10638 06eb 81000000 		.4byte	0x81
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 239


 10639 06ef FA060000 		.4byte	0x6fa
 10640 06f3 08       		.uleb128 0x8
 10641 06f4 0E010000 		.4byte	0x10e
 10642 06f8 01       		.byte	0x1
 10643 06f9 00       		.byte	0
 10644 06fa 10       		.uleb128 0x10
 10645 06fb 800A0000 		.4byte	.LASF110
 10646 06ff 20       		.byte	0x20
 10647 0700 07       		.byte	0x7
 10648 0701 7001     		.2byte	0x170
 10649 0703 3C070000 		.4byte	0x73c
 10650 0707 11       		.uleb128 0x11
 10651 0708 4A020000 		.4byte	.LASF111
 10652 070c 07       		.byte	0x7
 10653 070d 7101     		.2byte	0x171
 10654 070f 81000000 		.4byte	0x81
 10655 0713 00       		.byte	0
 10656 0714 11       		.uleb128 0x11
 10657 0715 E80F0000 		.4byte	.LASF112
 10658 0719 07       		.byte	0x7
 10659 071a 7201     		.2byte	0x172
 10660 071c 81000000 		.4byte	0x81
 10661 0720 01       		.byte	0x1
 10662 0721 11       		.uleb128 0x11
 10663 0722 020A0000 		.4byte	.LASF113
 10664 0726 07       		.byte	0x7
 10665 0727 7301     		.2byte	0x173
 10666 0729 3C070000 		.4byte	0x73c
 10667 072d 02       		.byte	0x2
 10668 072e 11       		.uleb128 0x11
 10669 072f 07030000 		.4byte	.LASF70
 10670 0733 07       		.byte	0x7
 10671 0734 7401     		.2byte	0x174
 10672 0736 5B060000 		.4byte	0x65b
 10673 073a 1B       		.byte	0x1b
 10674 073b 00       		.byte	0
 10675 073c 07       		.uleb128 0x7
 10676 073d 81000000 		.4byte	0x81
 10677 0741 52070000 		.4byte	0x752
 10678 0745 08       		.uleb128 0x8
 10679 0746 0E010000 		.4byte	0x10e
 10680 074a 04       		.byte	0x4
 10681 074b 08       		.uleb128 0x8
 10682 074c 0E010000 		.4byte	0x10e
 10683 0750 04       		.byte	0x4
 10684 0751 00       		.byte	0
 10685 0752 10       		.uleb128 0x10
 10686 0753 670D0000 		.4byte	.LASF114
 10687 0757 20       		.byte	0x20
 10688 0758 07       		.byte	0x7
 10689 0759 7B01     		.2byte	0x17b
 10690 075b AE070000 		.4byte	0x7ae
 10691 075f 11       		.uleb128 0x11
 10692 0760 800B0000 		.4byte	.LASF115
 10693 0764 07       		.byte	0x7
 10694 0765 7C01     		.2byte	0x17c
 10695 0767 AE070000 		.4byte	0x7ae
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 240


 10696 076b 00       		.byte	0
 10697 076c 11       		.uleb128 0x11
 10698 076d F50E0000 		.4byte	.LASF116
 10699 0771 07       		.byte	0x7
 10700 0772 7D01     		.2byte	0x17d
 10701 0774 81000000 		.4byte	0x81
 10702 0778 06       		.byte	0x6
 10703 0779 11       		.uleb128 0x11
 10704 077a 4E000000 		.4byte	.LASF117
 10705 077e 07       		.byte	0x7
 10706 077f 7E01     		.2byte	0x17e
 10707 0781 81000000 		.4byte	0x81
 10708 0785 07       		.byte	0x7
 10709 0786 11       		.uleb128 0x11
 10710 0787 AE050000 		.4byte	.LASF118
 10711 078b 07       		.byte	0x7
 10712 078c 7F01     		.2byte	0x17f
 10713 078e BE070000 		.4byte	0x7be
 10714 0792 08       		.byte	0x8
 10715 0793 11       		.uleb128 0x11
 10716 0794 58020000 		.4byte	.LASF119
 10717 0798 07       		.byte	0x7
 10718 0799 8001     		.2byte	0x180
 10719 079b 81000000 		.4byte	0x81
 10720 079f 14       		.byte	0x14
 10721 07a0 11       		.uleb128 0x11
 10722 07a1 07030000 		.4byte	.LASF70
 10723 07a5 07       		.byte	0x7
 10724 07a6 8101     		.2byte	0x181
 10725 07a8 CE070000 		.4byte	0x7ce
 10726 07ac 15       		.byte	0x15
 10727 07ad 00       		.byte	0
 10728 07ae 07       		.uleb128 0x7
 10729 07af 81000000 		.4byte	0x81
 10730 07b3 BE070000 		.4byte	0x7be
 10731 07b7 08       		.uleb128 0x8
 10732 07b8 0E010000 		.4byte	0x10e
 10733 07bc 05       		.byte	0x5
 10734 07bd 00       		.byte	0
 10735 07be 07       		.uleb128 0x7
 10736 07bf 81000000 		.4byte	0x81
 10737 07c3 CE070000 		.4byte	0x7ce
 10738 07c7 08       		.uleb128 0x8
 10739 07c8 0E010000 		.4byte	0x10e
 10740 07cc 0B       		.byte	0xb
 10741 07cd 00       		.byte	0
 10742 07ce 07       		.uleb128 0x7
 10743 07cf 81000000 		.4byte	0x81
 10744 07d3 DE070000 		.4byte	0x7de
 10745 07d7 08       		.uleb128 0x8
 10746 07d8 0E010000 		.4byte	0x10e
 10747 07dc 0A       		.byte	0xa
 10748 07dd 00       		.byte	0
 10749 07de 10       		.uleb128 0x10
 10750 07df 520D0000 		.4byte	.LASF120
 10751 07e3 20       		.byte	0x20
 10752 07e4 07       		.byte	0x7
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 241


 10753 07e5 8801     		.2byte	0x188
 10754 07e7 13080000 		.4byte	0x813
 10755 07eb 11       		.uleb128 0x11
 10756 07ec BD030000 		.4byte	.LASF121
 10757 07f0 07       		.byte	0x7
 10758 07f1 8901     		.2byte	0x189
 10759 07f3 15010000 		.4byte	0x115
 10760 07f7 00       		.byte	0
 10761 07f8 11       		.uleb128 0x11
 10762 07f9 E0020000 		.4byte	.LASF122
 10763 07fd 07       		.byte	0x7
 10764 07fe 8A01     		.2byte	0x18a
 10765 0800 8B060000 		.4byte	0x68b
 10766 0804 08       		.byte	0x8
 10767 0805 11       		.uleb128 0x11
 10768 0806 07030000 		.4byte	.LASF70
 10769 080a 07       		.byte	0x7
 10770 080b 8B01     		.2byte	0x18b
 10771 080d 7B060000 		.4byte	0x67b
 10772 0811 18       		.byte	0x18
 10773 0812 00       		.byte	0
 10774 0813 10       		.uleb128 0x10
 10775 0814 F0080000 		.4byte	.LASF123
 10776 0818 10       		.byte	0x10
 10777 0819 07       		.byte	0x7
 10778 081a 9201     		.2byte	0x192
 10779 081c 62080000 		.4byte	0x862
 10780 0820 11       		.uleb128 0x11
 10781 0821 08080000 		.4byte	.LASF124
 10782 0825 07       		.byte	0x7
 10783 0826 9301     		.2byte	0x193
 10784 0828 BD000000 		.4byte	0xbd
 10785 082c 00       		.byte	0
 10786 082d 11       		.uleb128 0x11
 10787 082e A5110000 		.4byte	.LASF125
 10788 0832 07       		.byte	0x7
 10789 0833 9401     		.2byte	0x194
 10790 0835 BD000000 		.4byte	0xbd
 10791 0839 04       		.byte	0x4
 10792 083a 11       		.uleb128 0x11
 10793 083b 79050000 		.4byte	.LASF126
 10794 083f 07       		.byte	0x7
 10795 0840 9501     		.2byte	0x195
 10796 0842 BD000000 		.4byte	0xbd
 10797 0846 08       		.byte	0x8
 10798 0847 11       		.uleb128 0x11
 10799 0848 E3060000 		.4byte	.LASF127
 10800 084c 07       		.byte	0x7
 10801 084d 9601     		.2byte	0x196
 10802 084f 81000000 		.4byte	0x81
 10803 0853 0C       		.byte	0xc
 10804 0854 11       		.uleb128 0x11
 10805 0855 07030000 		.4byte	.LASF70
 10806 0859 07       		.byte	0x7
 10807 085a 9701     		.2byte	0x197
 10808 085c 2E040000 		.4byte	0x42e
 10809 0860 0D       		.byte	0xd
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 242


 10810 0861 00       		.byte	0
 10811 0862 10       		.uleb128 0x10
 10812 0863 280E0000 		.4byte	.LASF128
 10813 0867 10       		.byte	0x10
 10814 0868 07       		.byte	0x7
 10815 0869 9E01     		.2byte	0x19e
 10816 086b A4080000 		.4byte	0x8a4
 10817 086f 11       		.uleb128 0x11
 10818 0870 F6060000 		.4byte	.LASF129
 10819 0874 07       		.byte	0x7
 10820 0875 9F01     		.2byte	0x19f
 10821 0877 8D000000 		.4byte	0x8d
 10822 087b 00       		.byte	0
 10823 087c 11       		.uleb128 0x11
 10824 087d AF0D0000 		.4byte	.LASF130
 10825 0881 07       		.byte	0x7
 10826 0882 A001     		.2byte	0x1a0
 10827 0884 B1000000 		.4byte	0xb1
 10828 0888 02       		.byte	0x2
 10829 0889 11       		.uleb128 0x11
 10830 088a 78070000 		.4byte	.LASF131
 10831 088e 07       		.byte	0x7
 10832 088f A101     		.2byte	0x1a1
 10833 0891 DA060000 		.4byte	0x6da
 10834 0895 04       		.byte	0x4
 10835 0896 11       		.uleb128 0x11
 10836 0897 07030000 		.4byte	.LASF70
 10837 089b 07       		.byte	0x7
 10838 089c A201     		.2byte	0x1a2
 10839 089e 7B060000 		.4byte	0x67b
 10840 08a2 08       		.byte	0x8
 10841 08a3 00       		.byte	0
 10842 08a4 10       		.uleb128 0x10
 10843 08a5 37010000 		.4byte	.LASF132
 10844 08a9 10       		.byte	0x10
 10845 08aa 07       		.byte	0x7
 10846 08ab A901     		.2byte	0x1a9
 10847 08ad D9080000 		.4byte	0x8d9
 10848 08b1 11       		.uleb128 0x11
 10849 08b2 FD0C0000 		.4byte	.LASF133
 10850 08b6 07       		.byte	0x7
 10851 08b7 AA01     		.2byte	0x1aa
 10852 08b9 81000000 		.4byte	0x81
 10853 08bd 00       		.byte	0
 10854 08be 11       		.uleb128 0x11
 10855 08bf EE090000 		.4byte	.LASF134
 10856 08c3 07       		.byte	0x7
 10857 08c4 AB01     		.2byte	0x1ab
 10858 08c6 81000000 		.4byte	0x81
 10859 08ca 01       		.byte	0x1
 10860 08cb 11       		.uleb128 0x11
 10861 08cc 07030000 		.4byte	.LASF70
 10862 08d0 07       		.byte	0x7
 10863 08d1 AC01     		.2byte	0x1ac
 10864 08d3 D9080000 		.4byte	0x8d9
 10865 08d7 02       		.byte	0x2
 10866 08d8 00       		.byte	0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 243


 10867 08d9 07       		.uleb128 0x7
 10868 08da 81000000 		.4byte	0x81
 10869 08de E9080000 		.4byte	0x8e9
 10870 08e2 08       		.uleb128 0x8
 10871 08e3 0E010000 		.4byte	0x10e
 10872 08e7 0D       		.byte	0xd
 10873 08e8 00       		.byte	0
 10874 08e9 10       		.uleb128 0x10
 10875 08ea 09090000 		.4byte	.LASF135
 10876 08ee 10       		.byte	0x10
 10877 08ef 07       		.byte	0x7
 10878 08f0 B301     		.2byte	0x1b3
 10879 08f2 2B090000 		.4byte	0x92b
 10880 08f6 11       		.uleb128 0x11
 10881 08f7 20100000 		.4byte	.LASF136
 10882 08fb 07       		.byte	0x7
 10883 08fc B401     		.2byte	0x1b4
 10884 08fe BD000000 		.4byte	0xbd
 10885 0902 00       		.byte	0
 10886 0903 11       		.uleb128 0x11
 10887 0904 CE060000 		.4byte	.LASF137
 10888 0908 07       		.byte	0x7
 10889 0909 B501     		.2byte	0x1b5
 10890 090b D5000000 		.4byte	0xd5
 10891 090f 04       		.byte	0x4
 10892 0910 11       		.uleb128 0x11
 10893 0911 B50C0000 		.4byte	.LASF138
 10894 0915 07       		.byte	0x7
 10895 0916 B601     		.2byte	0x1b6
 10896 0918 D5000000 		.4byte	0xd5
 10897 091c 08       		.byte	0x8
 10898 091d 11       		.uleb128 0x11
 10899 091e 07030000 		.4byte	.LASF70
 10900 0922 07       		.byte	0x7
 10901 0923 B701     		.2byte	0x1b7
 10902 0925 2B090000 		.4byte	0x92b
 10903 0929 0C       		.byte	0xc
 10904 092a 00       		.byte	0
 10905 092b 07       		.uleb128 0x7
 10906 092c 81000000 		.4byte	0x81
 10907 0930 3B090000 		.4byte	0x93b
 10908 0934 08       		.uleb128 0x8
 10909 0935 0E010000 		.4byte	0x10e
 10910 0939 03       		.byte	0x3
 10911 093a 00       		.byte	0
 10912 093b 10       		.uleb128 0x10
 10913 093c C1010000 		.4byte	.LASF139
 10914 0940 12       		.byte	0x12
 10915 0941 07       		.byte	0x7
 10916 0942 BE01     		.2byte	0x1be
 10917 0944 7D090000 		.4byte	0x97d
 10918 0948 11       		.uleb128 0x11
 10919 0949 36110000 		.4byte	.LASF140
 10920 094d 07       		.byte	0x7
 10921 094e BF01     		.2byte	0x1bf
 10922 0950 81000000 		.4byte	0x81
 10923 0954 00       		.byte	0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 244


 10924 0955 11       		.uleb128 0x11
 10925 0956 D50F0000 		.4byte	.LASF141
 10926 095a 07       		.byte	0x7
 10927 095b C001     		.2byte	0x1c0
 10928 095d DA060000 		.4byte	0x6da
 10929 0961 02       		.byte	0x2
 10930 0962 11       		.uleb128 0x11
 10931 0963 1A000000 		.4byte	.LASF142
 10932 0967 07       		.byte	0x7
 10933 0968 C101     		.2byte	0x1c1
 10934 096a 81000000 		.4byte	0x81
 10935 096e 06       		.byte	0x6
 10936 096f 11       		.uleb128 0x11
 10937 0970 07030000 		.4byte	.LASF70
 10938 0974 07       		.byte	0x7
 10939 0975 C201     		.2byte	0x1c2
 10940 0977 7D090000 		.4byte	0x97d
 10941 097b 07       		.byte	0x7
 10942 097c 00       		.byte	0
 10943 097d 07       		.uleb128 0x7
 10944 097e 81000000 		.4byte	0x81
 10945 0982 8D090000 		.4byte	0x98d
 10946 0986 08       		.uleb128 0x8
 10947 0987 0E010000 		.4byte	0x10e
 10948 098b 09       		.byte	0x9
 10949 098c 00       		.byte	0
 10950 098d 13       		.uleb128 0x13
 10951 098e 3B100000 		.4byte	.LASF143
 10952 0992 F402     		.2byte	0x2f4
 10953 0994 07       		.byte	0x7
 10954 0995 CB01     		.2byte	0x1cb
 10955 0997 720A0000 		.4byte	0xa72
 10956 099b 11       		.uleb128 0x11
 10957 099c 510A0000 		.4byte	.LASF144
 10958 09a0 07       		.byte	0x7
 10959 09a1 CD01     		.2byte	0x1cd
 10960 09a3 81000000 		.4byte	0x81
 10961 09a7 00       		.byte	0
 10962 09a8 11       		.uleb128 0x11
 10963 09a9 07030000 		.4byte	.LASF70
 10964 09ad 07       		.byte	0x7
 10965 09ae CE01     		.2byte	0x1ce
 10966 09b0 720A0000 		.4byte	0xa72
 10967 09b4 01       		.byte	0x1
 10968 09b5 12       		.uleb128 0x12
 10969 09b6 636E7400 		.ascii	"cnt\000"
 10970 09ba 07       		.byte	0x7
 10971 09bb CF01     		.2byte	0x1cf
 10972 09bd 06030000 		.4byte	0x306
 10973 09c1 10       		.byte	0x10
 10974 09c2 11       		.uleb128 0x11
 10975 09c3 9A020000 		.4byte	.LASF145
 10976 09c7 07       		.byte	0x7
 10977 09c8 D001     		.2byte	0x1d0
 10978 09ca 820A0000 		.4byte	0xa82
 10979 09ce 60       		.byte	0x60
 10980 09cf 12       		.uleb128 0x12
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 245


 10981 09d0 64657600 		.ascii	"dev\000"
 10982 09d4 07       		.byte	0x7
 10983 09d5 D101     		.2byte	0x1d1
 10984 09d7 9F030000 		.4byte	0x39f
 10985 09db A0       		.byte	0xa0
 10986 09dc 11       		.uleb128 0x11
 10987 09dd 700E0000 		.4byte	.LASF146
 10988 09e1 07       		.byte	0x7
 10989 09e2 D201     		.2byte	0x1d2
 10990 09e4 920A0000 		.4byte	0xa92
 10991 09e8 B0       		.byte	0xb0
 10992 09e9 14       		.uleb128 0x14
 10993 09ea 656E6300 		.ascii	"enc\000"
 10994 09ee 07       		.byte	0x7
 10995 09ef D301     		.2byte	0x1d3
 10996 09f1 A20A0000 		.4byte	0xaa2
 10997 09f5 9001     		.2byte	0x190
 10998 09f7 14       		.uleb128 0x14
 10999 09f8 656D6700 		.ascii	"emg\000"
 11000 09fc 07       		.byte	0x7
 11001 09fd D401     		.2byte	0x1d4
 11002 09ff 8B060000 		.4byte	0x68b
 11003 0a03 F001     		.2byte	0x1f0
 11004 0a05 14       		.uleb128 0x14
 11005 0a06 696D7500 		.ascii	"imu\000"
 11006 0a0a 07       		.byte	0x7
 11007 0a0b D501     		.2byte	0x1d5
 11008 0a0d FA060000 		.4byte	0x6fa
 11009 0a11 0002     		.2byte	0x200
 11010 0a13 14       		.uleb128 0x14
 11011 0a14 65787000 		.ascii	"exp\000"
 11012 0a18 07       		.byte	0x7
 11013 0a19 D601     		.2byte	0x1d6
 11014 0a1b 52070000 		.4byte	0x752
 11015 0a1f 2002     		.2byte	0x220
 11016 0a21 15       		.uleb128 0x15
 11017 0a22 69000000 		.4byte	.LASF147
 11018 0a26 07       		.byte	0x7
 11019 0a27 D701     		.2byte	0x1d7
 11020 0a29 B20A0000 		.4byte	0xab2
 11021 0a2d 4002     		.2byte	0x240
 11022 0a2f 14       		.uleb128 0x14
 11023 0a30 534800   		.ascii	"SH\000"
 11024 0a33 07       		.byte	0x7
 11025 0a34 D901     		.2byte	0x1d9
 11026 0a36 13080000 		.4byte	0x813
 11027 0a3a A002     		.2byte	0x2a0
 11028 0a3c 15       		.uleb128 0x15
 11029 0a3d A2000000 		.4byte	.LASF148
 11030 0a41 07       		.byte	0x7
 11031 0a42 DA01     		.2byte	0x1da
 11032 0a44 62080000 		.4byte	0x862
 11033 0a48 B002     		.2byte	0x2b0
 11034 0a4a 14       		.uleb128 0x14
 11035 0a4b 4D5300   		.ascii	"MS\000"
 11036 0a4e 07       		.byte	0x7
 11037 0a4f DB01     		.2byte	0x1db
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 246


 11038 0a51 A4080000 		.4byte	0x8a4
 11039 0a55 C002     		.2byte	0x2c0
 11040 0a57 14       		.uleb128 0x14
 11041 0a58 464200   		.ascii	"FB\000"
 11042 0a5b 07       		.byte	0x7
 11043 0a5c DC01     		.2byte	0x1dc
 11044 0a5e E9080000 		.4byte	0x8e9
 11045 0a62 D002     		.2byte	0x2d0
 11046 0a64 14       		.uleb128 0x14
 11047 0a65 575200   		.ascii	"WR\000"
 11048 0a68 07       		.byte	0x7
 11049 0a69 DD01     		.2byte	0x1dd
 11050 0a6b 3B090000 		.4byte	0x93b
 11051 0a6f E002     		.2byte	0x2e0
 11052 0a71 00       		.byte	0
 11053 0a72 07       		.uleb128 0x7
 11054 0a73 81000000 		.4byte	0x81
 11055 0a77 820A0000 		.4byte	0xa82
 11056 0a7b 08       		.uleb128 0x8
 11057 0a7c 0E010000 		.4byte	0x10e
 11058 0a80 0E       		.byte	0xe
 11059 0a81 00       		.byte	0
 11060 0a82 07       		.uleb128 0x7
 11061 0a83 81000000 		.4byte	0x81
 11062 0a87 920A0000 		.4byte	0xa92
 11063 0a8b 08       		.uleb128 0x8
 11064 0a8c 0E010000 		.4byte	0x10e
 11065 0a90 3F       		.byte	0x3f
 11066 0a91 00       		.byte	0
 11067 0a92 07       		.uleb128 0x7
 11068 0a93 3E040000 		.4byte	0x43e
 11069 0a97 A20A0000 		.4byte	0xaa2
 11070 0a9b 08       		.uleb128 0x8
 11071 0a9c 0E010000 		.4byte	0x10e
 11072 0aa0 01       		.byte	0x1
 11073 0aa1 00       		.byte	0
 11074 0aa2 07       		.uleb128 0x7
 11075 0aa3 D8050000 		.4byte	0x5d8
 11076 0aa7 B20A0000 		.4byte	0xab2
 11077 0aab 08       		.uleb128 0x8
 11078 0aac 0E010000 		.4byte	0x10e
 11079 0ab0 01       		.byte	0x1
 11080 0ab1 00       		.byte	0
 11081 0ab2 07       		.uleb128 0x7
 11082 0ab3 DE070000 		.4byte	0x7de
 11083 0ab7 C20A0000 		.4byte	0xac2
 11084 0abb 08       		.uleb128 0x8
 11085 0abc 0E010000 		.4byte	0x10e
 11086 0ac0 02       		.byte	0x2
 11087 0ac1 00       		.byte	0
 11088 0ac2 10       		.uleb128 0x10
 11089 0ac3 1F0C0000 		.4byte	.LASF149
 11090 0ac7 28       		.byte	0x28
 11091 0ac8 07       		.byte	0x7
 11092 0ac9 E801     		.2byte	0x1e8
 11093 0acb 1E0B0000 		.4byte	0xb1e
 11094 0acf 11       		.uleb128 0x11
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 247


 11095 0ad0 AD040000 		.4byte	.LASF150
 11096 0ad4 07       		.byte	0x7
 11097 0ad5 E901     		.2byte	0x1e9
 11098 0ad7 81000000 		.4byte	0x81
 11099 0adb 00       		.byte	0
 11100 0adc 11       		.uleb128 0x11
 11101 0add 14030000 		.4byte	.LASF151
 11102 0ae1 07       		.byte	0x7
 11103 0ae2 EA01     		.2byte	0x1ea
 11104 0ae4 1E0B0000 		.4byte	0xb1e
 11105 0ae8 02       		.byte	0x2
 11106 0ae9 11       		.uleb128 0x11
 11107 0aea 750B0000 		.4byte	.LASF152
 11108 0aee 07       		.byte	0x7
 11109 0aef EB01     		.2byte	0x1eb
 11110 0af1 1E0B0000 		.4byte	0xb1e
 11111 0af5 08       		.byte	0x8
 11112 0af6 11       		.uleb128 0x11
 11113 0af7 2B0C0000 		.4byte	.LASF153
 11114 0afb 07       		.byte	0x7
 11115 0afc EC01     		.2byte	0x1ec
 11116 0afe 1E0B0000 		.4byte	0xb1e
 11117 0b02 0E       		.byte	0xe
 11118 0b03 11       		.uleb128 0x11
 11119 0b04 FD070000 		.4byte	.LASF154
 11120 0b08 07       		.byte	0x7
 11121 0b09 ED01     		.2byte	0x1ed
 11122 0b0b 2E0B0000 		.4byte	0xb2e
 11123 0b0f 14       		.byte	0x14
 11124 0b10 11       		.uleb128 0x11
 11125 0b11 AE010000 		.4byte	.LASF155
 11126 0b15 07       		.byte	0x7
 11127 0b16 EE01     		.2byte	0x1ee
 11128 0b18 B1000000 		.4byte	0xb1
 11129 0b1c 24       		.byte	0x24
 11130 0b1d 00       		.byte	0
 11131 0b1e 07       		.uleb128 0x7
 11132 0b1f B1000000 		.4byte	0xb1
 11133 0b23 2E0B0000 		.4byte	0xb2e
 11134 0b27 08       		.uleb128 0x8
 11135 0b28 0E010000 		.4byte	0x10e
 11136 0b2c 02       		.byte	0x2
 11137 0b2d 00       		.byte	0
 11138 0b2e 07       		.uleb128 0x7
 11139 0b2f D5000000 		.4byte	0xd5
 11140 0b33 3E0B0000 		.4byte	0xb3e
 11141 0b37 08       		.uleb128 0x8
 11142 0b38 0E010000 		.4byte	0x10e
 11143 0b3c 03       		.byte	0x3
 11144 0b3d 00       		.byte	0
 11145 0b3e 10       		.uleb128 0x10
 11146 0b3f B0110000 		.4byte	.LASF156
 11147 0b43 08       		.byte	0x8
 11148 0b44 07       		.byte	0x7
 11149 0b45 F501     		.2byte	0x1f5
 11150 0b47 660B0000 		.4byte	0xb66
 11151 0b4b 11       		.uleb128 0x11
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 248


 11152 0b4c 65050000 		.4byte	.LASF157
 11153 0b50 07       		.byte	0x7
 11154 0b51 F601     		.2byte	0x1f6
 11155 0b53 BD000000 		.4byte	0xbd
 11156 0b57 00       		.byte	0
 11157 0b58 11       		.uleb128 0x11
 11158 0b59 F4010000 		.4byte	.LASF158
 11159 0b5d 07       		.byte	0x7
 11160 0b5e F701     		.2byte	0x1f7
 11161 0b60 BD000000 		.4byte	0xbd
 11162 0b64 04       		.byte	0x4
 11163 0b65 00       		.byte	0
 11164 0b66 10       		.uleb128 0x10
 11165 0b67 CE030000 		.4byte	.LASF159
 11166 0b6b 06       		.byte	0x6
 11167 0b6c 07       		.byte	0x7
 11168 0b6d FE01     		.2byte	0x1fe
 11169 0b6f A80B0000 		.4byte	0xba8
 11170 0b73 11       		.uleb128 0x11
 11171 0b74 39070000 		.4byte	.LASF160
 11172 0b78 07       		.byte	0x7
 11173 0b79 FF01     		.2byte	0x1ff
 11174 0b7b 81000000 		.4byte	0x81
 11175 0b7f 00       		.byte	0
 11176 0b80 11       		.uleb128 0x11
 11177 0b81 CC110000 		.4byte	.LASF161
 11178 0b85 07       		.byte	0x7
 11179 0b86 0002     		.2byte	0x200
 11180 0b88 81000000 		.4byte	0x81
 11181 0b8c 01       		.byte	0x1
 11182 0b8d 11       		.uleb128 0x11
 11183 0b8e F2050000 		.4byte	.LASF162
 11184 0b92 07       		.byte	0x7
 11185 0b93 0102     		.2byte	0x201
 11186 0b95 B1000000 		.4byte	0xb1
 11187 0b99 02       		.byte	0x2
 11188 0b9a 11       		.uleb128 0x11
 11189 0b9b C1090000 		.4byte	.LASF163
 11190 0b9f 07       		.byte	0x7
 11191 0ba0 0202     		.2byte	0x202
 11192 0ba2 B1000000 		.4byte	0xb1
 11193 0ba6 04       		.byte	0x4
 11194 0ba7 00       		.byte	0
 11195 0ba8 16       		.uleb128 0x16
 11196 0ba9 01       		.byte	0x1
 11197 0baa 2C000000 		.4byte	0x2c
 11198 0bae 07       		.byte	0x7
 11199 0baf 0602     		.2byte	0x206
 11200 0bb1 DA0B0000 		.4byte	0xbda
 11201 0bb5 0A       		.uleb128 0xa
 11202 0bb6 82050000 		.4byte	.LASF164
 11203 0bba 00       		.byte	0
 11204 0bbb 0A       		.uleb128 0xa
 11205 0bbc F70C0000 		.4byte	.LASF165
 11206 0bc0 01       		.byte	0x1
 11207 0bc1 0A       		.uleb128 0xa
 11208 0bc2 0E0B0000 		.4byte	.LASF166
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 249


 11209 0bc6 02       		.byte	0x2
 11210 0bc7 0A       		.uleb128 0xa
 11211 0bc8 3D020000 		.4byte	.LASF167
 11212 0bcc 03       		.byte	0x3
 11213 0bcd 0A       		.uleb128 0xa
 11214 0bce F7090000 		.4byte	.LASF168
 11215 0bd2 04       		.byte	0x4
 11216 0bd3 0A       		.uleb128 0xa
 11217 0bd4 950C0000 		.4byte	.LASF169
 11218 0bd8 05       		.byte	0x5
 11219 0bd9 00       		.byte	0
 11220 0bda 05       		.uleb128 0x5
 11221 0bdb 17050000 		.4byte	.LASF170
 11222 0bdf 07       		.byte	0x7
 11223 0be0 0E02     		.2byte	0x20e
 11224 0be2 A80B0000 		.4byte	0xba8
 11225 0be6 16       		.uleb128 0x16
 11226 0be7 01       		.byte	0x1
 11227 0be8 2C000000 		.4byte	0x2c
 11228 0bec 07       		.byte	0x7
 11229 0bed 1002     		.2byte	0x210
 11230 0bef 120C0000 		.4byte	0xc12
 11231 0bf3 0A       		.uleb128 0xa
 11232 0bf4 A1010000 		.4byte	.LASF171
 11233 0bf8 00       		.byte	0
 11234 0bf9 0A       		.uleb128 0xa
 11235 0bfa 6B070000 		.4byte	.LASF172
 11236 0bfe 01       		.byte	0x1
 11237 0bff 0A       		.uleb128 0xa
 11238 0c00 16080000 		.4byte	.LASF173
 11239 0c04 02       		.byte	0x2
 11240 0c05 0A       		.uleb128 0xa
 11241 0c06 7B030000 		.4byte	.LASF174
 11242 0c0a 03       		.byte	0x3
 11243 0c0b 0A       		.uleb128 0xa
 11244 0c0c 31110000 		.4byte	.LASF175
 11245 0c10 04       		.byte	0x4
 11246 0c11 00       		.byte	0
 11247 0c12 05       		.uleb128 0x5
 11248 0c13 E10D0000 		.4byte	.LASF176
 11249 0c17 07       		.byte	0x7
 11250 0c18 1702     		.2byte	0x217
 11251 0c1a E60B0000 		.4byte	0xbe6
 11252 0c1e 17       		.uleb128 0x17
 11253 0c1f 40050000 		.4byte	.LASF177
 11254 0c23 01       		.byte	0x1
 11255 0c24 62       		.byte	0x62
 11256 0c25 00000000 		.4byte	.LFB64
 11257 0c29 18000000 		.4byte	.LFE64-.LFB64
 11258 0c2d 01       		.uleb128 0x1
 11259 0c2e 9C       		.byte	0x9c
 11260 0c2f 17       		.uleb128 0x17
 11261 0c30 B80F0000 		.4byte	.LASF178
 11262 0c34 01       		.byte	0x1
 11263 0c35 6D       		.byte	0x6d
 11264 0c36 00000000 		.4byte	.LFB65
 11265 0c3a 20000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 250


 11266 0c3e 01       		.uleb128 0x1
 11267 0c3f 9C       		.byte	0x9c
 11268 0c40 18       		.uleb128 0x18
 11269 0c41 75090000 		.4byte	.LASF210
 11270 0c45 01       		.byte	0x1
 11271 0c46 86       		.byte	0x86
 11272 0c47 00000000 		.4byte	.LFB66
 11273 0c4b F4010000 		.4byte	.LFE66-.LFB66
 11274 0c4f 01       		.uleb128 0x1
 11275 0c50 9C       		.byte	0x9c
 11276 0c51 D50C0000 		.4byte	0xcd5
 11277 0c55 19       		.uleb128 0x19
 11278 0c56 CF000000 		.4byte	.LASF179
 11279 0c5a 01       		.byte	0x1
 11280 0c5b 8B       		.byte	0x8b
 11281 0c5c 81000000 		.4byte	0x81
 11282 0c60 05       		.uleb128 0x5
 11283 0c61 03       		.byte	0x3
 11284 0c62 00000000 		.4byte	state.10445
 11285 0c66 19       		.uleb128 0x19
 11286 0c67 17060000 		.4byte	.LASF180
 11287 0c6b 01       		.byte	0x1
 11288 0c6c 8E       		.byte	0x8e
 11289 0c6d 81000000 		.4byte	0x81
 11290 0c71 05       		.uleb128 0x5
 11291 0c72 03       		.byte	0x3
 11292 0c73 08000000 		.4byte	data_packet_index.10446
 11293 0c77 19       		.uleb128 0x19
 11294 0c78 5E0C0000 		.4byte	.LASF181
 11295 0c7c 01       		.byte	0x1
 11296 0c7d 8F       		.byte	0x8f
 11297 0c7e 81000000 		.4byte	0x81
 11298 0c82 05       		.uleb128 0x5
 11299 0c83 03       		.byte	0x3
 11300 0c84 07000000 		.4byte	data_packet_length.10447
 11301 0c88 19       		.uleb128 0x19
 11302 0c89 29060000 		.4byte	.LASF182
 11303 0c8d 01       		.byte	0x1
 11304 0c8e 90       		.byte	0x90
 11305 0c8f F6020000 		.4byte	0x2f6
 11306 0c93 05       		.uleb128 0x5
 11307 0c94 03       		.byte	0x3
 11308 0c95 0C000000 		.4byte	data_packet_buffer.10448
 11309 0c99 19       		.uleb128 0x19
 11310 0c9a 930A0000 		.4byte	.LASF183
 11311 0c9e 01       		.byte	0x1
 11312 0c9f 91       		.byte	0x91
 11313 0ca0 2E040000 		.4byte	0x42e
 11314 0ca4 05       		.uleb128 0x5
 11315 0ca5 03       		.byte	0x3
 11316 0ca6 04000000 		.4byte	rx_queue.10449
 11317 0caa 19       		.uleb128 0x19
 11318 0cab 66010000 		.4byte	.LASF184
 11319 0caf 01       		.byte	0x1
 11320 0cb0 94       		.byte	0x94
 11321 0cb1 81000000 		.4byte	0x81
 11322 0cb5 02       		.uleb128 0x2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 251


 11323 0cb6 91       		.byte	0x91
 11324 0cb7 75       		.sleb128 -11
 11325 0cb8 19       		.uleb128 0x19
 11326 0cb9 DC050000 		.4byte	.LASF185
 11327 0cbd 01       		.byte	0x1
 11328 0cbe 95       		.byte	0x95
 11329 0cbf 81000000 		.4byte	0x81
 11330 0cc3 02       		.uleb128 0x2
 11331 0cc4 91       		.byte	0x91
 11332 0cc5 77       		.sleb128 -9
 11333 0cc6 19       		.uleb128 0x19
 11334 0cc7 16070000 		.4byte	.LASF186
 11335 0ccb 01       		.byte	0x1
 11336 0ccc 96       		.byte	0x96
 11337 0ccd 81000000 		.4byte	0x81
 11338 0cd1 02       		.uleb128 0x2
 11339 0cd2 91       		.byte	0x91
 11340 0cd3 76       		.sleb128 -10
 11341 0cd4 00       		.byte	0
 11342 0cd5 1A       		.uleb128 0x1a
 11343 0cd6 900E0000 		.4byte	.LASF193
 11344 0cda 01       		.byte	0x1
 11345 0cdb 0C01     		.2byte	0x10c
 11346 0cdd 00000000 		.4byte	.LFB67
 11347 0ce1 8C070000 		.4byte	.LFE67-.LFB67
 11348 0ce5 01       		.uleb128 0x1
 11349 0ce6 9C       		.byte	0x9c
 11350 0ce7 740D0000 		.4byte	0xd74
 11351 0ceb 1B       		.uleb128 0x1b
 11352 0cec 53060000 		.4byte	.LASF187
 11353 0cf0 01       		.byte	0x1
 11354 0cf1 0E01     		.2byte	0x10e
 11355 0cf3 8D000000 		.4byte	0x8d
 11356 0cf7 05       		.uleb128 0x5
 11357 0cf8 03       		.byte	0x3
 11358 0cf9 00000000 		.4byte	counter_calibration.10465
 11359 0cfd 1B       		.uleb128 0x1b
 11360 0cfe C90B0000 		.4byte	.LASF188
 11361 0d02 01       		.byte	0x1
 11362 0d03 0F01     		.2byte	0x10f
 11363 0d05 8D000000 		.4byte	0x8d
 11364 0d09 05       		.uleb128 0x5
 11365 0d0a 03       		.byte	0x3
 11366 0d0b 02000000 		.4byte	counter_tension_func.10466
 11367 0d0f 1B       		.uleb128 0x1b
 11368 0d10 7D010000 		.4byte	.LASF189
 11369 0d14 01       		.byte	0x1
 11370 0d15 1001     		.2byte	0x110
 11371 0d17 740D0000 		.4byte	0xd74
 11372 0d1b 03       		.uleb128 0x3
 11373 0d1c 91       		.byte	0x91
 11374 0d1d A86C     		.sleb128 -2520
 11375 0d1f 1B       		.uleb128 0x1b
 11376 0d20 AC0B0000 		.4byte	.LASF190
 11377 0d24 01       		.byte	0x1
 11378 0d25 1201     		.2byte	0x112
 11379 0d27 81000000 		.4byte	0x81
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 252


 11380 0d2b 02       		.uleb128 0x2
 11381 0d2c 91       		.byte	0x91
 11382 0d2d 6E       		.sleb128 -18
 11383 0d2e 1B       		.uleb128 0x1b
 11384 0d2f 32090000 		.4byte	.LASF191
 11385 0d33 01       		.byte	0x1
 11386 0d34 1301     		.2byte	0x113
 11387 0d36 81000000 		.4byte	0x81
 11388 0d3a 02       		.uleb128 0x2
 11389 0d3b 91       		.byte	0x91
 11390 0d3c 6D       		.sleb128 -19
 11391 0d3d 1C       		.uleb128 0x1c
 11392 0d3e 6A010000 		.4byte	.LBB2
 11393 0d42 1A010000 		.4byte	.LBE2-.LBB2
 11394 0d46 580D0000 		.4byte	0xd58
 11395 0d4a 1D       		.uleb128 0x1d
 11396 0d4b 6900     		.ascii	"i\000"
 11397 0d4d 01       		.byte	0x1
 11398 0d4e 4D01     		.2byte	0x14d
 11399 0d50 81000000 		.4byte	0x81
 11400 0d54 02       		.uleb128 0x2
 11401 0d55 91       		.byte	0x91
 11402 0d56 6F       		.sleb128 -17
 11403 0d57 00       		.byte	0
 11404 0d58 1E       		.uleb128 0x1e
 11405 0d59 C2050000 		.4byte	.LBB3
 11406 0d5d 50000000 		.4byte	.LBE3-.LBB3
 11407 0d61 1B       		.uleb128 0x1b
 11408 0d62 A8020000 		.4byte	.LASF192
 11409 0d66 01       		.byte	0x1
 11410 0d67 3802     		.2byte	0x238
 11411 0d69 850D0000 		.4byte	0xd85
 11412 0d6d 04       		.uleb128 0x4
 11413 0d6e 91       		.byte	0x91
 11414 0d6f 90F77E   		.sleb128 -17520
 11415 0d72 00       		.byte	0
 11416 0d73 00       		.byte	0
 11417 0d74 07       		.uleb128 0x7
 11418 0d75 E3000000 		.4byte	0xe3
 11419 0d79 850D0000 		.4byte	0xd85
 11420 0d7d 1F       		.uleb128 0x1f
 11421 0d7e 0E010000 		.4byte	0x10e
 11422 0d82 C309     		.2byte	0x9c3
 11423 0d84 00       		.byte	0
 11424 0d85 07       		.uleb128 0x7
 11425 0d86 E3000000 		.4byte	0xe3
 11426 0d8a 960D0000 		.4byte	0xd96
 11427 0d8e 1F       		.uleb128 0x1f
 11428 0d8f 0E010000 		.4byte	0x10e
 11429 0d93 973A     		.2byte	0x3a97
 11430 0d95 00       		.byte	0
 11431 0d96 1A       		.uleb128 0x1a
 11432 0d97 A30E0000 		.4byte	.LASF194
 11433 0d9b 01       		.byte	0x1
 11434 0d9c 7C02     		.2byte	0x27c
 11435 0d9e 00000000 		.4byte	.LFB68
 11436 0da2 CC050000 		.4byte	.LFE68-.LFB68
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 253


 11437 0da6 01       		.uleb128 0x1
 11438 0da7 9C       		.byte	0x9c
 11439 0da8 4C0E0000 		.4byte	0xe4c
 11440 0dac 20       		.uleb128 0x20
 11441 0dad D7070000 		.4byte	.LASF195
 11442 0db1 01       		.byte	0x1
 11443 0db2 7C02     		.2byte	0x27c
 11444 0db4 81000000 		.4byte	0x81
 11445 0db8 02       		.uleb128 0x2
 11446 0db9 91       		.byte	0x91
 11447 0dba 5F       		.sleb128 -33
 11448 0dbb 20       		.uleb128 0x20
 11449 0dbc 3C060000 		.4byte	.LASF196
 11450 0dc0 01       		.byte	0x1
 11451 0dc1 7C02     		.2byte	0x27c
 11452 0dc3 4C0E0000 		.4byte	0xe4c
 11453 0dc7 02       		.uleb128 0x2
 11454 0dc8 91       		.byte	0x91
 11455 0dc9 58       		.sleb128 -40
 11456 0dca 20       		.uleb128 0x20
 11457 0dcb 6A100000 		.4byte	.LASF197
 11458 0dcf 01       		.byte	0x1
 11459 0dd0 7C02     		.2byte	0x27c
 11460 0dd2 4C0E0000 		.4byte	0xe4c
 11461 0dd6 02       		.uleb128 0x2
 11462 0dd7 91       		.byte	0x91
 11463 0dd8 54       		.sleb128 -44
 11464 0dd9 1B       		.uleb128 0x1b
 11465 0dda B3040000 		.4byte	.LASF198
 11466 0dde 01       		.byte	0x1
 11467 0ddf 7E02     		.2byte	0x27e
 11468 0de1 BD000000 		.4byte	0xbd
 11469 0de5 02       		.uleb128 0x2
 11470 0de6 91       		.byte	0x91
 11471 0de7 74       		.sleb128 -12
 11472 0de8 1B       		.uleb128 0x1b
 11473 0de9 D7030000 		.4byte	.LASF199
 11474 0ded 01       		.byte	0x1
 11475 0dee 7F02     		.2byte	0x27f
 11476 0df0 BD000000 		.4byte	0xbd
 11477 0df4 02       		.uleb128 0x2
 11478 0df5 91       		.byte	0x91
 11479 0df6 68       		.sleb128 -24
 11480 0df7 1B       		.uleb128 0x1b
 11481 0df8 E1030000 		.4byte	.LASF200
 11482 0dfc 01       		.byte	0x1
 11483 0dfd 7F02     		.2byte	0x27f
 11484 0dff BD000000 		.4byte	0xbd
 11485 0e03 02       		.uleb128 0x2
 11486 0e04 91       		.byte	0x91
 11487 0e05 64       		.sleb128 -28
 11488 0e06 1D       		.uleb128 0x1d
 11489 0e07 4D4F5400 		.ascii	"MOT\000"
 11490 0e0b 01       		.byte	0x1
 11491 0e0c 8002     		.2byte	0x280
 11492 0e0e 520E0000 		.4byte	0xe52
 11493 0e12 02       		.uleb128 0x2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 254


 11494 0e13 91       		.byte	0x91
 11495 0e14 70       		.sleb128 -16
 11496 0e15 1B       		.uleb128 0x1b
 11497 0e16 35100000 		.4byte	.LASF201
 11498 0e1a 01       		.byte	0x1
 11499 0e1b 8102     		.2byte	0x281
 11500 0e1d 81000000 		.4byte	0x81
 11501 0e21 02       		.uleb128 0x2
 11502 0e22 91       		.byte	0x91
 11503 0e23 6F       		.sleb128 -17
 11504 0e24 1B       		.uleb128 0x1b
 11505 0e25 870A0000 		.4byte	.LASF202
 11506 0e29 01       		.byte	0x1
 11507 0e2a 8302     		.2byte	0x283
 11508 0e2c EA060000 		.4byte	0x6ea
 11509 0e30 05       		.uleb128 0x5
 11510 0e31 03       		.byte	0x3
 11511 0e32 8C000000 		.4byte	current_emg.10491
 11512 0e36 21       		.uleb128 0x21
 11513 0e37 00000000 		.4byte	.Ldebug_ranges0+0
 11514 0e3b 1B       		.uleb128 0x1b
 11515 0e3c C5000000 		.4byte	.LASF203
 11516 0e40 01       		.byte	0x1
 11517 0e41 A802     		.2byte	0x2a8
 11518 0e43 BD000000 		.4byte	0xbd
 11519 0e47 02       		.uleb128 0x2
 11520 0e48 91       		.byte	0x91
 11521 0e49 60       		.sleb128 -32
 11522 0e4a 00       		.byte	0
 11523 0e4b 00       		.byte	0
 11524 0e4c 0C       		.uleb128 0xc
 11525 0e4d 04       		.byte	0x4
 11526 0e4e A5010000 		.4byte	0x1a5
 11527 0e52 0C       		.uleb128 0xc
 11528 0e53 04       		.byte	0x4
 11529 0e54 3E040000 		.4byte	0x43e
 11530 0e58 22       		.uleb128 0x22
 11531 0e59 790F0000 		.4byte	.LASF204
 11532 0e5d 01       		.byte	0x1
 11533 0e5e 5B03     		.2byte	0x35b
 11534 0e60 00000000 		.4byte	.LFB69
 11535 0e64 34030000 		.4byte	.LFE69-.LFB69
 11536 0e68 01       		.uleb128 0x1
 11537 0e69 9C       		.byte	0x9c
 11538 0e6a E80E0000 		.4byte	0xee8
 11539 0e6e 20       		.uleb128 0x20
 11540 0e6f D7070000 		.4byte	.LASF195
 11541 0e73 01       		.byte	0x1
 11542 0e74 5B03     		.2byte	0x35b
 11543 0e76 81000000 		.4byte	0x81
 11544 0e7a 02       		.uleb128 0x2
 11545 0e7b 91       		.byte	0x91
 11546 0e7c 67       		.sleb128 -25
 11547 0e7d 20       		.uleb128 0x20
 11548 0e7e 3C060000 		.4byte	.LASF196
 11549 0e82 01       		.byte	0x1
 11550 0e83 5B03     		.2byte	0x35b
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 255


 11551 0e85 4C0E0000 		.4byte	0xe4c
 11552 0e89 02       		.uleb128 0x2
 11553 0e8a 91       		.byte	0x91
 11554 0e8b 60       		.sleb128 -32
 11555 0e8c 20       		.uleb128 0x20
 11556 0e8d 6A100000 		.4byte	.LASF197
 11557 0e91 01       		.byte	0x1
 11558 0e92 5B03     		.2byte	0x35b
 11559 0e94 4C0E0000 		.4byte	0xe4c
 11560 0e98 02       		.uleb128 0x2
 11561 0e99 91       		.byte	0x91
 11562 0e9a 5C       		.sleb128 -36
 11563 0e9b 23       		.uleb128 0x23
 11564 0e9c 18000000 		.4byte	.Ldebug_ranges0+0x18
 11565 0ea0 C30E0000 		.4byte	0xec3
 11566 0ea4 1B       		.uleb128 0x1b
 11567 0ea5 C5000000 		.4byte	.LASF203
 11568 0ea9 01       		.byte	0x1
 11569 0eaa 6203     		.2byte	0x362
 11570 0eac BD000000 		.4byte	0xbd
 11571 0eb0 02       		.uleb128 0x2
 11572 0eb1 91       		.byte	0x91
 11573 0eb2 74       		.sleb128 -12
 11574 0eb3 1B       		.uleb128 0x1b
 11575 0eb4 CC010000 		.4byte	.LASF205
 11576 0eb8 01       		.byte	0x1
 11577 0eb9 6303     		.2byte	0x363
 11578 0ebb BD000000 		.4byte	0xbd
 11579 0ebf 02       		.uleb128 0x2
 11580 0ec0 91       		.byte	0x91
 11581 0ec1 70       		.sleb128 -16
 11582 0ec2 00       		.byte	0
 11583 0ec3 21       		.uleb128 0x21
 11584 0ec4 30000000 		.4byte	.Ldebug_ranges0+0x30
 11585 0ec8 1B       		.uleb128 0x1b
 11586 0ec9 C60C0000 		.4byte	.LASF206
 11587 0ecd 01       		.byte	0x1
 11588 0ece 8803     		.2byte	0x388
 11589 0ed0 BD000000 		.4byte	0xbd
 11590 0ed4 02       		.uleb128 0x2
 11591 0ed5 91       		.byte	0x91
 11592 0ed6 6C       		.sleb128 -20
 11593 0ed7 1B       		.uleb128 0x1b
 11594 0ed8 6D090000 		.4byte	.LASF207
 11595 0edc 01       		.byte	0x1
 11596 0edd 8903     		.2byte	0x389
 11597 0edf BD000000 		.4byte	0xbd
 11598 0ee3 02       		.uleb128 0x2
 11599 0ee4 91       		.byte	0x91
 11600 0ee5 68       		.sleb128 -24
 11601 0ee6 00       		.byte	0
 11602 0ee7 00       		.byte	0
 11603 0ee8 1A       		.uleb128 0x1a
 11604 0ee9 99090000 		.4byte	.LASF208
 11605 0eed 01       		.byte	0x1
 11606 0eee B403     		.2byte	0x3b4
 11607 0ef0 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 256


 11608 0ef4 B0010000 		.4byte	.LFE70-.LFB70
 11609 0ef8 01       		.uleb128 0x1
 11610 0ef9 9C       		.byte	0x9c
 11611 0efa 5C0F0000 		.4byte	0xf5c
 11612 0efe 20       		.uleb128 0x20
 11613 0eff D7070000 		.4byte	.LASF195
 11614 0f03 01       		.byte	0x1
 11615 0f04 B403     		.2byte	0x3b4
 11616 0f06 81000000 		.4byte	0x81
 11617 0f0a 02       		.uleb128 0x2
 11618 0f0b 91       		.byte	0x91
 11619 0f0c 77       		.sleb128 -9
 11620 0f0d 20       		.uleb128 0x20
 11621 0f0e 3C060000 		.4byte	.LASF196
 11622 0f12 01       		.byte	0x1
 11623 0f13 B403     		.2byte	0x3b4
 11624 0f15 4C0E0000 		.4byte	0xe4c
 11625 0f19 02       		.uleb128 0x2
 11626 0f1a 91       		.byte	0x91
 11627 0f1b 70       		.sleb128 -16
 11628 0f1c 20       		.uleb128 0x20
 11629 0f1d 6A100000 		.4byte	.LASF197
 11630 0f21 01       		.byte	0x1
 11631 0f22 B403     		.2byte	0x3b4
 11632 0f24 4C0E0000 		.4byte	0xe4c
 11633 0f28 02       		.uleb128 0x2
 11634 0f29 91       		.byte	0x91
 11635 0f2a 6C       		.sleb128 -20
 11636 0f2b 20       		.uleb128 0x20
 11637 0f2c D7030000 		.4byte	.LASF199
 11638 0f30 01       		.byte	0x1
 11639 0f31 B503     		.2byte	0x3b5
 11640 0f33 BD000000 		.4byte	0xbd
 11641 0f37 02       		.uleb128 0x2
 11642 0f38 91       		.byte	0x91
 11643 0f39 68       		.sleb128 -24
 11644 0f3a 20       		.uleb128 0x20
 11645 0f3b E1030000 		.4byte	.LASF200
 11646 0f3f 01       		.byte	0x1
 11647 0f40 B503     		.2byte	0x3b5
 11648 0f42 BD000000 		.4byte	0xbd
 11649 0f46 02       		.uleb128 0x2
 11650 0f47 91       		.byte	0x91
 11651 0f48 00       		.sleb128 0
 11652 0f49 1B       		.uleb128 0x1b
 11653 0f4a E90B0000 		.4byte	.LASF209
 11654 0f4e 01       		.byte	0x1
 11655 0f4f B803     		.2byte	0x3b8
 11656 0f51 81000000 		.4byte	0x81
 11657 0f55 05       		.uleb128 0x5
 11658 0f56 03       		.byte	0x3
 11659 0f57 8E000000 		.4byte	fsm_state.10528
 11660 0f5b 00       		.byte	0
 11661 0f5c 24       		.uleb128 0x24
 11662 0f5d 89050000 		.4byte	.LASF211
 11663 0f61 01       		.byte	0x1
 11664 0f62 EA03     		.2byte	0x3ea
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 257


 11665 0f64 00000000 		.4byte	.LFB71
 11666 0f68 0C070000 		.4byte	.LFE71-.LFB71
 11667 0f6c 01       		.uleb128 0x1
 11668 0f6d 9C       		.byte	0x9c
 11669 0f6e 13110000 		.4byte	0x1113
 11670 0f72 1B       		.uleb128 0x1b
 11671 0f73 20010000 		.4byte	.LASF212
 11672 0f77 01       		.byte	0x1
 11673 0f78 EC03     		.2byte	0x3ec
 11674 0f7a BD000000 		.4byte	0xbd
 11675 0f7e 02       		.uleb128 0x2
 11676 0f7f 91       		.byte	0x91
 11677 0f80 74       		.sleb128 -12
 11678 0f81 1B       		.uleb128 0x1b
 11679 0f82 6B0B0000 		.4byte	.LASF213
 11680 0f86 01       		.byte	0x1
 11681 0f87 ED03     		.2byte	0x3ed
 11682 0f89 BD000000 		.4byte	0xbd
 11683 0f8d 03       		.uleb128 0x3
 11684 0f8e 91       		.byte	0x91
 11685 0f8f B07F     		.sleb128 -80
 11686 0f91 1B       		.uleb128 0x1b
 11687 0f92 460F0000 		.4byte	.LASF214
 11688 0f96 01       		.byte	0x1
 11689 0f97 EE03     		.2byte	0x3ee
 11690 0f99 BD000000 		.4byte	0xbd
 11691 0f9d 03       		.uleb128 0x3
 11692 0f9e 91       		.byte	0x91
 11693 0f9f AC7F     		.sleb128 -84
 11694 0fa1 1B       		.uleb128 0x1b
 11695 0fa2 BE0A0000 		.4byte	.LASF215
 11696 0fa6 01       		.byte	0x1
 11697 0fa7 EF03     		.2byte	0x3ef
 11698 0fa9 BD000000 		.4byte	0xbd
 11699 0fad 02       		.uleb128 0x2
 11700 0fae 91       		.byte	0x91
 11701 0faf 70       		.sleb128 -16
 11702 0fb0 1B       		.uleb128 0x1b
 11703 0fb1 AC0B0000 		.4byte	.LASF190
 11704 0fb5 01       		.byte	0x1
 11705 0fb6 F103     		.2byte	0x3f1
 11706 0fb8 81000000 		.4byte	0x81
 11707 0fbc 02       		.uleb128 0x2
 11708 0fbd 91       		.byte	0x91
 11709 0fbe 6F       		.sleb128 -17
 11710 0fbf 1B       		.uleb128 0x1b
 11711 0fc0 46030000 		.4byte	.LASF216
 11712 0fc4 01       		.byte	0x1
 11713 0fc5 F303     		.2byte	0x3f3
 11714 0fc7 520E0000 		.4byte	0xe52
 11715 0fcb 02       		.uleb128 0x2
 11716 0fcc 91       		.byte	0x91
 11717 0fcd 68       		.sleb128 -24
 11718 0fce 1B       		.uleb128 0x1b
 11719 0fcf BA020000 		.4byte	.LASF217
 11720 0fd3 01       		.byte	0x1
 11721 0fd4 F403     		.2byte	0x3f4
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 258


 11722 0fd6 81000000 		.4byte	0x81
 11723 0fda 02       		.uleb128 0x2
 11724 0fdb 91       		.byte	0x91
 11725 0fdc 67       		.sleb128 -25
 11726 0fdd 1D       		.uleb128 0x1d
 11727 0fde 6B5F7000 		.ascii	"k_p\000"
 11728 0fe2 01       		.byte	0x1
 11729 0fe3 F603     		.2byte	0x3f6
 11730 0fe5 BD000000 		.4byte	0xbd
 11731 0fe9 02       		.uleb128 0x2
 11732 0fea 91       		.byte	0x91
 11733 0feb 60       		.sleb128 -32
 11734 0fec 1D       		.uleb128 0x1d
 11735 0fed 6B5F6900 		.ascii	"k_i\000"
 11736 0ff1 01       		.byte	0x1
 11737 0ff2 F703     		.2byte	0x3f7
 11738 0ff4 BD000000 		.4byte	0xbd
 11739 0ff8 02       		.uleb128 0x2
 11740 0ff9 91       		.byte	0x91
 11741 0ffa 5C       		.sleb128 -36
 11742 0ffb 1D       		.uleb128 0x1d
 11743 0ffc 6B5F6400 		.ascii	"k_d\000"
 11744 1000 01       		.byte	0x1
 11745 1001 F803     		.2byte	0x3f8
 11746 1003 BD000000 		.4byte	0xbd
 11747 1007 02       		.uleb128 0x2
 11748 1008 91       		.byte	0x91
 11749 1009 58       		.sleb128 -40
 11750 100a 1B       		.uleb128 0x1b
 11751 100b 710C0000 		.4byte	.LASF72
 11752 100f 01       		.byte	0x1
 11753 1010 FA03     		.2byte	0x3fa
 11754 1012 BD000000 		.4byte	0xbd
 11755 1016 02       		.uleb128 0x2
 11756 1017 91       		.byte	0x91
 11757 1018 54       		.sleb128 -44
 11758 1019 1B       		.uleb128 0x1b
 11759 101a 29050000 		.4byte	.LASF73
 11760 101e 01       		.byte	0x1
 11761 101f FB03     		.2byte	0x3fb
 11762 1021 BD000000 		.4byte	0xbd
 11763 1025 02       		.uleb128 0x2
 11764 1026 91       		.byte	0x91
 11765 1027 50       		.sleb128 -48
 11766 1028 1B       		.uleb128 0x1b
 11767 1029 11050000 		.4byte	.LASF74
 11768 102d 01       		.byte	0x1
 11769 102e FC03     		.2byte	0x3fc
 11770 1030 BD000000 		.4byte	0xbd
 11771 1034 02       		.uleb128 0x2
 11772 1035 91       		.byte	0x91
 11773 1036 4C       		.sleb128 -52
 11774 1037 1B       		.uleb128 0x1b
 11775 1038 1F0F0000 		.4byte	.LASF75
 11776 103c 01       		.byte	0x1
 11777 103d FE03     		.2byte	0x3fe
 11778 103f BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 259


 11779 1043 02       		.uleb128 0x2
 11780 1044 91       		.byte	0x91
 11781 1045 48       		.sleb128 -56
 11782 1046 1B       		.uleb128 0x1b
 11783 1047 C5050000 		.4byte	.LASF76
 11784 104b 01       		.byte	0x1
 11785 104c FF03     		.2byte	0x3ff
 11786 104e BD000000 		.4byte	0xbd
 11787 1052 02       		.uleb128 0x2
 11788 1053 91       		.byte	0x91
 11789 1054 44       		.sleb128 -60
 11790 1055 1B       		.uleb128 0x1b
 11791 1056 520E0000 		.4byte	.LASF77
 11792 105a 01       		.byte	0x1
 11793 105b 0004     		.2byte	0x400
 11794 105d BD000000 		.4byte	0xbd
 11795 1061 02       		.uleb128 0x2
 11796 1062 91       		.byte	0x91
 11797 1063 40       		.sleb128 -64
 11798 1064 1B       		.uleb128 0x1b
 11799 1065 D3050000 		.4byte	.LASF78
 11800 1069 01       		.byte	0x1
 11801 106a 0204     		.2byte	0x402
 11802 106c BD000000 		.4byte	0xbd
 11803 1070 03       		.uleb128 0x3
 11804 1071 91       		.byte	0x91
 11805 1072 BC7F     		.sleb128 -68
 11806 1074 1B       		.uleb128 0x1b
 11807 1075 0D070000 		.4byte	.LASF79
 11808 1079 01       		.byte	0x1
 11809 107a 0304     		.2byte	0x403
 11810 107c BD000000 		.4byte	0xbd
 11811 1080 03       		.uleb128 0x3
 11812 1081 91       		.byte	0x91
 11813 1082 B87F     		.sleb128 -72
 11814 1084 1B       		.uleb128 0x1b
 11815 1085 C3110000 		.4byte	.LASF80
 11816 1089 01       		.byte	0x1
 11817 108a 0404     		.2byte	0x404
 11818 108c BD000000 		.4byte	0xbd
 11819 1090 03       		.uleb128 0x3
 11820 1091 91       		.byte	0x91
 11821 1092 B47F     		.sleb128 -76
 11822 1094 1B       		.uleb128 0x1b
 11823 1095 A0050000 		.4byte	.LASF218
 11824 1099 01       		.byte	0x1
 11825 109a 0804     		.2byte	0x408
 11826 109c BD000000 		.4byte	0xbd
 11827 10a0 05       		.uleb128 0x5
 11828 10a1 03       		.byte	0x3
 11829 10a2 90000000 		.4byte	pos_error_sum.10555
 11830 10a6 1B       		.uleb128 0x1b
 11831 10a7 1F040000 		.4byte	.LASF219
 11832 10ab 01       		.byte	0x1
 11833 10ac 0904     		.2byte	0x409
 11834 10ae BD000000 		.4byte	0xbd
 11835 10b2 05       		.uleb128 0x5
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 260


 11836 10b3 03       		.byte	0x3
 11837 10b4 9C000000 		.4byte	curr_error_sum.10556
 11838 10b8 1B       		.uleb128 0x1b
 11839 10b9 160B0000 		.4byte	.LASF220
 11840 10bd 01       		.byte	0x1
 11841 10be 0B04     		.2byte	0x40b
 11842 10c0 BD000000 		.4byte	0xbd
 11843 10c4 05       		.uleb128 0x5
 11844 10c5 03       		.byte	0x3
 11845 10c6 94000000 		.4byte	prev_pos_err.10557
 11846 10ca 1B       		.uleb128 0x1b
 11847 10cb 500C0000 		.4byte	.LASF221
 11848 10cf 01       		.byte	0x1
 11849 10d0 0C04     		.2byte	0x40c
 11850 10d2 BD000000 		.4byte	0xbd
 11851 10d6 05       		.uleb128 0x5
 11852 10d7 03       		.byte	0x3
 11853 10d8 A0000000 		.4byte	prev_curr_err.10558
 11854 10dc 1B       		.uleb128 0x1b
 11855 10dd B50E0000 		.4byte	.LASF222
 11856 10e1 01       		.byte	0x1
 11857 10e2 0D04     		.2byte	0x40d
 11858 10e4 BD000000 		.4byte	0xbd
 11859 10e8 05       		.uleb128 0x5
 11860 10e9 03       		.byte	0x3
 11861 10ea A4000000 		.4byte	prev_pwm.10559
 11862 10ee 1B       		.uleb128 0x1b
 11863 10ef 2F050000 		.4byte	.LASF223
 11864 10f3 01       		.byte	0x1
 11865 10f4 0F04     		.2byte	0x40f
 11866 10f6 81000000 		.4byte	0x81
 11867 10fa 05       		.uleb128 0x5
 11868 10fb 03       		.byte	0x3
 11869 10fc 98000000 		.4byte	motor_dir.10560
 11870 1100 1B       		.uleb128 0x1b
 11871 1101 F8050000 		.4byte	.LASF224
 11872 1105 01       		.byte	0x1
 11873 1106 1004     		.2byte	0x410
 11874 1108 99000000 		.4byte	0x99
 11875 110c 05       		.uleb128 0x5
 11876 110d 03       		.byte	0x3
 11877 110e A8000000 		.4byte	position_counter.10561
 11878 1112 00       		.byte	0
 11879 1113 1A       		.uleb128 0x1a
 11880 1114 DB040000 		.4byte	.LASF225
 11881 1118 01       		.byte	0x1
 11882 1119 1A05     		.2byte	0x51a
 11883 111b 00000000 		.4byte	.LFB72
 11884 111f 44080000 		.4byte	.LFE72-.LFB72
 11885 1123 01       		.uleb128 0x1
 11886 1124 9C       		.byte	0x9c
 11887 1125 CC120000 		.4byte	0x12cc
 11888 1129 25       		.uleb128 0x25
 11889 112a 69647800 		.ascii	"idx\000"
 11890 112e 01       		.byte	0x1
 11891 112f 1A05     		.2byte	0x51a
 11892 1131 81000000 		.4byte	0x81
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 261


 11893 1135 03       		.uleb128 0x3
 11894 1136 91       		.byte	0x91
 11895 1137 A77F     		.sleb128 -89
 11896 1139 1B       		.uleb128 0x1b
 11897 113a 20010000 		.4byte	.LASF212
 11898 113e 01       		.byte	0x1
 11899 113f 1C05     		.2byte	0x51c
 11900 1141 BD000000 		.4byte	0xbd
 11901 1145 02       		.uleb128 0x2
 11902 1146 91       		.byte	0x91
 11903 1147 6C       		.sleb128 -20
 11904 1148 1B       		.uleb128 0x1b
 11905 1149 6B0B0000 		.4byte	.LASF213
 11906 114d 01       		.byte	0x1
 11907 114e 1D05     		.2byte	0x51d
 11908 1150 BD000000 		.4byte	0xbd
 11909 1154 03       		.uleb128 0x3
 11910 1155 91       		.byte	0x91
 11911 1156 AC7F     		.sleb128 -84
 11912 1158 1B       		.uleb128 0x1b
 11913 1159 460F0000 		.4byte	.LASF214
 11914 115d 01       		.byte	0x1
 11915 115e 1E05     		.2byte	0x51e
 11916 1160 BD000000 		.4byte	0xbd
 11917 1164 03       		.uleb128 0x3
 11918 1165 91       		.byte	0x91
 11919 1166 A87F     		.sleb128 -88
 11920 1168 1B       		.uleb128 0x1b
 11921 1169 BE0A0000 		.4byte	.LASF215
 11922 116d 01       		.byte	0x1
 11923 116e 1F05     		.2byte	0x51f
 11924 1170 BD000000 		.4byte	0xbd
 11925 1174 02       		.uleb128 0x2
 11926 1175 91       		.byte	0x91
 11927 1176 68       		.sleb128 -24
 11928 1177 1D       		.uleb128 0x1d
 11929 1178 4D4F5400 		.ascii	"MOT\000"
 11930 117c 01       		.byte	0x1
 11931 117d 2105     		.2byte	0x521
 11932 117f 520E0000 		.4byte	0xe52
 11933 1183 02       		.uleb128 0x2
 11934 1184 91       		.byte	0x91
 11935 1185 64       		.sleb128 -28
 11936 1186 1B       		.uleb128 0x1b
 11937 1187 35100000 		.4byte	.LASF201
 11938 118b 01       		.byte	0x1
 11939 118c 2205     		.2byte	0x522
 11940 118e 81000000 		.4byte	0x81
 11941 1192 02       		.uleb128 0x2
 11942 1193 91       		.byte	0x91
 11943 1194 63       		.sleb128 -29
 11944 1195 1D       		.uleb128 0x1d
 11945 1196 6B5F7000 		.ascii	"k_p\000"
 11946 119a 01       		.byte	0x1
 11947 119b 2405     		.2byte	0x524
 11948 119d BD000000 		.4byte	0xbd
 11949 11a1 02       		.uleb128 0x2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 262


 11950 11a2 91       		.byte	0x91
 11951 11a3 5C       		.sleb128 -36
 11952 11a4 1D       		.uleb128 0x1d
 11953 11a5 6B5F6900 		.ascii	"k_i\000"
 11954 11a9 01       		.byte	0x1
 11955 11aa 2505     		.2byte	0x525
 11956 11ac BD000000 		.4byte	0xbd
 11957 11b0 02       		.uleb128 0x2
 11958 11b1 91       		.byte	0x91
 11959 11b2 58       		.sleb128 -40
 11960 11b3 1D       		.uleb128 0x1d
 11961 11b4 6B5F6400 		.ascii	"k_d\000"
 11962 11b8 01       		.byte	0x1
 11963 11b9 2605     		.2byte	0x526
 11964 11bb BD000000 		.4byte	0xbd
 11965 11bf 02       		.uleb128 0x2
 11966 11c0 91       		.byte	0x91
 11967 11c1 54       		.sleb128 -44
 11968 11c2 1B       		.uleb128 0x1b
 11969 11c3 710C0000 		.4byte	.LASF72
 11970 11c7 01       		.byte	0x1
 11971 11c8 2805     		.2byte	0x528
 11972 11ca BD000000 		.4byte	0xbd
 11973 11ce 02       		.uleb128 0x2
 11974 11cf 91       		.byte	0x91
 11975 11d0 50       		.sleb128 -48
 11976 11d1 1B       		.uleb128 0x1b
 11977 11d2 29050000 		.4byte	.LASF73
 11978 11d6 01       		.byte	0x1
 11979 11d7 2905     		.2byte	0x529
 11980 11d9 BD000000 		.4byte	0xbd
 11981 11dd 02       		.uleb128 0x2
 11982 11de 91       		.byte	0x91
 11983 11df 4C       		.sleb128 -52
 11984 11e0 1B       		.uleb128 0x1b
 11985 11e1 11050000 		.4byte	.LASF74
 11986 11e5 01       		.byte	0x1
 11987 11e6 2A05     		.2byte	0x52a
 11988 11e8 BD000000 		.4byte	0xbd
 11989 11ec 02       		.uleb128 0x2
 11990 11ed 91       		.byte	0x91
 11991 11ee 48       		.sleb128 -56
 11992 11ef 1B       		.uleb128 0x1b
 11993 11f0 1F0F0000 		.4byte	.LASF75
 11994 11f4 01       		.byte	0x1
 11995 11f5 2C05     		.2byte	0x52c
 11996 11f7 BD000000 		.4byte	0xbd
 11997 11fb 02       		.uleb128 0x2
 11998 11fc 91       		.byte	0x91
 11999 11fd 44       		.sleb128 -60
 12000 11fe 1B       		.uleb128 0x1b
 12001 11ff C5050000 		.4byte	.LASF76
 12002 1203 01       		.byte	0x1
 12003 1204 2D05     		.2byte	0x52d
 12004 1206 BD000000 		.4byte	0xbd
 12005 120a 02       		.uleb128 0x2
 12006 120b 91       		.byte	0x91
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 263


 12007 120c 40       		.sleb128 -64
 12008 120d 1B       		.uleb128 0x1b
 12009 120e 520E0000 		.4byte	.LASF77
 12010 1212 01       		.byte	0x1
 12011 1213 2E05     		.2byte	0x52e
 12012 1215 BD000000 		.4byte	0xbd
 12013 1219 03       		.uleb128 0x3
 12014 121a 91       		.byte	0x91
 12015 121b BC7F     		.sleb128 -68
 12016 121d 1B       		.uleb128 0x1b
 12017 121e D3050000 		.4byte	.LASF78
 12018 1222 01       		.byte	0x1
 12019 1223 3005     		.2byte	0x530
 12020 1225 BD000000 		.4byte	0xbd
 12021 1229 03       		.uleb128 0x3
 12022 122a 91       		.byte	0x91
 12023 122b B87F     		.sleb128 -72
 12024 122d 1B       		.uleb128 0x1b
 12025 122e 0D070000 		.4byte	.LASF79
 12026 1232 01       		.byte	0x1
 12027 1233 3105     		.2byte	0x531
 12028 1235 BD000000 		.4byte	0xbd
 12029 1239 03       		.uleb128 0x3
 12030 123a 91       		.byte	0x91
 12031 123b B47F     		.sleb128 -76
 12032 123d 1B       		.uleb128 0x1b
 12033 123e C3110000 		.4byte	.LASF80
 12034 1242 01       		.byte	0x1
 12035 1243 3205     		.2byte	0x532
 12036 1245 BD000000 		.4byte	0xbd
 12037 1249 03       		.uleb128 0x3
 12038 124a 91       		.byte	0x91
 12039 124b B07F     		.sleb128 -80
 12040 124d 1B       		.uleb128 0x1b
 12041 124e A0050000 		.4byte	.LASF218
 12042 1252 01       		.byte	0x1
 12043 1253 3605     		.2byte	0x536
 12044 1255 94020000 		.4byte	0x294
 12045 1259 05       		.uleb128 0x5
 12046 125a 03       		.byte	0x3
 12047 125b AC000000 		.4byte	pos_error_sum.10588
 12048 125f 1B       		.uleb128 0x1b
 12049 1260 1F040000 		.4byte	.LASF219
 12050 1264 01       		.byte	0x1
 12051 1265 3705     		.2byte	0x537
 12052 1267 94020000 		.4byte	0x294
 12053 126b 05       		.uleb128 0x5
 12054 126c 03       		.byte	0x3
 12055 126d C0000000 		.4byte	curr_error_sum.10589
 12056 1271 1B       		.uleb128 0x1b
 12057 1272 160B0000 		.4byte	.LASF220
 12058 1276 01       		.byte	0x1
 12059 1277 3905     		.2byte	0x539
 12060 1279 94020000 		.4byte	0x294
 12061 127d 05       		.uleb128 0x5
 12062 127e 03       		.byte	0x3
 12063 127f B4000000 		.4byte	prev_pos_err.10590
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 264


 12064 1283 1B       		.uleb128 0x1b
 12065 1284 500C0000 		.4byte	.LASF221
 12066 1288 01       		.byte	0x1
 12067 1289 3A05     		.2byte	0x53a
 12068 128b 94020000 		.4byte	0x294
 12069 128f 05       		.uleb128 0x5
 12070 1290 03       		.byte	0x3
 12071 1291 C8000000 		.4byte	prev_curr_err.10591
 12072 1295 1B       		.uleb128 0x1b
 12073 1296 B50E0000 		.4byte	.LASF222
 12074 129a 01       		.byte	0x1
 12075 129b 3B05     		.2byte	0x53b
 12076 129d 94020000 		.4byte	0x294
 12077 12a1 05       		.uleb128 0x5
 12078 12a2 03       		.byte	0x3
 12079 12a3 D0000000 		.4byte	prev_pwm.10592
 12080 12a7 1B       		.uleb128 0x1b
 12081 12a8 2F050000 		.4byte	.LASF223
 12082 12ac 01       		.byte	0x1
 12083 12ad 3D05     		.2byte	0x53d
 12084 12af EA060000 		.4byte	0x6ea
 12085 12b3 05       		.uleb128 0x5
 12086 12b4 03       		.byte	0x3
 12087 12b5 BC000000 		.4byte	motor_dir.10593
 12088 12b9 1B       		.uleb128 0x1b
 12089 12ba F8050000 		.4byte	.LASF224
 12090 12be 01       		.byte	0x1
 12091 12bf 3E05     		.2byte	0x53e
 12092 12c1 6F030000 		.4byte	0x36f
 12093 12c5 05       		.uleb128 0x5
 12094 12c6 03       		.byte	0x3
 12095 12c7 D8000000 		.4byte	position_counter.10594
 12096 12cb 00       		.byte	0
 12097 12cc 1A       		.uleb128 0x1a
 12098 12cd 55030000 		.4byte	.LASF226
 12099 12d1 01       		.byte	0x1
 12100 12d2 6806     		.2byte	0x668
 12101 12d4 00000000 		.4byte	.LFB73
 12102 12d8 1C080000 		.4byte	.LFE73-.LFB73
 12103 12dc 01       		.uleb128 0x1
 12104 12dd 9C       		.byte	0x9c
 12105 12de 66140000 		.4byte	0x1466
 12106 12e2 20       		.uleb128 0x20
 12107 12e3 9B000000 		.4byte	.LASF227
 12108 12e7 01       		.byte	0x1
 12109 12e8 6806     		.2byte	0x668
 12110 12ea 81000000 		.4byte	0x81
 12111 12ee 03       		.uleb128 0x3
 12112 12ef 91       		.byte	0x91
 12113 12f0 BF7F     		.sleb128 -65
 12114 12f2 20       		.uleb128 0x20
 12115 12f3 AA0A0000 		.4byte	.LASF228
 12116 12f7 01       		.byte	0x1
 12117 12f8 6806     		.2byte	0x668
 12118 12fa 81000000 		.4byte	0x81
 12119 12fe 03       		.uleb128 0x3
 12120 12ff 91       		.byte	0x91
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 265


 12121 1300 BE7F     		.sleb128 -66
 12122 1302 1B       		.uleb128 0x1b
 12123 1303 C8060000 		.4byte	.LASF229
 12124 1307 01       		.byte	0x1
 12125 1308 6A06     		.2byte	0x66a
 12126 130a 81000000 		.4byte	0x81
 12127 130e 02       		.uleb128 0x2
 12128 130f 91       		.byte	0x91
 12129 1310 67       		.sleb128 -25
 12130 1311 1D       		.uleb128 0x1d
 12131 1312 6A6A00   		.ascii	"jj\000"
 12132 1315 01       		.byte	0x1
 12133 1316 6D06     		.2byte	0x66d
 12134 1318 81000000 		.4byte	0x81
 12135 131c 02       		.uleb128 0x2
 12136 131d 91       		.byte	0x91
 12137 131e 66       		.sleb128 -26
 12138 131f 1B       		.uleb128 0x1b
 12139 1320 2E030000 		.4byte	.LASF230
 12140 1324 01       		.byte	0x1
 12141 1325 6F06     		.2byte	0x66f
 12142 1327 66140000 		.4byte	0x1466
 12143 132b 02       		.uleb128 0x2
 12144 132c 91       		.byte	0x91
 12145 132d 40       		.sleb128 -64
 12146 132e 1B       		.uleb128 0x1b
 12147 132f A60F0000 		.4byte	.LASF231
 12148 1333 01       		.byte	0x1
 12149 1334 7006     		.2byte	0x670
 12150 1336 B1000000 		.4byte	0xb1
 12151 133a 02       		.uleb128 0x2
 12152 133b 91       		.byte	0x91
 12153 133c 64       		.sleb128 -28
 12154 133d 1B       		.uleb128 0x1b
 12155 133e 3B0C0000 		.4byte	.LASF232
 12156 1342 01       		.byte	0x1
 12157 1343 7106     		.2byte	0x671
 12158 1345 BD000000 		.4byte	0xbd
 12159 1349 02       		.uleb128 0x2
 12160 134a 91       		.byte	0x91
 12161 134b 54       		.sleb128 -44
 12162 134c 1B       		.uleb128 0x1b
 12163 134d 590E0000 		.4byte	.LASF233
 12164 1351 01       		.byte	0x1
 12165 1352 7206     		.2byte	0x672
 12166 1354 BD000000 		.4byte	0xbd
 12167 1358 02       		.uleb128 0x2
 12168 1359 91       		.byte	0x91
 12169 135a 60       		.sleb128 -32
 12170 135b 1B       		.uleb128 0x1b
 12171 135c 68040000 		.4byte	.LASF234
 12172 1360 01       		.byte	0x1
 12173 1361 7306     		.2byte	0x673
 12174 1363 BD000000 		.4byte	0xbd
 12175 1367 02       		.uleb128 0x2
 12176 1368 91       		.byte	0x91
 12177 1369 4C       		.sleb128 -52
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 266


 12178 136a 1B       		.uleb128 0x1b
 12179 136b 340E0000 		.4byte	.LASF235
 12180 136f 01       		.byte	0x1
 12181 1370 7406     		.2byte	0x674
 12182 1372 BD000000 		.4byte	0xbd
 12183 1376 02       		.uleb128 0x2
 12184 1377 91       		.byte	0x91
 12185 1378 50       		.sleb128 -48
 12186 1379 1B       		.uleb128 0x1b
 12187 137a 230B0000 		.4byte	.LASF236
 12188 137e 01       		.byte	0x1
 12189 137f 7506     		.2byte	0x675
 12190 1381 A5000000 		.4byte	0xa5
 12191 1385 02       		.uleb128 0x2
 12192 1386 91       		.byte	0x91
 12193 1387 5F       		.sleb128 -33
 12194 1388 1B       		.uleb128 0x1b
 12195 1389 B60B0000 		.4byte	.LASF237
 12196 138d 01       		.byte	0x1
 12197 138e 7706     		.2byte	0x677
 12198 1390 76140000 		.4byte	0x1476
 12199 1394 05       		.uleb128 0x5
 12200 1395 03       		.byte	0x3
 12201 1396 E0000000 		.4byte	last_value_encoder.10617
 12202 139a 1B       		.uleb128 0x1b
 12203 139b 8A060000 		.4byte	.LASF238
 12204 139f 01       		.byte	0x1
 12205 13a0 7806     		.2byte	0x678
 12206 13a2 76140000 		.4byte	0x1476
 12207 13a6 05       		.uleb128 0x5
 12208 13a7 03       		.byte	0x3
 12209 13a8 F8000000 		.4byte	comp_value_encoder.10618
 12210 13ac 1B       		.uleb128 0x1b
 12211 13ad 69030000 		.4byte	.LASF239
 12212 13b1 01       		.byte	0x1
 12213 13b2 7906     		.2byte	0x679
 12214 13b4 8C140000 		.4byte	0x148c
 12215 13b8 05       		.uleb128 0x5
 12216 13b9 03       		.byte	0x3
 12217 13ba 10010000 		.4byte	error.10619
 12218 13be 1B       		.uleb128 0x1b
 12219 13bf 120E0000 		.4byte	.LASF240
 12220 13c3 01       		.byte	0x1
 12221 13c4 7B06     		.2byte	0x67b
 12222 13c6 EA060000 		.4byte	0x6ea
 12223 13ca 05       		.uleb128 0x5
 12224 13cb 03       		.byte	0x3
 12225 13cc 04000000 		.4byte	only_first_time.10620
 12226 13d0 1B       		.uleb128 0x1b
 12227 13d1 E9020000 		.4byte	.LASF241
 12228 13d5 01       		.byte	0x1
 12229 13d6 7C06     		.2byte	0x67c
 12230 13d8 EA060000 		.4byte	0x6ea
 12231 13dc 05       		.uleb128 0x5
 12232 13dd 03       		.byte	0x3
 12233 13de 68010000 		.4byte	safe_startup_motor_activation.10621
 12234 13e2 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 267


 12235 13e3 7B000000 		.4byte	.LASF242
 12236 13e7 01       		.byte	0x1
 12237 13e8 7D06     		.2byte	0x67d
 12238 13ea EA060000 		.4byte	0x6ea
 12239 13ee 05       		.uleb128 0x5
 12240 13ef 03       		.byte	0x3
 12241 13f0 64010000 		.4byte	one_time_execute.10622
 12242 13f4 1B       		.uleb128 0x1b
 12243 13f5 DA090000 		.4byte	.LASF243
 12244 13f9 01       		.byte	0x1
 12245 13fa 7E06     		.2byte	0x67e
 12246 13fc 6F030000 		.4byte	0x36f
 12247 1400 05       		.uleb128 0x5
 12248 1401 03       		.byte	0x3
 12249 1402 6C010000 		.4byte	count_startup_motor.10623
 12250 1406 1B       		.uleb128 0x1b
 12251 1407 90030000 		.4byte	.LASF244
 12252 140b 01       		.byte	0x1
 12253 140c 7F06     		.2byte	0x67f
 12254 140e EA060000 		.4byte	0x6ea
 12255 1412 05       		.uleb128 0x5
 12256 1413 03       		.byte	0x3
 12257 1414 60010000 		.4byte	pos_reconstruct.10624
 12258 1418 1B       		.uleb128 0x1b
 12259 1419 FB080000 		.4byte	.LASF245
 12260 141d 01       		.byte	0x1
 12261 141e 8106     		.2byte	0x681
 12262 1420 76140000 		.4byte	0x1476
 12263 1424 05       		.uleb128 0x5
 12264 1425 03       		.byte	0x3
 12265 1426 18010000 		.4byte	v_value.10625
 12266 142a 1B       		.uleb128 0x1b
 12267 142b BA110000 		.4byte	.LASF246
 12268 142f 01       		.byte	0x1
 12269 1430 8206     		.2byte	0x682
 12270 1432 76140000 		.4byte	0x1476
 12271 1436 05       		.uleb128 0x5
 12272 1437 03       		.byte	0x3
 12273 1438 30010000 		.4byte	vv_value.10626
 12274 143c 1B       		.uleb128 0x1b
 12275 143d 6E010000 		.4byte	.LASF247
 12276 1441 01       		.byte	0x1
 12277 1442 8306     		.2byte	0x683
 12278 1444 76140000 		.4byte	0x1476
 12279 1448 05       		.uleb128 0x5
 12280 1449 03       		.byte	0x3
 12281 144a 48010000 		.4byte	vvv_value.10627
 12282 144e 1E       		.uleb128 0x1e
 12283 144f 94000000 		.4byte	.LBB10
 12284 1453 6A000000 		.4byte	.LBE10-.LBB10
 12285 1457 1D       		.uleb128 0x1d
 12286 1458 6A00     		.ascii	"j\000"
 12287 145a 01       		.byte	0x1
 12288 145b 9306     		.2byte	0x693
 12289 145d 68000000 		.4byte	0x68
 12290 1461 02       		.uleb128 0x2
 12291 1462 91       		.byte	0x91
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 268


 12292 1463 58       		.sleb128 -40
 12293 1464 00       		.byte	0
 12294 1465 00       		.byte	0
 12295 1466 07       		.uleb128 0x7
 12296 1467 99000000 		.4byte	0x99
 12297 146b 76140000 		.4byte	0x1476
 12298 146f 08       		.uleb128 0x8
 12299 1470 0E010000 		.4byte	0x10e
 12300 1474 02       		.byte	0x2
 12301 1475 00       		.byte	0
 12302 1476 07       		.uleb128 0x7
 12303 1477 BD000000 		.4byte	0xbd
 12304 147b 8C140000 		.4byte	0x148c
 12305 147f 08       		.uleb128 0x8
 12306 1480 0E010000 		.4byte	0x10e
 12307 1484 01       		.byte	0x1
 12308 1485 08       		.uleb128 0x8
 12309 1486 0E010000 		.4byte	0x10e
 12310 148a 02       		.byte	0x2
 12311 148b 00       		.byte	0
 12312 148c 07       		.uleb128 0x7
 12313 148d 81000000 		.4byte	0x81
 12314 1491 A2140000 		.4byte	0x14a2
 12315 1495 08       		.uleb128 0x8
 12316 1496 0E010000 		.4byte	0x10e
 12317 149a 01       		.byte	0x1
 12318 149b 08       		.uleb128 0x8
 12319 149c 0E010000 		.4byte	0x10e
 12320 14a0 02       		.byte	0x2
 12321 14a1 00       		.byte	0
 12322 14a2 24       		.uleb128 0x24
 12323 14a3 0F0D0000 		.4byte	.LASF248
 12324 14a7 01       		.byte	0x1
 12325 14a8 3B07     		.2byte	0x73b
 12326 14aa 00000000 		.4byte	.LFB74
 12327 14ae C8110000 		.4byte	.LFE74-.LFB74
 12328 14b2 01       		.uleb128 0x1
 12329 14b3 9C       		.byte	0x9c
 12330 14b4 7C150000 		.4byte	0x157c
 12331 14b8 1B       		.uleb128 0x1b
 12332 14b9 AF0C0000 		.4byte	.LASF249
 12333 14bd 01       		.byte	0x1
 12334 14be 4F07     		.2byte	0x74f
 12335 14c0 BD000000 		.4byte	0xbd
 12336 14c4 02       		.uleb128 0x2
 12337 14c5 91       		.byte	0x91
 12338 14c6 64       		.sleb128 -28
 12339 14c7 1B       		.uleb128 0x1b
 12340 14c8 F60D0000 		.4byte	.LASF250
 12341 14cc 01       		.byte	0x1
 12342 14cd 5107     		.2byte	0x751
 12343 14cf 8D000000 		.4byte	0x8d
 12344 14d3 05       		.uleb128 0x5
 12345 14d4 03       		.byte	0x3
 12346 14d5 7C010000 		.4byte	emg_counter_1.10644
 12347 14d9 1B       		.uleb128 0x1b
 12348 14da 040E0000 		.4byte	.LASF251
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 269


 12349 14de 01       		.byte	0x1
 12350 14df 5207     		.2byte	0x752
 12351 14e1 8D000000 		.4byte	0x8d
 12352 14e5 05       		.uleb128 0x5
 12353 14e6 03       		.byte	0x3
 12354 14e7 7E010000 		.4byte	emg_counter_2.10645
 12355 14eb 1B       		.uleb128 0x1b
 12356 14ec 32020000 		.4byte	.LASF252
 12357 14f0 01       		.byte	0x1
 12358 14f1 5307     		.2byte	0x753
 12359 14f3 8D000000 		.4byte	0x8d
 12360 14f7 05       		.uleb128 0x5
 12361 14f8 03       		.byte	0x3
 12362 14f9 84010000 		.4byte	UD_counter.10646
 12363 14fd 1B       		.uleb128 0x1b
 12364 14fe 85030000 		.4byte	.LASF253
 12365 1502 01       		.byte	0x1
 12366 1503 5407     		.2byte	0x754
 12367 1505 8D000000 		.4byte	0x8d
 12368 1509 05       		.uleb128 0x5
 12369 150a 03       		.byte	0x3
 12370 150b 8C010000 		.4byte	LR_counter.10647
 12371 150f 1B       		.uleb128 0x1b
 12372 1510 9C0A0000 		.4byte	.LASF254
 12373 1514 01       		.byte	0x1
 12374 1515 5507     		.2byte	0x755
 12375 1517 BD000000 		.4byte	0xbd
 12376 151b 05       		.uleb128 0x5
 12377 151c 03       		.byte	0x3
 12378 151d 80010000 		.4byte	UD_mean_value.10648
 12379 1521 1B       		.uleb128 0x1b
 12380 1522 BB100000 		.4byte	.LASF255
 12381 1526 01       		.byte	0x1
 12382 1527 5607     		.2byte	0x756
 12383 1529 BD000000 		.4byte	0xbd
 12384 152d 05       		.uleb128 0x5
 12385 152e 03       		.byte	0x3
 12386 152f 88010000 		.4byte	LR_mean_value.10649
 12387 1533 1B       		.uleb128 0x1b
 12388 1534 71020000 		.4byte	.LASF256
 12389 1538 01       		.byte	0x1
 12390 1539 5707     		.2byte	0x757
 12391 153b 81000000 		.4byte	0x81
 12392 153f 05       		.uleb128 0x5
 12393 1540 03       		.byte	0x3
 12394 1541 06000000 		.4byte	first_tension_valid.10650
 12395 1545 1B       		.uleb128 0x1b
 12396 1546 0B0A0000 		.4byte	.LASF257
 12397 154a 01       		.byte	0x1
 12398 154b 5907     		.2byte	0x759
 12399 154d 8D000000 		.4byte	0x8d
 12400 1551 05       		.uleb128 0x5
 12401 1552 03       		.byte	0x3
 12402 1553 74010000 		.4byte	count.10651
 12403 1557 1B       		.uleb128 0x1b
 12404 1558 5E010000 		.4byte	.LASF258
 12405 155c 01       		.byte	0x1
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 270


 12406 155d 5A07     		.2byte	0x75a
 12407 155f 99000000 		.4byte	0x99
 12408 1563 05       		.uleb128 0x5
 12409 1564 03       		.byte	0x3
 12410 1565 78010000 		.4byte	v_count.10652
 12411 1569 1D       		.uleb128 0x1d
 12412 156a 69647800 		.ascii	"idx\000"
 12413 156e 01       		.byte	0x1
 12414 156f 5B07     		.2byte	0x75b
 12415 1571 81000000 		.4byte	0x81
 12416 1575 05       		.uleb128 0x5
 12417 1576 03       		.byte	0x3
 12418 1577 76010000 		.4byte	idx.10653
 12419 157b 00       		.byte	0
 12420 157c 26       		.uleb128 0x26
 12421 157d DA0C0000 		.4byte	.LASF259
 12422 1581 01       		.byte	0x1
 12423 1582 A809     		.2byte	0x9a8
 12424 1584 00000000 		.4byte	.LFB75
 12425 1588 04010000 		.4byte	.LFE75-.LFB75
 12426 158c 01       		.uleb128 0x1
 12427 158d 9C       		.byte	0x9c
 12428 158e C3150000 		.4byte	0x15c3
 12429 1592 1E       		.uleb128 0x1e
 12430 1593 06000000 		.4byte	.LBB11
 12431 1597 E0000000 		.4byte	.LBE11-.LBB11
 12432 159b 1D       		.uleb128 0x1d
 12433 159c 6900     		.ascii	"i\000"
 12434 159e 01       		.byte	0x1
 12435 159f AA09     		.2byte	0x9aa
 12436 15a1 81000000 		.4byte	0x81
 12437 15a5 02       		.uleb128 0x2
 12438 15a6 91       		.byte	0x91
 12439 15a7 77       		.sleb128 -9
 12440 15a8 1E       		.uleb128 0x1e
 12441 15a9 26000000 		.4byte	.LBB12
 12442 15ad B4000000 		.4byte	.LBE12-.LBB12
 12443 15b1 1B       		.uleb128 0x1b
 12444 15b2 11080000 		.4byte	.LASF40
 12445 15b6 01       		.byte	0x1
 12446 15b7 AC09     		.2byte	0x9ac
 12447 15b9 BD000000 		.4byte	0xbd
 12448 15bd 02       		.uleb128 0x2
 12449 15be 91       		.byte	0x91
 12450 15bf 70       		.sleb128 -16
 12451 15c0 00       		.byte	0
 12452 15c1 00       		.byte	0
 12453 15c2 00       		.byte	0
 12454 15c3 22       		.uleb128 0x22
 12455 15c4 A0030000 		.4byte	.LASF260
 12456 15c8 01       		.byte	0x1
 12457 15c9 CA09     		.2byte	0x9ca
 12458 15cb 00000000 		.4byte	.LFB76
 12459 15cf 78000000 		.4byte	.LFE76-.LFB76
 12460 15d3 01       		.uleb128 0x1
 12461 15d4 9C       		.byte	0x9c
 12462 15d5 16160000 		.4byte	0x1616
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 271


 12463 15d9 20       		.uleb128 0x20
 12464 15da 2C0B0000 		.4byte	.LASF261
 12465 15de 01       		.byte	0x1
 12466 15df CA09     		.2byte	0x9ca
 12467 15e1 81000000 		.4byte	0x81
 12468 15e5 02       		.uleb128 0x2
 12469 15e6 91       		.byte	0x91
 12470 15e7 6F       		.sleb128 -17
 12471 15e8 1B       		.uleb128 0x1b
 12472 15e9 C8060000 		.4byte	.LASF229
 12473 15ed 01       		.byte	0x1
 12474 15ee CC09     		.2byte	0x9cc
 12475 15f0 81000000 		.4byte	0x81
 12476 15f4 02       		.uleb128 0x2
 12477 15f5 91       		.byte	0x91
 12478 15f6 73       		.sleb128 -13
 12479 15f7 1B       		.uleb128 0x1b
 12480 15f8 A00B0000 		.4byte	.LASF262
 12481 15fc 01       		.byte	0x1
 12482 15fd CD09     		.2byte	0x9cd
 12483 15ff 8D000000 		.4byte	0x8d
 12484 1603 02       		.uleb128 0x2
 12485 1604 91       		.byte	0x91
 12486 1605 76       		.sleb128 -10
 12487 1606 1B       		.uleb128 0x1b
 12488 1607 BB070000 		.4byte	.LASF263
 12489 160b 01       		.byte	0x1
 12490 160c CE09     		.2byte	0x9ce
 12491 160e 8D000000 		.4byte	0x8d
 12492 1612 02       		.uleb128 0x2
 12493 1613 91       		.byte	0x91
 12494 1614 74       		.sleb128 -12
 12495 1615 00       		.byte	0
 12496 1616 24       		.uleb128 0x24
 12497 1617 38080000 		.4byte	.LASF264
 12498 161b 01       		.byte	0x1
 12499 161c DE09     		.2byte	0x9de
 12500 161e 00000000 		.4byte	.LFB77
 12501 1622 0C040000 		.4byte	.LFE77-.LFB77
 12502 1626 01       		.uleb128 0x1
 12503 1627 9C       		.byte	0x9c
 12504 1628 42170000 		.4byte	0x1742
 12505 162c 1B       		.uleb128 0x1b
 12506 162d 09000000 		.4byte	.LASF265
 12507 1631 01       		.byte	0x1
 12508 1632 DF09     		.2byte	0x9df
 12509 1634 81000000 		.4byte	0x81
 12510 1638 05       		.uleb128 0x5
 12511 1639 03       		.byte	0x3
 12512 163a 8E010000 		.4byte	pos_cycle_status.10724
 12513 163e 1B       		.uleb128 0x1b
 12514 163f 410D0000 		.4byte	.LASF266
 12515 1643 01       		.byte	0x1
 12516 1644 E009     		.2byte	0x9e0
 12517 1646 EA060000 		.4byte	0x6ea
 12518 164a 05       		.uleb128 0x5
 12519 164b 03       		.byte	0x3
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 272


 12520 164c 98010000 		.4byte	emg_cycle_status.10725
 12521 1650 1B       		.uleb128 0x1b
 12522 1651 670F0000 		.4byte	.LASF267
 12523 1655 01       		.byte	0x1
 12524 1656 E109     		.2byte	0x9e1
 12525 1658 81000000 		.4byte	0x81
 12526 165c 05       		.uleb128 0x5
 12527 165d 03       		.byte	0x3
 12528 165e 9A010000 		.4byte	rest_cycle_status.10726
 12529 1662 1B       		.uleb128 0x1b
 12530 1663 D2020000 		.4byte	.LASF268
 12531 1667 01       		.byte	0x1
 12532 1668 E209     		.2byte	0x9e2
 12533 166a BD000000 		.4byte	0xbd
 12534 166e 05       		.uleb128 0x5
 12535 166f 03       		.byte	0x3
 12536 1670 08000000 		.4byte	bin_threshold.10727
 12537 1674 1B       		.uleb128 0x1b
 12538 1675 B9010000 		.4byte	.LASF269
 12539 1679 01       		.byte	0x1
 12540 167a E309     		.2byte	0x9e3
 12541 167c BD000000 		.4byte	0xbd
 12542 1680 05       		.uleb128 0x5
 12543 1681 03       		.byte	0x3
 12544 1682 90010000 		.4byte	thr_pos.10728
 12545 1686 1B       		.uleb128 0x1b
 12546 1687 370A0000 		.4byte	.LASF270
 12547 168b 01       		.byte	0x1
 12548 168c E309     		.2byte	0x9e3
 12549 168e BD000000 		.4byte	0xbd
 12550 1692 05       		.uleb128 0x5
 12551 1693 03       		.byte	0x3
 12552 1694 94010000 		.4byte	max_pos.10729
 12553 1698 1D       		.uleb128 0x1d
 12554 1699 6900     		.ascii	"i\000"
 12555 169b 01       		.byte	0x1
 12556 169c E409     		.2byte	0x9e4
 12557 169e 81000000 		.4byte	0x81
 12558 16a2 02       		.uleb128 0x2
 12559 16a3 91       		.byte	0x91
 12560 16a4 77       		.sleb128 -9
 12561 16a5 1B       		.uleb128 0x1b
 12562 16a6 39050000 		.4byte	.LASF271
 12563 16aa 01       		.byte	0x1
 12564 16ab E409     		.2byte	0x9e4
 12565 16ad 81000000 		.4byte	0x81
 12566 16b1 02       		.uleb128 0x2
 12567 16b2 91       		.byte	0x91
 12568 16b3 63       		.sleb128 -29
 12569 16b4 1B       		.uleb128 0x1b
 12570 16b5 EB000000 		.4byte	.LASF272
 12571 16b9 01       		.byte	0x1
 12572 16ba E409     		.2byte	0x9e4
 12573 16bc 81000000 		.4byte	0x81
 12574 16c0 02       		.uleb128 0x2
 12575 16c1 91       		.byte	0x91
 12576 16c2 62       		.sleb128 -30
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 273


 12577 16c3 1B       		.uleb128 0x1b
 12578 16c4 A30C0000 		.4byte	.LASF273
 12579 16c8 01       		.byte	0x1
 12580 16c9 E409     		.2byte	0x9e4
 12581 16cb 81000000 		.4byte	0x81
 12582 16cf 02       		.uleb128 0x2
 12583 16d0 91       		.byte	0x91
 12584 16d1 61       		.sleb128 -31
 12585 16d2 1B       		.uleb128 0x1b
 12586 16d3 A90C0000 		.4byte	.LASF274
 12587 16d7 01       		.byte	0x1
 12588 16d8 E409     		.2byte	0x9e4
 12589 16da 81000000 		.4byte	0x81
 12590 16de 02       		.uleb128 0x2
 12591 16df 91       		.byte	0x91
 12592 16e0 60       		.sleb128 -32
 12593 16e1 1B       		.uleb128 0x1b
 12594 16e2 EE0C0000 		.4byte	.LASF275
 12595 16e6 01       		.byte	0x1
 12596 16e7 E509     		.2byte	0x9e5
 12597 16e9 BD000000 		.4byte	0xbd
 12598 16ed 02       		.uleb128 0x2
 12599 16ee 91       		.byte	0x91
 12600 16ef 6C       		.sleb128 -20
 12601 16f0 1B       		.uleb128 0x1b
 12602 16f1 7F040000 		.4byte	.LASF276
 12603 16f5 01       		.byte	0x1
 12604 16f6 E509     		.2byte	0x9e5
 12605 16f8 BD000000 		.4byte	0xbd
 12606 16fc 02       		.uleb128 0x2
 12607 16fd 91       		.byte	0x91
 12608 16fe 68       		.sleb128 -24
 12609 16ff 1B       		.uleb128 0x1b
 12610 1700 3F0E0000 		.4byte	.LASF277
 12611 1704 01       		.byte	0x1
 12612 1705 E509     		.2byte	0x9e5
 12613 1707 BD000000 		.4byte	0xbd
 12614 170b 02       		.uleb128 0x2
 12615 170c 91       		.byte	0x91
 12616 170d 70       		.sleb128 -16
 12617 170e 1B       		.uleb128 0x1b
 12618 170f 1A040000 		.4byte	.LASF278
 12619 1713 01       		.byte	0x1
 12620 1714 E609     		.2byte	0x9e6
 12621 1716 BD000000 		.4byte	0xbd
 12622 171a 02       		.uleb128 0x2
 12623 171b 91       		.byte	0x91
 12624 171c 64       		.sleb128 -28
 12625 171d 1B       		.uleb128 0x1b
 12626 171e 6E060000 		.4byte	.LASF279
 12627 1722 01       		.byte	0x1
 12628 1723 E709     		.2byte	0x9e7
 12629 1725 99000000 		.4byte	0x99
 12630 1729 05       		.uleb128 0x5
 12631 172a 03       		.byte	0x3
 12632 172b 9C010000 		.4byte	timer_value_s.10739
 12633 172f 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 274


 12634 1730 09060000 		.4byte	.LASF280
 12635 1734 01       		.byte	0x1
 12636 1735 E709     		.2byte	0x9e7
 12637 1737 99000000 		.4byte	0x99
 12638 173b 05       		.uleb128 0x5
 12639 173c 03       		.byte	0x3
 12640 173d A0010000 		.4byte	timer_value_e.10740
 12641 1741 00       		.byte	0
 12642 1742 24       		.uleb128 0x24
 12643 1743 D20A0000 		.4byte	.LASF281
 12644 1747 01       		.byte	0x1
 12645 1748 530A     		.2byte	0xa53
 12646 174a 00000000 		.4byte	.LFB78
 12647 174e 08010000 		.4byte	.LFE78-.LFB78
 12648 1752 01       		.uleb128 0x1
 12649 1753 9C       		.byte	0x9c
 12650 1754 C8170000 		.4byte	0x17c8
 12651 1758 1B       		.uleb128 0x1b
 12652 1759 3F0F0000 		.4byte	.LASF282
 12653 175d 01       		.byte	0x1
 12654 175e 550A     		.2byte	0xa55
 12655 1760 EA000000 		.4byte	0xea
 12656 1764 02       		.uleb128 0x2
 12657 1765 91       		.byte	0x91
 12658 1766 64       		.sleb128 -28
 12659 1767 1B       		.uleb128 0x1b
 12660 1768 CF0C0000 		.4byte	.LASF283
 12661 176c 01       		.byte	0x1
 12662 176d 560A     		.2byte	0xa56
 12663 176f 81000000 		.4byte	0x81
 12664 1773 05       		.uleb128 0x5
 12665 1774 03       		.byte	0x3
 12666 1775 A8010000 		.4byte	row_number.10762
 12667 1779 1B       		.uleb128 0x1b
 12668 177a 52040000 		.4byte	.LASF284
 12669 177e 01       		.byte	0x1
 12670 177f 570A     		.2byte	0xa57
 12671 1781 81000000 		.4byte	0x81
 12672 1785 02       		.uleb128 0x2
 12673 1786 91       		.byte	0x91
 12674 1787 77       		.sleb128 -9
 12675 1788 1B       		.uleb128 0x1b
 12676 1789 910D0000 		.4byte	.LASF285
 12677 178d 01       		.byte	0x1
 12678 178e 580A     		.2byte	0xa58
 12679 1790 C8170000 		.4byte	0x17c8
 12680 1794 02       		.uleb128 0x2
 12681 1795 91       		.byte	0x91
 12682 1796 70       		.sleb128 -16
 12683 1797 1B       		.uleb128 0x1b
 12684 1798 F3000000 		.4byte	.LASF286
 12685 179c 01       		.byte	0x1
 12686 179d 590A     		.2byte	0xa59
 12687 179f C8170000 		.4byte	0x17c8
 12688 17a3 02       		.uleb128 0x2
 12689 17a4 91       		.byte	0x91
 12690 17a5 6C       		.sleb128 -20
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 275


 12691 17a6 1B       		.uleb128 0x1b
 12692 17a7 D3100000 		.4byte	.LASF287
 12693 17ab 01       		.byte	0x1
 12694 17ac 5A0A     		.2byte	0xa5a
 12695 17ae 81000000 		.4byte	0x81
 12696 17b2 02       		.uleb128 0x2
 12697 17b3 91       		.byte	0x91
 12698 17b4 6B       		.sleb128 -21
 12699 17b5 1B       		.uleb128 0x1b
 12700 17b6 1D0A0000 		.4byte	.LASF288
 12701 17ba 01       		.byte	0x1
 12702 17bb 5B0A     		.2byte	0xa5b
 12703 17bd C8170000 		.4byte	0x17c8
 12704 17c1 05       		.uleb128 0x5
 12705 17c2 03       		.byte	0x3
 12706 17c3 A4010000 		.4byte	m_addr.10767
 12707 17c7 00       		.byte	0
 12708 17c8 0C       		.uleb128 0xc
 12709 17c9 04       		.byte	0x4
 12710 17ca 81000000 		.4byte	0x81
 12711 17ce 07       		.uleb128 0x7
 12712 17cf DE170000 		.4byte	0x17de
 12713 17d3 DE170000 		.4byte	0x17de
 12714 17d7 08       		.uleb128 0x8
 12715 17d8 0E010000 		.4byte	0x10e
 12716 17dc 1C       		.byte	0x1c
 12717 17dd 00       		.byte	0
 12718 17de 27       		.uleb128 0x27
 12719 17df 81000000 		.4byte	0x81
 12720 17e3 19       		.uleb128 0x19
 12721 17e4 9C0D0000 		.4byte	.LASF289
 12722 17e8 01       		.byte	0x1
 12723 17e9 40       		.byte	0x40
 12724 17ea F4170000 		.4byte	0x17f4
 12725 17ee 05       		.uleb128 0x5
 12726 17ef 03       		.byte	0x3
 12727 17f0 00000000 		.4byte	pwm_preload_values
 12728 17f4 27       		.uleb128 0x27
 12729 17f5 CE170000 		.4byte	0x17ce
 12730 17f9 28       		.uleb128 0x28
 12731 17fa D60E0000 		.4byte	.LASF290
 12732 17fe 08       		.byte	0x8
 12733 17ff 1207     		.2byte	0x712
 12734 1801 05180000 		.4byte	0x1805
 12735 1805 06       		.uleb128 0x6
 12736 1806 76000000 		.4byte	0x76
 12737 180a 07       		.uleb128 0x7
 12738 180b A5010000 		.4byte	0x1a5
 12739 180f 1A180000 		.4byte	0x181a
 12740 1813 08       		.uleb128 0x8
 12741 1814 0E010000 		.4byte	0x10e
 12742 1818 01       		.byte	0x1
 12743 1819 00       		.byte	0
 12744 181a 28       		.uleb128 0x28
 12745 181b AE060000 		.4byte	.LASF291
 12746 181f 07       		.byte	0x7
 12747 1820 1B02     		.2byte	0x21b
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 276


 12748 1822 0A180000 		.4byte	0x180a
 12749 1826 28       		.uleb128 0x28
 12750 1827 76040000 		.4byte	.LASF292
 12751 182b 07       		.byte	0x7
 12752 182c 1B02     		.2byte	0x21b
 12753 182e 0A180000 		.4byte	0x180a
 12754 1832 28       		.uleb128 0x28
 12755 1833 620B0000 		.4byte	.LASF293
 12756 1837 07       		.byte	0x7
 12757 1838 1B02     		.2byte	0x21b
 12758 183a 0A180000 		.4byte	0x180a
 12759 183e 07       		.uleb128 0x7
 12760 183f E2010000 		.4byte	0x1e2
 12761 1843 4E180000 		.4byte	0x184e
 12762 1847 08       		.uleb128 0x8
 12763 1848 0E010000 		.4byte	0x10e
 12764 184c 01       		.byte	0x1
 12765 184d 00       		.byte	0
 12766 184e 28       		.uleb128 0x28
 12767 184f 67060000 		.4byte	.LASF294
 12768 1853 07       		.byte	0x7
 12769 1854 1C02     		.2byte	0x21c
 12770 1856 3E180000 		.4byte	0x183e
 12771 185a 28       		.uleb128 0x28
 12772 185b C9100000 		.4byte	.LASF295
 12773 185f 07       		.byte	0x7
 12774 1860 1C02     		.2byte	0x21c
 12775 1862 3E180000 		.4byte	0x183e
 12776 1866 28       		.uleb128 0x28
 12777 1867 15100000 		.4byte	.LASF296
 12778 186b 07       		.byte	0x7
 12779 186c 1D02     		.2byte	0x21d
 12780 186e 63020000 		.4byte	0x263
 12781 1872 28       		.uleb128 0x28
 12782 1873 20030000 		.4byte	.LASF297
 12783 1877 07       		.byte	0x7
 12784 1878 1D02     		.2byte	0x21d
 12785 187a 63020000 		.4byte	0x263
 12786 187e 28       		.uleb128 0x28
 12787 187f 76000000 		.4byte	.LASF298
 12788 1883 07       		.byte	0x7
 12789 1884 1F02     		.2byte	0x21f
 12790 1886 B4020000 		.4byte	0x2b4
 12791 188a 28       		.uleb128 0x28
 12792 188b F00D0000 		.4byte	.LASF299
 12793 188f 07       		.byte	0x7
 12794 1890 2002     		.2byte	0x220
 12795 1892 8D090000 		.4byte	0x98d
 12796 1896 28       		.uleb128 0x28
 12797 1897 240A0000 		.4byte	.LASF300
 12798 189b 07       		.byte	0x7
 12799 189c 2002     		.2byte	0x220
 12800 189e 8D090000 		.4byte	0x98d
 12801 18a2 28       		.uleb128 0x28
 12802 18a3 03090000 		.4byte	.LASF301
 12803 18a7 07       		.byte	0x7
 12804 18a8 2102     		.2byte	0x221
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 277


 12805 18aa 660B0000 		.4byte	0xb66
 12806 18ae 07       		.uleb128 0x7
 12807 18af 3E0B0000 		.4byte	0xb3e
 12808 18b3 BE180000 		.4byte	0x18be
 12809 18b7 08       		.uleb128 0x8
 12810 18b8 0E010000 		.4byte	0x10e
 12811 18bc 01       		.byte	0x1
 12812 18bd 00       		.byte	0
 12813 18be 28       		.uleb128 0x28
 12814 18bf 4E0B0000 		.4byte	.LASF302
 12815 18c3 07       		.byte	0x7
 12816 18c4 2202     		.2byte	0x222
 12817 18c6 AE180000 		.4byte	0x18ae
 12818 18ca 28       		.uleb128 0x28
 12819 18cb 5E090000 		.4byte	.LASF303
 12820 18cf 07       		.byte	0x7
 12821 18d0 2202     		.2byte	0x222
 12822 18d2 AE180000 		.4byte	0x18ae
 12823 18d6 28       		.uleb128 0x28
 12824 18d7 340B0000 		.4byte	.LASF304
 12825 18db 07       		.byte	0x7
 12826 18dc 2202     		.2byte	0x222
 12827 18de AE180000 		.4byte	0x18ae
 12828 18e2 07       		.uleb128 0x7
 12829 18e3 3E0B0000 		.4byte	0xb3e
 12830 18e7 F2180000 		.4byte	0x18f2
 12831 18eb 08       		.uleb128 0x8
 12832 18ec 0E010000 		.4byte	0x10e
 12833 18f0 02       		.byte	0x2
 12834 18f1 00       		.byte	0
 12835 18f2 28       		.uleb128 0x28
 12836 18f3 F7040000 		.4byte	.LASF305
 12837 18f7 07       		.byte	0x7
 12838 18f8 2302     		.2byte	0x223
 12839 18fa E2180000 		.4byte	0x18e2
 12840 18fe 07       		.uleb128 0x7
 12841 18ff 3E0B0000 		.4byte	0xb3e
 12842 1903 0E190000 		.4byte	0x190e
 12843 1907 08       		.uleb128 0x8
 12844 1908 0E010000 		.4byte	0x10e
 12845 190c 07       		.byte	0x7
 12846 190d 00       		.byte	0
 12847 190e 28       		.uleb128 0x28
 12848 190f 83010000 		.4byte	.LASF306
 12849 1913 07       		.byte	0x7
 12850 1914 2402     		.2byte	0x224
 12851 1916 FE180000 		.4byte	0x18fe
 12852 191a 28       		.uleb128 0x28
 12853 191b 85020000 		.4byte	.LASF307
 12854 191f 07       		.byte	0x7
 12855 1920 2602     		.2byte	0x226
 12856 1922 8D000000 		.4byte	0x8d
 12857 1926 28       		.uleb128 0x28
 12858 1927 E3080000 		.4byte	.LASF308
 12859 192b 07       		.byte	0x7
 12860 192c 2702     		.2byte	0x227
 12861 192e 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 278


 12862 1932 28       		.uleb128 0x28
 12863 1933 DE0B0000 		.4byte	.LASF309
 12864 1937 07       		.byte	0x7
 12865 1938 2802     		.2byte	0x228
 12866 193a D5000000 		.4byte	0xd5
 12867 193e 28       		.uleb128 0x28
 12868 193f 770C0000 		.4byte	.LASF310
 12869 1943 07       		.byte	0x7
 12870 1944 2A02     		.2byte	0x22a
 12871 1946 94020000 		.4byte	0x294
 12872 194a 28       		.uleb128 0x28
 12873 194b 310F0000 		.4byte	.LASF311
 12874 194f 07       		.byte	0x7
 12875 1950 2B02     		.2byte	0x22b
 12876 1952 EA060000 		.4byte	0x6ea
 12877 1956 28       		.uleb128 0x28
 12878 1957 760E0000 		.4byte	.LASF312
 12879 195b 07       		.byte	0x7
 12880 195c 2C02     		.2byte	0x22c
 12881 195e EA060000 		.4byte	0x6ea
 12882 1962 28       		.uleb128 0x28
 12883 1963 B7050000 		.4byte	.LASF313
 12884 1967 07       		.byte	0x7
 12885 1968 2D02     		.2byte	0x22d
 12886 196a 94020000 		.4byte	0x294
 12887 196e 28       		.uleb128 0x28
 12888 196f E30E0000 		.4byte	.LASF314
 12889 1973 07       		.byte	0x7
 12890 1974 2E02     		.2byte	0x22e
 12891 1976 94020000 		.4byte	0x294
 12892 197a 28       		.uleb128 0x28
 12893 197b 45060000 		.4byte	.LASF315
 12894 197f 07       		.byte	0x7
 12895 1980 3002     		.2byte	0x230
 12896 1982 120C0000 		.4byte	0xc12
 12897 1986 28       		.uleb128 0x28
 12898 1987 A0040000 		.4byte	.LASF316
 12899 198b 07       		.byte	0x7
 12900 198c 3102     		.2byte	0x231
 12901 198e DA0B0000 		.4byte	0xbda
 12902 1992 28       		.uleb128 0x28
 12903 1993 F6030000 		.4byte	.LASF317
 12904 1997 07       		.byte	0x7
 12905 1998 3202     		.2byte	0x232
 12906 199a DA0B0000 		.4byte	0xbda
 12907 199e 28       		.uleb128 0x28
 12908 199f 0A0C0000 		.4byte	.LASF318
 12909 19a3 07       		.byte	0x7
 12910 19a4 3302     		.2byte	0x233
 12911 19a6 DA0B0000 		.4byte	0xbda
 12912 19aa 28       		.uleb128 0x28
 12913 19ab 45100000 		.4byte	.LASF319
 12914 19af 07       		.byte	0x7
 12915 19b0 3402     		.2byte	0x234
 12916 19b2 DA0B0000 		.4byte	0xbda
 12917 19b6 28       		.uleb128 0x28
 12918 19b7 E7070000 		.4byte	.LASF320
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 279


 12919 19bb 07       		.byte	0x7
 12920 19bc 3702     		.2byte	0x237
 12921 19be 81000000 		.4byte	0x81
 12922 19c2 28       		.uleb128 0x28
 12923 19c3 B7000000 		.4byte	.LASF321
 12924 19c7 07       		.byte	0x7
 12925 19c8 3802     		.2byte	0x238
 12926 19ca 81000000 		.4byte	0x81
 12927 19ce 28       		.uleb128 0x28
 12928 19cf 0B040000 		.4byte	.LASF322
 12929 19d3 07       		.byte	0x7
 12930 19d4 3902     		.2byte	0x239
 12931 19d6 81000000 		.4byte	0x81
 12932 19da 28       		.uleb128 0x28
 12933 19db D5000000 		.4byte	.LASF323
 12934 19df 07       		.byte	0x7
 12935 19e0 3A02     		.2byte	0x23a
 12936 19e2 81000000 		.4byte	0x81
 12937 19e6 28       		.uleb128 0x28
 12938 19e7 FD100000 		.4byte	.LASF324
 12939 19eb 07       		.byte	0x7
 12940 19ec 3C02     		.2byte	0x23c
 12941 19ee 81000000 		.4byte	0x81
 12942 19f2 28       		.uleb128 0x28
 12943 19f3 550B0000 		.4byte	.LASF325
 12944 19f7 07       		.byte	0x7
 12945 19f8 3D02     		.2byte	0x23d
 12946 19fa 81000000 		.4byte	0x81
 12947 19fe 28       		.uleb128 0x28
 12948 19ff 5C040000 		.4byte	.LASF326
 12949 1a03 07       		.byte	0x7
 12950 1a04 3E02     		.2byte	0x23e
 12951 1a06 81000000 		.4byte	0x81
 12952 1a0a 28       		.uleb128 0x28
 12953 1a0b C7070000 		.4byte	.LASF327
 12954 1a0f 07       		.byte	0x7
 12955 1a10 3F02     		.2byte	0x23f
 12956 1a12 81000000 		.4byte	0x81
 12957 1a16 28       		.uleb128 0x28
 12958 1a17 43090000 		.4byte	.LASF328
 12959 1a1b 07       		.byte	0x7
 12960 1a1c 4002     		.2byte	0x240
 12961 1a1e 81000000 		.4byte	0x81
 12962 1a22 07       		.uleb128 0x7
 12963 1a23 B1000000 		.4byte	0xb1
 12964 1a27 321A0000 		.4byte	0x1a32
 12965 1a2b 08       		.uleb128 0x8
 12966 1a2c 0E010000 		.4byte	0x10e
 12967 1a30 0B       		.byte	0xb
 12968 1a31 00       		.byte	0
 12969 1a32 28       		.uleb128 0x28
 12970 1a33 03040000 		.4byte	.LASF329
 12971 1a37 07       		.byte	0x7
 12972 1a38 4402     		.2byte	0x244
 12973 1a3a 221A0000 		.4byte	0x1a22
 12974 1a3e 28       		.uleb128 0x28
 12975 1a3f 7C100000 		.4byte	.LASF330
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 280


 12976 1a43 07       		.byte	0x7
 12977 1a44 4502     		.2byte	0x245
 12978 1a46 81000000 		.4byte	0x81
 12979 1a4a 07       		.uleb128 0x7
 12980 1a4b A5000000 		.4byte	0xa5
 12981 1a4f 5A1A0000 		.4byte	0x1a5a
 12982 1a53 08       		.uleb128 0x8
 12983 1a54 0E010000 		.4byte	0x10e
 12984 1a58 01       		.byte	0x1
 12985 1a59 00       		.byte	0
 12986 1a5a 28       		.uleb128 0x28
 12987 1a5b D2040000 		.4byte	.LASF331
 12988 1a5f 07       		.byte	0x7
 12989 1a60 4802     		.2byte	0x248
 12990 1a62 4A1A0000 		.4byte	0x1a4a
 12991 1a66 07       		.uleb128 0x7
 12992 1a67 99000000 		.4byte	0x99
 12993 1a6b 7C1A0000 		.4byte	0x1a7c
 12994 1a6f 08       		.uleb128 0x8
 12995 1a70 0E010000 		.4byte	0x10e
 12996 1a74 01       		.byte	0x1
 12997 1a75 08       		.uleb128 0x8
 12998 1a76 0E010000 		.4byte	0x10e
 12999 1a7a 04       		.byte	0x4
 13000 1a7b 00       		.byte	0
 13001 1a7c 28       		.uleb128 0x28
 13002 1a7d 9D060000 		.4byte	.LASF332
 13003 1a81 07       		.byte	0x7
 13004 1a82 4B02     		.2byte	0x24b
 13005 1a84 661A0000 		.4byte	0x1a66
 13006 1a88 28       		.uleb128 0x28
 13007 1a89 1F0D0000 		.4byte	.LASF333
 13008 1a8d 07       		.byte	0x7
 13009 1a8e 4C02     		.2byte	0x24c
 13010 1a90 EA060000 		.4byte	0x6ea
 13011 1a94 07       		.uleb128 0x7
 13012 1a95 8D000000 		.4byte	0x8d
 13013 1a99 AA1A0000 		.4byte	0x1aaa
 13014 1a9d 08       		.uleb128 0x8
 13015 1a9e 0E010000 		.4byte	0x10e
 13016 1aa2 01       		.byte	0x1
 13017 1aa3 08       		.uleb128 0x8
 13018 1aa4 0E010000 		.4byte	0x10e
 13019 1aa8 04       		.byte	0x4
 13020 1aa9 00       		.byte	0
 13021 1aaa 28       		.uleb128 0x28
 13022 1aab 510F0000 		.4byte	.LASF334
 13023 1aaf 07       		.byte	0x7
 13024 1ab0 4D02     		.2byte	0x24d
 13025 1ab2 941A0000 		.4byte	0x1a94
 13026 1ab6 07       		.uleb128 0x7
 13027 1ab7 81000000 		.4byte	0x81
 13028 1abb CC1A0000 		.4byte	0x1acc
 13029 1abf 08       		.uleb128 0x8
 13030 1ac0 0E010000 		.4byte	0x10e
 13031 1ac4 01       		.byte	0x1
 13032 1ac5 08       		.uleb128 0x8
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 281


 13033 1ac6 0E010000 		.4byte	0x10e
 13034 1aca 04       		.byte	0x4
 13035 1acb 00       		.byte	0
 13036 1acc 28       		.uleb128 0x28
 13037 1acd 7C060000 		.4byte	.LASF335
 13038 1ad1 07       		.byte	0x7
 13039 1ad2 4E02     		.2byte	0x24e
 13040 1ad4 B61A0000 		.4byte	0x1ab6
 13041 1ad8 28       		.uleb128 0x28
 13042 1ad9 3F0A0000 		.4byte	.LASF336
 13043 1add 07       		.byte	0x7
 13044 1ade 5102     		.2byte	0x251
 13045 1ae0 BD000000 		.4byte	0xbd
 13046 1ae4 28       		.uleb128 0x28
 13047 1ae5 9A050000 		.4byte	.LASF337
 13048 1ae9 07       		.byte	0x7
 13049 1aea 5402     		.2byte	0x254
 13050 1aec 9F010000 		.4byte	0x19f
 13051 1af0 28       		.uleb128 0x28
 13052 1af1 53070000 		.4byte	.LASF338
 13053 1af5 07       		.byte	0x7
 13054 1af6 5702     		.2byte	0x257
 13055 1af8 9F010000 		.4byte	0x19f
 13056 1afc 07       		.uleb128 0x7
 13057 1afd C20A0000 		.4byte	0xac2
 13058 1b01 0C1B0000 		.4byte	0x1b0c
 13059 1b05 08       		.uleb128 0x8
 13060 1b06 0E010000 		.4byte	0x10e
 13061 1b0a 04       		.byte	0x4
 13062 1b0b 00       		.byte	0
 13063 1b0c 28       		.uleb128 0x28
 13064 1b0d F1040000 		.4byte	.LASF339
 13065 1b11 07       		.byte	0x7
 13066 1b12 5F02     		.2byte	0x25f
 13067 1b14 FC1A0000 		.4byte	0x1afc
 13068 1b18 28       		.uleb128 0x28
 13069 1b19 E9050000 		.4byte	.LASF340
 13070 1b1d 07       		.byte	0x7
 13071 1b1e 5F02     		.2byte	0x25f
 13072 1b20 FC1A0000 		.4byte	0x1afc
 13073 1b24 28       		.uleb128 0x28
 13074 1b25 9A100000 		.4byte	.LASF341
 13075 1b29 07       		.byte	0x7
 13076 1b2a 6802     		.2byte	0x268
 13077 1b2c 81000000 		.4byte	0x81
 13078 1b30 00       		.byte	0
 13079              		.section	.debug_abbrev,"",%progbits
 13080              	.Ldebug_abbrev0:
 13081 0000 01       		.uleb128 0x1
 13082 0001 11       		.uleb128 0x11
 13083 0002 01       		.byte	0x1
 13084 0003 25       		.uleb128 0x25
 13085 0004 0E       		.uleb128 0xe
 13086 0005 13       		.uleb128 0x13
 13087 0006 0B       		.uleb128 0xb
 13088 0007 03       		.uleb128 0x3
 13089 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 282


 13090 0009 1B       		.uleb128 0x1b
 13091 000a 0E       		.uleb128 0xe
 13092 000b 55       		.uleb128 0x55
 13093 000c 17       		.uleb128 0x17
 13094 000d 11       		.uleb128 0x11
 13095 000e 01       		.uleb128 0x1
 13096 000f 10       		.uleb128 0x10
 13097 0010 17       		.uleb128 0x17
 13098 0011 00       		.byte	0
 13099 0012 00       		.byte	0
 13100 0013 02       		.uleb128 0x2
 13101 0014 24       		.uleb128 0x24
 13102 0015 00       		.byte	0
 13103 0016 0B       		.uleb128 0xb
 13104 0017 0B       		.uleb128 0xb
 13105 0018 3E       		.uleb128 0x3e
 13106 0019 0B       		.uleb128 0xb
 13107 001a 03       		.uleb128 0x3
 13108 001b 0E       		.uleb128 0xe
 13109 001c 00       		.byte	0
 13110 001d 00       		.byte	0
 13111 001e 03       		.uleb128 0x3
 13112 001f 16       		.uleb128 0x16
 13113 0020 00       		.byte	0
 13114 0021 03       		.uleb128 0x3
 13115 0022 0E       		.uleb128 0xe
 13116 0023 3A       		.uleb128 0x3a
 13117 0024 0B       		.uleb128 0xb
 13118 0025 3B       		.uleb128 0x3b
 13119 0026 0B       		.uleb128 0xb
 13120 0027 49       		.uleb128 0x49
 13121 0028 13       		.uleb128 0x13
 13122 0029 00       		.byte	0
 13123 002a 00       		.byte	0
 13124 002b 04       		.uleb128 0x4
 13125 002c 24       		.uleb128 0x24
 13126 002d 00       		.byte	0
 13127 002e 0B       		.uleb128 0xb
 13128 002f 0B       		.uleb128 0xb
 13129 0030 3E       		.uleb128 0x3e
 13130 0031 0B       		.uleb128 0xb
 13131 0032 03       		.uleb128 0x3
 13132 0033 08       		.uleb128 0x8
 13133 0034 00       		.byte	0
 13134 0035 00       		.byte	0
 13135 0036 05       		.uleb128 0x5
 13136 0037 16       		.uleb128 0x16
 13137 0038 00       		.byte	0
 13138 0039 03       		.uleb128 0x3
 13139 003a 0E       		.uleb128 0xe
 13140 003b 3A       		.uleb128 0x3a
 13141 003c 0B       		.uleb128 0xb
 13142 003d 3B       		.uleb128 0x3b
 13143 003e 05       		.uleb128 0x5
 13144 003f 49       		.uleb128 0x49
 13145 0040 13       		.uleb128 0x13
 13146 0041 00       		.byte	0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 283


 13147 0042 00       		.byte	0
 13148 0043 06       		.uleb128 0x6
 13149 0044 35       		.uleb128 0x35
 13150 0045 00       		.byte	0
 13151 0046 49       		.uleb128 0x49
 13152 0047 13       		.uleb128 0x13
 13153 0048 00       		.byte	0
 13154 0049 00       		.byte	0
 13155 004a 07       		.uleb128 0x7
 13156 004b 01       		.uleb128 0x1
 13157 004c 01       		.byte	0x1
 13158 004d 49       		.uleb128 0x49
 13159 004e 13       		.uleb128 0x13
 13160 004f 01       		.uleb128 0x1
 13161 0050 13       		.uleb128 0x13
 13162 0051 00       		.byte	0
 13163 0052 00       		.byte	0
 13164 0053 08       		.uleb128 0x8
 13165 0054 21       		.uleb128 0x21
 13166 0055 00       		.byte	0
 13167 0056 49       		.uleb128 0x49
 13168 0057 13       		.uleb128 0x13
 13169 0058 2F       		.uleb128 0x2f
 13170 0059 0B       		.uleb128 0xb
 13171 005a 00       		.byte	0
 13172 005b 00       		.byte	0
 13173 005c 09       		.uleb128 0x9
 13174 005d 04       		.uleb128 0x4
 13175 005e 01       		.byte	0x1
 13176 005f 03       		.uleb128 0x3
 13177 0060 0E       		.uleb128 0xe
 13178 0061 0B       		.uleb128 0xb
 13179 0062 0B       		.uleb128 0xb
 13180 0063 49       		.uleb128 0x49
 13181 0064 13       		.uleb128 0x13
 13182 0065 3A       		.uleb128 0x3a
 13183 0066 0B       		.uleb128 0xb
 13184 0067 3B       		.uleb128 0x3b
 13185 0068 0B       		.uleb128 0xb
 13186 0069 01       		.uleb128 0x1
 13187 006a 13       		.uleb128 0x13
 13188 006b 00       		.byte	0
 13189 006c 00       		.byte	0
 13190 006d 0A       		.uleb128 0xa
 13191 006e 28       		.uleb128 0x28
 13192 006f 00       		.byte	0
 13193 0070 03       		.uleb128 0x3
 13194 0071 0E       		.uleb128 0xe
 13195 0072 1C       		.uleb128 0x1c
 13196 0073 0B       		.uleb128 0xb
 13197 0074 00       		.byte	0
 13198 0075 00       		.byte	0
 13199 0076 0B       		.uleb128 0xb
 13200 0077 13       		.uleb128 0x13
 13201 0078 00       		.byte	0
 13202 0079 03       		.uleb128 0x3
 13203 007a 0E       		.uleb128 0xe
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 284


 13204 007b 3C       		.uleb128 0x3c
 13205 007c 19       		.uleb128 0x19
 13206 007d 00       		.byte	0
 13207 007e 00       		.byte	0
 13208 007f 0C       		.uleb128 0xc
 13209 0080 0F       		.uleb128 0xf
 13210 0081 00       		.byte	0
 13211 0082 0B       		.uleb128 0xb
 13212 0083 0B       		.uleb128 0xb
 13213 0084 49       		.uleb128 0x49
 13214 0085 13       		.uleb128 0x13
 13215 0086 00       		.byte	0
 13216 0087 00       		.byte	0
 13217 0088 0D       		.uleb128 0xd
 13218 0089 13       		.uleb128 0x13
 13219 008a 01       		.byte	0x1
 13220 008b 03       		.uleb128 0x3
 13221 008c 0E       		.uleb128 0xe
 13222 008d 0B       		.uleb128 0xb
 13223 008e 0B       		.uleb128 0xb
 13224 008f 3A       		.uleb128 0x3a
 13225 0090 0B       		.uleb128 0xb
 13226 0091 3B       		.uleb128 0x3b
 13227 0092 0B       		.uleb128 0xb
 13228 0093 01       		.uleb128 0x1
 13229 0094 13       		.uleb128 0x13
 13230 0095 00       		.byte	0
 13231 0096 00       		.byte	0
 13232 0097 0E       		.uleb128 0xe
 13233 0098 0D       		.uleb128 0xd
 13234 0099 00       		.byte	0
 13235 009a 03       		.uleb128 0x3
 13236 009b 08       		.uleb128 0x8
 13237 009c 3A       		.uleb128 0x3a
 13238 009d 0B       		.uleb128 0xb
 13239 009e 3B       		.uleb128 0x3b
 13240 009f 0B       		.uleb128 0xb
 13241 00a0 49       		.uleb128 0x49
 13242 00a1 13       		.uleb128 0x13
 13243 00a2 38       		.uleb128 0x38
 13244 00a3 0B       		.uleb128 0xb
 13245 00a4 00       		.byte	0
 13246 00a5 00       		.byte	0
 13247 00a6 0F       		.uleb128 0xf
 13248 00a7 0D       		.uleb128 0xd
 13249 00a8 00       		.byte	0
 13250 00a9 03       		.uleb128 0x3
 13251 00aa 0E       		.uleb128 0xe
 13252 00ab 3A       		.uleb128 0x3a
 13253 00ac 0B       		.uleb128 0xb
 13254 00ad 3B       		.uleb128 0x3b
 13255 00ae 0B       		.uleb128 0xb
 13256 00af 49       		.uleb128 0x49
 13257 00b0 13       		.uleb128 0x13
 13258 00b1 38       		.uleb128 0x38
 13259 00b2 0B       		.uleb128 0xb
 13260 00b3 00       		.byte	0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 285


 13261 00b4 00       		.byte	0
 13262 00b5 10       		.uleb128 0x10
 13263 00b6 13       		.uleb128 0x13
 13264 00b7 01       		.byte	0x1
 13265 00b8 03       		.uleb128 0x3
 13266 00b9 0E       		.uleb128 0xe
 13267 00ba 0B       		.uleb128 0xb
 13268 00bb 0B       		.uleb128 0xb
 13269 00bc 3A       		.uleb128 0x3a
 13270 00bd 0B       		.uleb128 0xb
 13271 00be 3B       		.uleb128 0x3b
 13272 00bf 05       		.uleb128 0x5
 13273 00c0 01       		.uleb128 0x1
 13274 00c1 13       		.uleb128 0x13
 13275 00c2 00       		.byte	0
 13276 00c3 00       		.byte	0
 13277 00c4 11       		.uleb128 0x11
 13278 00c5 0D       		.uleb128 0xd
 13279 00c6 00       		.byte	0
 13280 00c7 03       		.uleb128 0x3
 13281 00c8 0E       		.uleb128 0xe
 13282 00c9 3A       		.uleb128 0x3a
 13283 00ca 0B       		.uleb128 0xb
 13284 00cb 3B       		.uleb128 0x3b
 13285 00cc 05       		.uleb128 0x5
 13286 00cd 49       		.uleb128 0x49
 13287 00ce 13       		.uleb128 0x13
 13288 00cf 38       		.uleb128 0x38
 13289 00d0 0B       		.uleb128 0xb
 13290 00d1 00       		.byte	0
 13291 00d2 00       		.byte	0
 13292 00d3 12       		.uleb128 0x12
 13293 00d4 0D       		.uleb128 0xd
 13294 00d5 00       		.byte	0
 13295 00d6 03       		.uleb128 0x3
 13296 00d7 08       		.uleb128 0x8
 13297 00d8 3A       		.uleb128 0x3a
 13298 00d9 0B       		.uleb128 0xb
 13299 00da 3B       		.uleb128 0x3b
 13300 00db 05       		.uleb128 0x5
 13301 00dc 49       		.uleb128 0x49
 13302 00dd 13       		.uleb128 0x13
 13303 00de 38       		.uleb128 0x38
 13304 00df 0B       		.uleb128 0xb
 13305 00e0 00       		.byte	0
 13306 00e1 00       		.byte	0
 13307 00e2 13       		.uleb128 0x13
 13308 00e3 13       		.uleb128 0x13
 13309 00e4 01       		.byte	0x1
 13310 00e5 03       		.uleb128 0x3
 13311 00e6 0E       		.uleb128 0xe
 13312 00e7 0B       		.uleb128 0xb
 13313 00e8 05       		.uleb128 0x5
 13314 00e9 3A       		.uleb128 0x3a
 13315 00ea 0B       		.uleb128 0xb
 13316 00eb 3B       		.uleb128 0x3b
 13317 00ec 05       		.uleb128 0x5
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 286


 13318 00ed 01       		.uleb128 0x1
 13319 00ee 13       		.uleb128 0x13
 13320 00ef 00       		.byte	0
 13321 00f0 00       		.byte	0
 13322 00f1 14       		.uleb128 0x14
 13323 00f2 0D       		.uleb128 0xd
 13324 00f3 00       		.byte	0
 13325 00f4 03       		.uleb128 0x3
 13326 00f5 08       		.uleb128 0x8
 13327 00f6 3A       		.uleb128 0x3a
 13328 00f7 0B       		.uleb128 0xb
 13329 00f8 3B       		.uleb128 0x3b
 13330 00f9 05       		.uleb128 0x5
 13331 00fa 49       		.uleb128 0x49
 13332 00fb 13       		.uleb128 0x13
 13333 00fc 38       		.uleb128 0x38
 13334 00fd 05       		.uleb128 0x5
 13335 00fe 00       		.byte	0
 13336 00ff 00       		.byte	0
 13337 0100 15       		.uleb128 0x15
 13338 0101 0D       		.uleb128 0xd
 13339 0102 00       		.byte	0
 13340 0103 03       		.uleb128 0x3
 13341 0104 0E       		.uleb128 0xe
 13342 0105 3A       		.uleb128 0x3a
 13343 0106 0B       		.uleb128 0xb
 13344 0107 3B       		.uleb128 0x3b
 13345 0108 05       		.uleb128 0x5
 13346 0109 49       		.uleb128 0x49
 13347 010a 13       		.uleb128 0x13
 13348 010b 38       		.uleb128 0x38
 13349 010c 05       		.uleb128 0x5
 13350 010d 00       		.byte	0
 13351 010e 00       		.byte	0
 13352 010f 16       		.uleb128 0x16
 13353 0110 04       		.uleb128 0x4
 13354 0111 01       		.byte	0x1
 13355 0112 0B       		.uleb128 0xb
 13356 0113 0B       		.uleb128 0xb
 13357 0114 49       		.uleb128 0x49
 13358 0115 13       		.uleb128 0x13
 13359 0116 3A       		.uleb128 0x3a
 13360 0117 0B       		.uleb128 0xb
 13361 0118 3B       		.uleb128 0x3b
 13362 0119 05       		.uleb128 0x5
 13363 011a 01       		.uleb128 0x1
 13364 011b 13       		.uleb128 0x13
 13365 011c 00       		.byte	0
 13366 011d 00       		.byte	0
 13367 011e 17       		.uleb128 0x17
 13368 011f 2E       		.uleb128 0x2e
 13369 0120 00       		.byte	0
 13370 0121 3F       		.uleb128 0x3f
 13371 0122 19       		.uleb128 0x19
 13372 0123 03       		.uleb128 0x3
 13373 0124 0E       		.uleb128 0xe
 13374 0125 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 287


 13375 0126 0B       		.uleb128 0xb
 13376 0127 3B       		.uleb128 0x3b
 13377 0128 0B       		.uleb128 0xb
 13378 0129 27       		.uleb128 0x27
 13379 012a 19       		.uleb128 0x19
 13380 012b 11       		.uleb128 0x11
 13381 012c 01       		.uleb128 0x1
 13382 012d 12       		.uleb128 0x12
 13383 012e 06       		.uleb128 0x6
 13384 012f 40       		.uleb128 0x40
 13385 0130 18       		.uleb128 0x18
 13386 0131 9742     		.uleb128 0x2117
 13387 0133 19       		.uleb128 0x19
 13388 0134 00       		.byte	0
 13389 0135 00       		.byte	0
 13390 0136 18       		.uleb128 0x18
 13391 0137 2E       		.uleb128 0x2e
 13392 0138 01       		.byte	0x1
 13393 0139 3F       		.uleb128 0x3f
 13394 013a 19       		.uleb128 0x19
 13395 013b 03       		.uleb128 0x3
 13396 013c 0E       		.uleb128 0xe
 13397 013d 3A       		.uleb128 0x3a
 13398 013e 0B       		.uleb128 0xb
 13399 013f 3B       		.uleb128 0x3b
 13400 0140 0B       		.uleb128 0xb
 13401 0141 11       		.uleb128 0x11
 13402 0142 01       		.uleb128 0x1
 13403 0143 12       		.uleb128 0x12
 13404 0144 06       		.uleb128 0x6
 13405 0145 40       		.uleb128 0x40
 13406 0146 18       		.uleb128 0x18
 13407 0147 9642     		.uleb128 0x2116
 13408 0149 19       		.uleb128 0x19
 13409 014a 01       		.uleb128 0x1
 13410 014b 13       		.uleb128 0x13
 13411 014c 00       		.byte	0
 13412 014d 00       		.byte	0
 13413 014e 19       		.uleb128 0x19
 13414 014f 34       		.uleb128 0x34
 13415 0150 00       		.byte	0
 13416 0151 03       		.uleb128 0x3
 13417 0152 0E       		.uleb128 0xe
 13418 0153 3A       		.uleb128 0x3a
 13419 0154 0B       		.uleb128 0xb
 13420 0155 3B       		.uleb128 0x3b
 13421 0156 0B       		.uleb128 0xb
 13422 0157 49       		.uleb128 0x49
 13423 0158 13       		.uleb128 0x13
 13424 0159 02       		.uleb128 0x2
 13425 015a 18       		.uleb128 0x18
 13426 015b 00       		.byte	0
 13427 015c 00       		.byte	0
 13428 015d 1A       		.uleb128 0x1a
 13429 015e 2E       		.uleb128 0x2e
 13430 015f 01       		.byte	0x1
 13431 0160 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 288


 13432 0161 19       		.uleb128 0x19
 13433 0162 03       		.uleb128 0x3
 13434 0163 0E       		.uleb128 0xe
 13435 0164 3A       		.uleb128 0x3a
 13436 0165 0B       		.uleb128 0xb
 13437 0166 3B       		.uleb128 0x3b
 13438 0167 05       		.uleb128 0x5
 13439 0168 27       		.uleb128 0x27
 13440 0169 19       		.uleb128 0x19
 13441 016a 11       		.uleb128 0x11
 13442 016b 01       		.uleb128 0x1
 13443 016c 12       		.uleb128 0x12
 13444 016d 06       		.uleb128 0x6
 13445 016e 40       		.uleb128 0x40
 13446 016f 18       		.uleb128 0x18
 13447 0170 9642     		.uleb128 0x2116
 13448 0172 19       		.uleb128 0x19
 13449 0173 01       		.uleb128 0x1
 13450 0174 13       		.uleb128 0x13
 13451 0175 00       		.byte	0
 13452 0176 00       		.byte	0
 13453 0177 1B       		.uleb128 0x1b
 13454 0178 34       		.uleb128 0x34
 13455 0179 00       		.byte	0
 13456 017a 03       		.uleb128 0x3
 13457 017b 0E       		.uleb128 0xe
 13458 017c 3A       		.uleb128 0x3a
 13459 017d 0B       		.uleb128 0xb
 13460 017e 3B       		.uleb128 0x3b
 13461 017f 05       		.uleb128 0x5
 13462 0180 49       		.uleb128 0x49
 13463 0181 13       		.uleb128 0x13
 13464 0182 02       		.uleb128 0x2
 13465 0183 18       		.uleb128 0x18
 13466 0184 00       		.byte	0
 13467 0185 00       		.byte	0
 13468 0186 1C       		.uleb128 0x1c
 13469 0187 0B       		.uleb128 0xb
 13470 0188 01       		.byte	0x1
 13471 0189 11       		.uleb128 0x11
 13472 018a 01       		.uleb128 0x1
 13473 018b 12       		.uleb128 0x12
 13474 018c 06       		.uleb128 0x6
 13475 018d 01       		.uleb128 0x1
 13476 018e 13       		.uleb128 0x13
 13477 018f 00       		.byte	0
 13478 0190 00       		.byte	0
 13479 0191 1D       		.uleb128 0x1d
 13480 0192 34       		.uleb128 0x34
 13481 0193 00       		.byte	0
 13482 0194 03       		.uleb128 0x3
 13483 0195 08       		.uleb128 0x8
 13484 0196 3A       		.uleb128 0x3a
 13485 0197 0B       		.uleb128 0xb
 13486 0198 3B       		.uleb128 0x3b
 13487 0199 05       		.uleb128 0x5
 13488 019a 49       		.uleb128 0x49
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 289


 13489 019b 13       		.uleb128 0x13
 13490 019c 02       		.uleb128 0x2
 13491 019d 18       		.uleb128 0x18
 13492 019e 00       		.byte	0
 13493 019f 00       		.byte	0
 13494 01a0 1E       		.uleb128 0x1e
 13495 01a1 0B       		.uleb128 0xb
 13496 01a2 01       		.byte	0x1
 13497 01a3 11       		.uleb128 0x11
 13498 01a4 01       		.uleb128 0x1
 13499 01a5 12       		.uleb128 0x12
 13500 01a6 06       		.uleb128 0x6
 13501 01a7 00       		.byte	0
 13502 01a8 00       		.byte	0
 13503 01a9 1F       		.uleb128 0x1f
 13504 01aa 21       		.uleb128 0x21
 13505 01ab 00       		.byte	0
 13506 01ac 49       		.uleb128 0x49
 13507 01ad 13       		.uleb128 0x13
 13508 01ae 2F       		.uleb128 0x2f
 13509 01af 05       		.uleb128 0x5
 13510 01b0 00       		.byte	0
 13511 01b1 00       		.byte	0
 13512 01b2 20       		.uleb128 0x20
 13513 01b3 05       		.uleb128 0x5
 13514 01b4 00       		.byte	0
 13515 01b5 03       		.uleb128 0x3
 13516 01b6 0E       		.uleb128 0xe
 13517 01b7 3A       		.uleb128 0x3a
 13518 01b8 0B       		.uleb128 0xb
 13519 01b9 3B       		.uleb128 0x3b
 13520 01ba 05       		.uleb128 0x5
 13521 01bb 49       		.uleb128 0x49
 13522 01bc 13       		.uleb128 0x13
 13523 01bd 02       		.uleb128 0x2
 13524 01be 18       		.uleb128 0x18
 13525 01bf 00       		.byte	0
 13526 01c0 00       		.byte	0
 13527 01c1 21       		.uleb128 0x21
 13528 01c2 0B       		.uleb128 0xb
 13529 01c3 01       		.byte	0x1
 13530 01c4 55       		.uleb128 0x55
 13531 01c5 17       		.uleb128 0x17
 13532 01c6 00       		.byte	0
 13533 01c7 00       		.byte	0
 13534 01c8 22       		.uleb128 0x22
 13535 01c9 2E       		.uleb128 0x2e
 13536 01ca 01       		.byte	0x1
 13537 01cb 3F       		.uleb128 0x3f
 13538 01cc 19       		.uleb128 0x19
 13539 01cd 03       		.uleb128 0x3
 13540 01ce 0E       		.uleb128 0xe
 13541 01cf 3A       		.uleb128 0x3a
 13542 01d0 0B       		.uleb128 0xb
 13543 01d1 3B       		.uleb128 0x3b
 13544 01d2 05       		.uleb128 0x5
 13545 01d3 27       		.uleb128 0x27
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 290


 13546 01d4 19       		.uleb128 0x19
 13547 01d5 11       		.uleb128 0x11
 13548 01d6 01       		.uleb128 0x1
 13549 01d7 12       		.uleb128 0x12
 13550 01d8 06       		.uleb128 0x6
 13551 01d9 40       		.uleb128 0x40
 13552 01da 18       		.uleb128 0x18
 13553 01db 9742     		.uleb128 0x2117
 13554 01dd 19       		.uleb128 0x19
 13555 01de 01       		.uleb128 0x1
 13556 01df 13       		.uleb128 0x13
 13557 01e0 00       		.byte	0
 13558 01e1 00       		.byte	0
 13559 01e2 23       		.uleb128 0x23
 13560 01e3 0B       		.uleb128 0xb
 13561 01e4 01       		.byte	0x1
 13562 01e5 55       		.uleb128 0x55
 13563 01e6 17       		.uleb128 0x17
 13564 01e7 01       		.uleb128 0x1
 13565 01e8 13       		.uleb128 0x13
 13566 01e9 00       		.byte	0
 13567 01ea 00       		.byte	0
 13568 01eb 24       		.uleb128 0x24
 13569 01ec 2E       		.uleb128 0x2e
 13570 01ed 01       		.byte	0x1
 13571 01ee 3F       		.uleb128 0x3f
 13572 01ef 19       		.uleb128 0x19
 13573 01f0 03       		.uleb128 0x3
 13574 01f1 0E       		.uleb128 0xe
 13575 01f2 3A       		.uleb128 0x3a
 13576 01f3 0B       		.uleb128 0xb
 13577 01f4 3B       		.uleb128 0x3b
 13578 01f5 05       		.uleb128 0x5
 13579 01f6 11       		.uleb128 0x11
 13580 01f7 01       		.uleb128 0x1
 13581 01f8 12       		.uleb128 0x12
 13582 01f9 06       		.uleb128 0x6
 13583 01fa 40       		.uleb128 0x40
 13584 01fb 18       		.uleb128 0x18
 13585 01fc 9642     		.uleb128 0x2116
 13586 01fe 19       		.uleb128 0x19
 13587 01ff 01       		.uleb128 0x1
 13588 0200 13       		.uleb128 0x13
 13589 0201 00       		.byte	0
 13590 0202 00       		.byte	0
 13591 0203 25       		.uleb128 0x25
 13592 0204 05       		.uleb128 0x5
 13593 0205 00       		.byte	0
 13594 0206 03       		.uleb128 0x3
 13595 0207 08       		.uleb128 0x8
 13596 0208 3A       		.uleb128 0x3a
 13597 0209 0B       		.uleb128 0xb
 13598 020a 3B       		.uleb128 0x3b
 13599 020b 05       		.uleb128 0x5
 13600 020c 49       		.uleb128 0x49
 13601 020d 13       		.uleb128 0x13
 13602 020e 02       		.uleb128 0x2
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 291


 13603 020f 18       		.uleb128 0x18
 13604 0210 00       		.byte	0
 13605 0211 00       		.byte	0
 13606 0212 26       		.uleb128 0x26
 13607 0213 2E       		.uleb128 0x2e
 13608 0214 01       		.byte	0x1
 13609 0215 3F       		.uleb128 0x3f
 13610 0216 19       		.uleb128 0x19
 13611 0217 03       		.uleb128 0x3
 13612 0218 0E       		.uleb128 0xe
 13613 0219 3A       		.uleb128 0x3a
 13614 021a 0B       		.uleb128 0xb
 13615 021b 3B       		.uleb128 0x3b
 13616 021c 05       		.uleb128 0x5
 13617 021d 11       		.uleb128 0x11
 13618 021e 01       		.uleb128 0x1
 13619 021f 12       		.uleb128 0x12
 13620 0220 06       		.uleb128 0x6
 13621 0221 40       		.uleb128 0x40
 13622 0222 18       		.uleb128 0x18
 13623 0223 9742     		.uleb128 0x2117
 13624 0225 19       		.uleb128 0x19
 13625 0226 01       		.uleb128 0x1
 13626 0227 13       		.uleb128 0x13
 13627 0228 00       		.byte	0
 13628 0229 00       		.byte	0
 13629 022a 27       		.uleb128 0x27
 13630 022b 26       		.uleb128 0x26
 13631 022c 00       		.byte	0
 13632 022d 49       		.uleb128 0x49
 13633 022e 13       		.uleb128 0x13
 13634 022f 00       		.byte	0
 13635 0230 00       		.byte	0
 13636 0231 28       		.uleb128 0x28
 13637 0232 34       		.uleb128 0x34
 13638 0233 00       		.byte	0
 13639 0234 03       		.uleb128 0x3
 13640 0235 0E       		.uleb128 0xe
 13641 0236 3A       		.uleb128 0x3a
 13642 0237 0B       		.uleb128 0xb
 13643 0238 3B       		.uleb128 0x3b
 13644 0239 05       		.uleb128 0x5
 13645 023a 49       		.uleb128 0x49
 13646 023b 13       		.uleb128 0x13
 13647 023c 3F       		.uleb128 0x3f
 13648 023d 19       		.uleb128 0x19
 13649 023e 3C       		.uleb128 0x3c
 13650 023f 19       		.uleb128 0x19
 13651 0240 00       		.byte	0
 13652 0241 00       		.byte	0
 13653 0242 00       		.byte	0
 13654              		.section	.debug_aranges,"",%progbits
 13655 0000 8C000000 		.4byte	0x8c
 13656 0004 0200     		.2byte	0x2
 13657 0006 00000000 		.4byte	.Ldebug_info0
 13658 000a 04       		.byte	0x4
 13659 000b 00       		.byte	0
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 292


 13660 000c 0000     		.2byte	0
 13661 000e 0000     		.2byte	0
 13662 0010 00000000 		.4byte	.LFB64
 13663 0014 18000000 		.4byte	.LFE64-.LFB64
 13664 0018 00000000 		.4byte	.LFB65
 13665 001c 20000000 		.4byte	.LFE65-.LFB65
 13666 0020 00000000 		.4byte	.LFB66
 13667 0024 F4010000 		.4byte	.LFE66-.LFB66
 13668 0028 00000000 		.4byte	.LFB67
 13669 002c 8C070000 		.4byte	.LFE67-.LFB67
 13670 0030 00000000 		.4byte	.LFB68
 13671 0034 CC050000 		.4byte	.LFE68-.LFB68
 13672 0038 00000000 		.4byte	.LFB69
 13673 003c 34030000 		.4byte	.LFE69-.LFB69
 13674 0040 00000000 		.4byte	.LFB70
 13675 0044 B0010000 		.4byte	.LFE70-.LFB70
 13676 0048 00000000 		.4byte	.LFB71
 13677 004c 0C070000 		.4byte	.LFE71-.LFB71
 13678 0050 00000000 		.4byte	.LFB72
 13679 0054 44080000 		.4byte	.LFE72-.LFB72
 13680 0058 00000000 		.4byte	.LFB73
 13681 005c 1C080000 		.4byte	.LFE73-.LFB73
 13682 0060 00000000 		.4byte	.LFB74
 13683 0064 C8110000 		.4byte	.LFE74-.LFB74
 13684 0068 00000000 		.4byte	.LFB75
 13685 006c 04010000 		.4byte	.LFE75-.LFB75
 13686 0070 00000000 		.4byte	.LFB76
 13687 0074 78000000 		.4byte	.LFE76-.LFB76
 13688 0078 00000000 		.4byte	.LFB77
 13689 007c 0C040000 		.4byte	.LFE77-.LFB77
 13690 0080 00000000 		.4byte	.LFB78
 13691 0084 08010000 		.4byte	.LFE78-.LFB78
 13692 0088 00000000 		.4byte	0
 13693 008c 00000000 		.4byte	0
 13694              		.section	.debug_ranges,"",%progbits
 13695              	.Ldebug_ranges0:
 13696 0000 68010000 		.4byte	.LBB4
 13697 0004 AA010000 		.4byte	.LBE4
 13698 0008 AC010000 		.4byte	.LBB5
 13699 000c F2010000 		.4byte	.LBE5
 13700 0010 00000000 		.4byte	0
 13701 0014 00000000 		.4byte	0
 13702 0018 3A000000 		.4byte	.LBB6
 13703 001c 40010000 		.4byte	.LBE6
 13704 0020 42010000 		.4byte	.LBB7
 13705 0024 BC010000 		.4byte	.LBE7
 13706 0028 00000000 		.4byte	0
 13707 002c 00000000 		.4byte	0
 13708 0030 BE010000 		.4byte	.LBB8
 13709 0034 20030000 		.4byte	.LBE8
 13710 0038 22030000 		.4byte	.LBB9
 13711 003c 24030000 		.4byte	.LBE9
 13712 0040 00000000 		.4byte	0
 13713 0044 00000000 		.4byte	0
 13714 0048 00000000 		.4byte	.LFB64
 13715 004c 18000000 		.4byte	.LFE64
 13716 0050 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 293


 13717 0054 20000000 		.4byte	.LFE65
 13718 0058 00000000 		.4byte	.LFB66
 13719 005c F4010000 		.4byte	.LFE66
 13720 0060 00000000 		.4byte	.LFB67
 13721 0064 8C070000 		.4byte	.LFE67
 13722 0068 00000000 		.4byte	.LFB68
 13723 006c CC050000 		.4byte	.LFE68
 13724 0070 00000000 		.4byte	.LFB69
 13725 0074 34030000 		.4byte	.LFE69
 13726 0078 00000000 		.4byte	.LFB70
 13727 007c B0010000 		.4byte	.LFE70
 13728 0080 00000000 		.4byte	.LFB71
 13729 0084 0C070000 		.4byte	.LFE71
 13730 0088 00000000 		.4byte	.LFB72
 13731 008c 44080000 		.4byte	.LFE72
 13732 0090 00000000 		.4byte	.LFB73
 13733 0094 1C080000 		.4byte	.LFE73
 13734 0098 00000000 		.4byte	.LFB74
 13735 009c C8110000 		.4byte	.LFE74
 13736 00a0 00000000 		.4byte	.LFB75
 13737 00a4 04010000 		.4byte	.LFE75
 13738 00a8 00000000 		.4byte	.LFB76
 13739 00ac 78000000 		.4byte	.LFE76
 13740 00b0 00000000 		.4byte	.LFB77
 13741 00b4 0C040000 		.4byte	.LFE77
 13742 00b8 00000000 		.4byte	.LFB78
 13743 00bc 08010000 		.4byte	.LFE78
 13744 00c0 00000000 		.4byte	0
 13745 00c4 00000000 		.4byte	0
 13746              		.section	.debug_line,"",%progbits
 13747              	.Ldebug_line0:
 13748 0000 700B0000 		.section	.debug_str,"MS",%progbits,1
 13748      0200AC01 
 13748      00000201 
 13748      FB0E0D00 
 13748      01010101 
 13749              	.LASF24:
 13750 0000 73697A65 		.ascii	"sizetype\000"
 13750      74797065 
 13750      00
 13751              	.LASF265:
 13752 0009 706F735F 		.ascii	"pos_cycle_status\000"
 13752      6379636C 
 13752      655F7374 
 13752      61747573 
 13752      00
 13753              	.LASF142:
 13754 001a 77726973 		.ascii	"wrist_direction_association\000"
 13754      745F6469 
 13754      72656374 
 13754      696F6E5F 
 13754      6173736F 
 13755              	.LASF30:
 13756 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 13756      545F4D4F 
 13756      44455F45 
 13756      4D475F46 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 294


 13756      4346535F 
 13757              	.LASF117:
 13758 004e 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 13758      5F414443 
 13758      5F73656E 
 13758      736F7273 
 13758      5F706F72 
 13759              	.LASF147:
 13760 0069 75736572 		.ascii	"user\000"
 13760      00
 13761              	.LASF10:
 13762 006e 696E7433 		.ascii	"int32_t\000"
 13762      325F7400 
 13763              	.LASF298:
 13764 0076 675F7278 		.ascii	"g_rx\000"
 13764      00
 13765              	.LASF242:
 13766 007b 6F6E655F 		.ascii	"one_time_execute\000"
 13766      74696D65 
 13766      5F657865 
 13766      63757465 
 13766      00
 13767              	.LASF49:
 13768 008c 73745F64 		.ascii	"st_data\000"
 13768      61746100 
 13769              	.LASF13:
 13770 0094 75696E74 		.ascii	"uint32\000"
 13770      333200
 13771              	.LASF227:
 13772 009b 6E5F6C69 		.ascii	"n_line\000"
 13772      6E6500
 13773              	.LASF148:
 13774 00a2 4A4F595F 		.ascii	"JOY_spec\000"
 13774      73706563 
 13774      00
 13775              	.LASF85:
 13776 00ab 706F735F 		.ascii	"pos_lim_inf\000"
 13776      6C696D5F 
 13776      696E6600 
 13777              	.LASF321:
 13778 00b7 74656E73 		.ascii	"tension_valid\000"
 13778      696F6E5F 
 13778      76616C69 
 13778      6400
 13779              	.LASF203:
 13780 00c5 6572725F 		.ascii	"err_joy_1\000"
 13780      6A6F795F 
 13780      3100
 13781              	.LASF179:
 13782 00cf 73746174 		.ascii	"state\000"
 13782      6500
 13783              	.LASF323:
 13784 00d5 6379636C 		.ascii	"cycles_interrupt_flag\000"
 13784      65735F69 
 13784      6E746572 
 13784      72757074 
 13784      5F666C61 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 295


 13785              	.LASF272:
 13786 00eb 62696E5F 		.ascii	"bin_max\000"
 13786      6D617800 
 13787              	.LASF286:
 13788 00f3 61646472 		.ascii	"addr_start_c\000"
 13788      5F737461 
 13788      72745F63 
 13788      00
 13789              	.LASF29:
 13790 0100 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 13790      545F4D4F 
 13790      44455F45 
 13790      4D475F46 
 13790      43465300 
 13791              	.LASF89:
 13792 0114 63757272 		.ascii	"curr_lookup\000"
 13792      5F6C6F6F 
 13792      6B757000 
 13793              	.LASF212:
 13794 0120 70776D5F 		.ascii	"pwm_input\000"
 13794      696E7075 
 13794      7400
 13795              	.LASF57:
 13796 012a 72657374 		.ascii	"rest_counter\000"
 13796      5F636F75 
 13796      6E746572 
 13796      00
 13797              	.LASF132:
 13798 0137 73745F4D 		.ascii	"st_MASTER_spec\000"
 13798      41535445 
 13798      525F7370 
 13798      656300
 13799              	.LASF28:
 13800 0146 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 13800      545F4D4F 
 13800      44455F45 
 13800      4D475F49 
 13800      4E544547 
 13801              	.LASF258:
 13802 015e 765F636F 		.ascii	"v_count\000"
 13802      756E7400 
 13803              	.LASF184:
 13804 0166 72785F64 		.ascii	"rx_data\000"
 13804      61746100 
 13805              	.LASF247:
 13806 016e 7676765F 		.ascii	"vvv_value\000"
 13806      76616C75 
 13806      6500
 13807              	.LASF14:
 13808 0178 696E7438 		.ascii	"int8\000"
 13808      00
 13809              	.LASF189:
 13810 017d 696E666F 		.ascii	"info_\000"
 13810      5F00
 13811              	.LASF306:
 13812 0183 66696C74 		.ascii	"filt_emg\000"
 13812      5F656D67 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 296


 13812      00
 13813              	.LASF104:
 13814 018c 73745F65 		.ascii	"st_emg\000"
 13814      6D6700
 13815              	.LASF55:
 13816 0193 706F7369 		.ascii	"position_hist\000"
 13816      74696F6E 
 13816      5F686973 
 13816      7400
 13817              	.LASF171:
 13818 01a1 50524550 		.ascii	"PREPARE_DATA\000"
 13818      4152455F 
 13818      44415441 
 13818      00
 13819              	.LASF155:
 13820 01ae 74656D70 		.ascii	"temp_value\000"
 13820      5F76616C 
 13820      756500
 13821              	.LASF269:
 13822 01b9 7468725F 		.ascii	"thr_pos\000"
 13822      706F7300 
 13823              	.LASF139:
 13824 01c1 73745F57 		.ascii	"st_WR_spec\000"
 13824      525F7370 
 13824      656300
 13825              	.LASF205:
 13826 01cc 6572725F 		.ascii	"err_joy_2\000"
 13826      6A6F795F 
 13826      3200
 13827              	.LASF52:
 13828 01d6 72656164 		.ascii	"ready\000"
 13828      7900
 13829              	.LASF101:
 13830 01dc 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 13830      6964785F 
 13830      7573655F 
 13830      666F725F 
 13830      636F6E74 
 13831              	.LASF158:
 13832 01f4 6761696E 		.ascii	"gain\000"
 13832      00
 13833              	.LASF61:
 13834 01f9 73745F64 		.ascii	"st_device\000"
 13834      65766963 
 13834      6500
 13835              	.LASF27:
 13836 0203 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 13836      545F4D4F 
 13836      44455F45 
 13836      4D475F50 
 13836      524F504F 
 13837              	.LASF66:
 13838 021f 7573655F 		.ascii	"use_2nd_motor_flag\000"
 13838      326E645F 
 13838      6D6F746F 
 13838      725F666C 
 13838      616700
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 297


 13839              	.LASF252:
 13840 0232 55445F63 		.ascii	"UD_counter\000"
 13840      6F756E74 
 13840      657200
 13841              	.LASF167:
 13842 023d 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 13842      414E445F 
 13842      4D45414E 
 13842      00
 13843              	.LASF111:
 13844 024a 72656164 		.ascii	"read_imu_flag\000"
 13844      5F696D75 
 13844      5F666C61 
 13844      6700
 13845              	.LASF119:
 13846 0258 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 13846      72645F45 
 13846      4D475F68 
 13846      6973746F 
 13846      72795F6F 
 13847              	.LASF256:
 13848 0271 66697273 		.ascii	"first_tension_valid\000"
 13848      745F7465 
 13848      6E73696F 
 13848      6E5F7661 
 13848      6C696400 
 13849              	.LASF307:
 13850 0285 74696D65 		.ascii	"timer_value\000"
 13850      725F7661 
 13850      6C756500 
 13851              	.LASF4:
 13852 0291 6C6F6E67 		.ascii	"long int\000"
 13852      20696E74 
 13852      00
 13853              	.LASF145:
 13854 029a 756E7573 		.ascii	"unused_bytes1\000"
 13854      65645F62 
 13854      79746573 
 13854      3100
 13855              	.LASF192:
 13856 02a8 454D475F 		.ascii	"EMG_history_info_\000"
 13856      68697374 
 13856      6F72795F 
 13856      696E666F 
 13856      5F00
 13857              	.LASF217:
 13858 02ba 53485F45 		.ascii	"SH_ENC_L\000"
 13858      4E435F4C 
 13858      00
 13859              	.LASF65:
 13860 02c3 72657365 		.ascii	"reset_counters\000"
 13860      745F636F 
 13860      756E7465 
 13860      727300
 13861              	.LASF268:
 13862 02d2 62696E5F 		.ascii	"bin_threshold\000"
 13862      74687265 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 298


 13862      73686F6C 
 13862      6400
 13863              	.LASF122:
 13864 02e0 75736572 		.ascii	"user_emg\000"
 13864      5F656D67 
 13864      00
 13865              	.LASF241:
 13866 02e9 73616665 		.ascii	"safe_startup_motor_activation\000"
 13866      5F737461 
 13866      72747570 
 13866      5F6D6F74 
 13866      6F725F61 
 13867              	.LASF70:
 13868 0307 756E7573 		.ascii	"unused_bytes\000"
 13868      65645F62 
 13868      79746573 
 13868      00
 13869              	.LASF151:
 13870 0314 61636365 		.ascii	"accel_value\000"
 13870      6C5F7661 
 13870      6C756500 
 13871              	.LASF297:
 13872 0320 675F6164 		.ascii	"g_adc_measOld\000"
 13872      635F6D65 
 13872      61734F6C 
 13872      6400
 13873              	.LASF230:
 13874 032e 6175785F 		.ascii	"aux_encoder\000"
 13874      656E636F 
 13874      64657200 
 13875              	.LASF53:
 13876 033a 73745F63 		.ascii	"st_counters\000"
 13876      6F756E74 
 13876      65727300 
 13877              	.LASF216:
 13878 0346 53485F4D 		.ascii	"SH_MOT\000"
 13878      4F5400
 13879              	.LASF17:
 13880 034d 666C6F61 		.ascii	"float32\000"
 13880      74333200 
 13881              	.LASF226:
 13882 0355 656E636F 		.ascii	"encoder_reading_SPI\000"
 13882      6465725F 
 13882      72656164 
 13882      696E675F 
 13882      53504900 
 13883              	.LASF239:
 13884 0369 6572726F 		.ascii	"error\000"
 13884      7200
 13885              	.LASF54:
 13886 036f 656D675F 		.ascii	"emg_counter\000"
 13886      636F756E 
 13886      74657200 
 13887              	.LASF174:
 13888 037b 57524954 		.ascii	"WRITE_END\000"
 13888      455F454E 
 13888      4400
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 299


 13889              	.LASF253:
 13890 0385 4C525F63 		.ascii	"LR_counter\000"
 13890      6F756E74 
 13890      657200
 13891              	.LASF244:
 13892 0390 706F735F 		.ascii	"pos_reconstruct\000"
 13892      7265636F 
 13892      6E737472 
 13892      75637400 
 13893              	.LASF260:
 13894 03a0 70776D5F 		.ascii	"pwm_limit_search\000"
 13894      6C696D69 
 13894      745F7365 
 13894      61726368 
 13894      00
 13895              	.LASF0:
 13896 03b1 7369676E 		.ascii	"signed char\000"
 13896      65642063 
 13896      68617200 
 13897              	.LASF121:
 13898 03bd 75736572 		.ascii	"user_code_string\000"
 13898      5F636F64 
 13898      655F7374 
 13898      72696E67 
 13898      00
 13899              	.LASF159:
 13900 03ce 73745F63 		.ascii	"st_calib\000"
 13900      616C6962 
 13900      00
 13901              	.LASF199:
 13902 03d7 6572725F 		.ascii	"err_emg_1\000"
 13902      656D675F 
 13902      3100
 13903              	.LASF200:
 13904 03e1 6572725F 		.ascii	"err_emg_2\000"
 13904      656D675F 
 13904      3200
 13905              	.LASF109:
 13906 03eb 73776974 		.ascii	"switch_emg\000"
 13906      63685F65 
 13906      6D6700
 13907              	.LASF317:
 13908 03f6 656D675F 		.ascii	"emg_2_status\000"
 13908      325F7374 
 13908      61747573 
 13908      00
 13909              	.LASF329:
 13910 0403 4144435F 		.ascii	"ADC_buf\000"
 13910      62756600 
 13911              	.LASF322:
 13912 040b 696E7465 		.ascii	"interrupt_flag\000"
 13912      72727570 
 13912      745F666C 
 13912      616700
 13913              	.LASF278:
 13914 041a 73746570 		.ascii	"step\000"
 13914      00
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 300


 13915              	.LASF219:
 13916 041f 63757272 		.ascii	"curr_error_sum\000"
 13916      5F657272 
 13916      6F725F73 
 13916      756D00
 13917              	.LASF1:
 13918 042e 756E7369 		.ascii	"unsigned char\000"
 13918      676E6564 
 13918      20636861 
 13918      7200
 13919              	.LASF95:
 13920 043c 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 13920      72657665 
 13920      72735F6D 
 13920      6F746F72 
 13920      5F666C61 
 13921              	.LASF284:
 13922 0452 726F775F 		.ascii	"row_start\000"
 13922      73746172 
 13922      7400
 13923              	.LASF326:
 13924 045c 666F7263 		.ascii	"forced_open\000"
 13924      65645F6F 
 13924      70656E00 
 13925              	.LASF234:
 13926 0468 73706565 		.ascii	"speed_encoder\000"
 13926      645F656E 
 13926      636F6465 
 13926      7200
 13927              	.LASF292:
 13928 0476 675F7265 		.ascii	"g_refNew\000"
 13928      664E6577 
 13928      00
 13929              	.LASF276:
 13930 047f 63757272 		.ascii	"curr_off\000"
 13930      5F6F6666 
 13930      00
 13931              	.LASF64:
 13932 0488 72696768 		.ascii	"right_left\000"
 13932      745F6C65 
 13932      667400
 13933              	.LASF93:
 13934 0493 656E636F 		.ascii	"encoder_line\000"
 13934      6465725F 
 13934      6C696E65 
 13934      00
 13935              	.LASF316:
 13936 04a0 656D675F 		.ascii	"emg_1_status\000"
 13936      315F7374 
 13936      61747573 
 13936      00
 13937              	.LASF150:
 13938 04ad 666C6167 		.ascii	"flags\000"
 13938      7300
 13939              	.LASF198:
 13940 04b3 68616E64 		.ascii	"handle_value\000"
 13940      6C655F76 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 301


 13940      616C7565 
 13940      00
 13941              	.LASF20:
 13942 04c0 63686172 		.ascii	"char\000"
 13942      00
 13943              	.LASF88:
 13944 04c5 6D61785F 		.ascii	"max_step_pos\000"
 13944      73746570 
 13944      5F706F73 
 13944      00
 13945              	.LASF331:
 13946 04d2 70776D5F 		.ascii	"pwm_sign\000"
 13946      7369676E 
 13946      00
 13947              	.LASF225:
 13948 04db 6D6F746F 		.ascii	"motor_control_generic\000"
 13948      725F636F 
 13948      6E74726F 
 13948      6C5F6765 
 13948      6E657269 
 13949              	.LASF339:
 13950 04f1 675F696D 		.ascii	"g_imu\000"
 13950      7500
 13951              	.LASF305:
 13952 04f7 66696C74 		.ascii	"filt_vel\000"
 13952      5F76656C 
 13952      00
 13953              	.LASF94:
 13954 0500 70776D5F 		.ascii	"pwm_rate_limiter\000"
 13954      72617465 
 13954      5F6C696D 
 13954      69746572 
 13954      00
 13955              	.LASF74:
 13956 0511 6B5F645F 		.ascii	"k_d_c\000"
 13956      6300
 13957              	.LASF170:
 13958 0517 6164635F 		.ascii	"adc_status\000"
 13958      73746174 
 13958      757300
 13959              	.LASF99:
 13960 0522 6D5F6D75 		.ascii	"m_mult\000"
 13960      6C7400
 13961              	.LASF73:
 13962 0529 6B5F695F 		.ascii	"k_i_c\000"
 13962      6300
 13963              	.LASF223:
 13964 052f 6D6F746F 		.ascii	"motor_dir\000"
 13964      725F6469 
 13964      7200
 13965              	.LASF271:
 13966 0539 62696E5F 		.ascii	"bin_st\000"
 13966      737400
 13967              	.LASF177:
 13968 0540 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 13968      52533438 
 13968      355F5258 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 302


 13968      5F457849 
 13968      6E746572 
 13969              	.LASF86:
 13970 0559 706F735F 		.ascii	"pos_lim_sup\000"
 13970      6C696D5F 
 13970      73757000 
 13971              	.LASF157:
 13972 0565 6F6C645F 		.ascii	"old_value\000"
 13972      76616C75 
 13972      6500
 13973              	.LASF107:
 13974 056f 656D675F 		.ascii	"emg_speed\000"
 13974      73706565 
 13974      6400
 13975              	.LASF126:
 13976 0579 72657374 		.ascii	"rest_vel\000"
 13976      5F76656C 
 13976      00
 13977              	.LASF164:
 13978 0582 4E4F524D 		.ascii	"NORMAL\000"
 13978      414C00
 13979              	.LASF211:
 13980 0589 6D6F746F 		.ascii	"motor_control_SH\000"
 13980      725F636F 
 13980      6E74726F 
 13980      6C5F5348 
 13980      00
 13981              	.LASF337:
 13982 059a 7046696C 		.ascii	"pFile\000"
 13982      6500
 13983              	.LASF218:
 13984 05a0 706F735F 		.ascii	"pos_error_sum\000"
 13984      6572726F 
 13984      725F7375 
 13984      6D00
 13985              	.LASF118:
 13986 05ae 4144435F 		.ascii	"ADC_conf\000"
 13986      636F6E66 
 13986      00
 13987              	.LASF313:
 13988 05b7 6465765F 		.ascii	"dev_tension_f\000"
 13988      74656E73 
 13988      696F6E5F 
 13988      6600
 13989              	.LASF76:
 13990 05c5 6B5F695F 		.ascii	"k_i_dl\000"
 13990      646C00
 13991              	.LASF50:
 13992 05cc 62756666 		.ascii	"buffer\000"
 13992      657200
 13993              	.LASF78:
 13994 05d3 6B5F705F 		.ascii	"k_p_c_dl\000"
 13994      635F646C 
 13994      00
 13995              	.LASF185:
 13996 05dc 72785F64 		.ascii	"rx_data_type\000"
 13996      6174615F 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 303


 13996      74797065 
 13996      00
 13997              	.LASF340:
 13998 05e9 675F696D 		.ascii	"g_imuNew\000"
 13998      754E6577 
 13998      00
 13999              	.LASF162:
 14000 05f2 73706565 		.ascii	"speed\000"
 14000      6400
 14001              	.LASF224:
 14002 05f8 706F7369 		.ascii	"position_counter\000"
 14002      74696F6E 
 14002      5F636F75 
 14002      6E746572 
 14002      00
 14003              	.LASF280:
 14004 0609 74696D65 		.ascii	"timer_value_e\000"
 14004      725F7661 
 14004      6C75655F 
 14004      6500
 14005              	.LASF180:
 14006 0617 64617461 		.ascii	"data_packet_index\000"
 14006      5F706163 
 14006      6B65745F 
 14006      696E6465 
 14006      7800
 14007              	.LASF182:
 14008 0629 64617461 		.ascii	"data_packet_buffer\000"
 14008      5F706163 
 14008      6B65745F 
 14008      62756666 
 14008      657200
 14009              	.LASF196:
 14010 063c 73745F72 		.ascii	"st_ref_p\000"
 14010      65665F70 
 14010      00
 14011              	.LASF315:
 14012 0645 6379636C 		.ascii	"cycles_status\000"
 14012      65735F73 
 14012      74617475 
 14012      7300
 14013              	.LASF187:
 14014 0653 636F756E 		.ascii	"counter_calibration\000"
 14014      7465725F 
 14014      63616C69 
 14014      62726174 
 14014      696F6E00 
 14015              	.LASF294:
 14016 0667 675F6D65 		.ascii	"g_meas\000"
 14016      617300
 14017              	.LASF279:
 14018 066e 74696D65 		.ascii	"timer_value_s\000"
 14018      725F7661 
 14018      6C75655F 
 14018      7300
 14019              	.LASF335:
 14020 067c 456E636F 		.ascii	"Encoder_Check\000"
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 304


 14020      6465725F 
 14020      43686563 
 14020      6B00
 14021              	.LASF238:
 14022 068a 636F6D70 		.ascii	"comp_value_encoder\000"
 14022      5F76616C 
 14022      75655F65 
 14022      6E636F64 
 14022      657200
 14023              	.LASF332:
 14024 069d 64617461 		.ascii	"data_encoder_raw\000"
 14024      5F656E63 
 14024      6F646572 
 14024      5F726177 
 14024      00
 14025              	.LASF291:
 14026 06ae 675F7265 		.ascii	"g_ref\000"
 14026      6600
 14027              	.LASF25:
 14028 06b4 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14028      545F4D4F 
 14028      44455F45 
 14028      58544552 
 14028      4E414C00 
 14029              	.LASF229:
 14030 06c8 696E6465 		.ascii	"index\000"
 14030      7800
 14031              	.LASF137:
 14032 06ce 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14032      6D756D5F 
 14032      70726573 
 14032      73757265 
 14032      5F6B5061 
 14033              	.LASF127:
 14034 06e3 72657374 		.ascii	"rest_position_flag\000"
 14034      5F706F73 
 14034      6974696F 
 14034      6E5F666C 
 14034      616700
 14035              	.LASF129:
 14036 06f6 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14036      7469636B 
 14036      5F636C6F 
 14036      73757265 
 14036      5F737065 
 14037              	.LASF79:
 14038 070d 6B5F695F 		.ascii	"k_i_c_dl\000"
 14038      635F646C 
 14038      00
 14039              	.LASF186:
 14040 0716 7061636B 		.ascii	"package_count\000"
 14040      6167655F 
 14040      636F756E 
 14040      7400
 14041              	.LASF38:
 14042 0724 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14042      5F414E44 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 305


 14042      5F504F53 
 14042      5F434F4E 
 14042      54524F4C 
 14043              	.LASF160:
 14044 0739 656E6162 		.ascii	"enabled\000"
 14044      6C656400 
 14045              	.LASF5:
 14046 0741 6C6F6E67 		.ascii	"long unsigned int\000"
 14046      20756E73 
 14046      69676E65 
 14046      6420696E 
 14046      7400
 14047              	.LASF338:
 14048 0753 70454D47 		.ascii	"pEMGHFile\000"
 14048      4846696C 
 14048      6500
 14049              	.LASF59:
 14050 075d 746F7461 		.ascii	"total_time_on\000"
 14050      6C5F7469 
 14050      6D655F6F 
 14050      6E00
 14051              	.LASF172:
 14052 076b 57524954 		.ascii	"WRITE_CYCLES\000"
 14052      455F4359 
 14052      434C4553 
 14052      00
 14053              	.LASF131:
 14054 0778 6A6F7973 		.ascii	"joystick_gains\000"
 14054      7469636B 
 14054      5F676169 
 14054      6E7300
 14055              	.LASF45:
 14056 0787 686F6C64 		.ascii	"hold_curr\000"
 14056      5F637572 
 14056      7200
 14057              	.LASF31:
 14058 0791 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14058      545F4D4F 
 14058      44455F4A 
 14058      4F595354 
 14058      49434B00 
 14059              	.LASF60:
 14060 07a5 746F7461 		.ascii	"total_time_rest\000"
 14060      6C5F7469 
 14060      6D655F72 
 14060      65737400 
 14061              	.LASF81:
 14062 07b5 61637469 		.ascii	"activ\000"
 14062      7600
 14063              	.LASF263:
 14064 07bb 6D696E5F 		.ascii	"min_tension\000"
 14064      74656E73 
 14064      696F6E00 
 14065              	.LASF327:
 14066 07c7 62617474 		.ascii	"battery_low_SoC\000"
 14066      6572795F 
 14066      6C6F775F 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 306


 14066      536F4300 
 14067              	.LASF195:
 14068 07d7 6D6F746F 		.ascii	"motor_idx\000"
 14068      725F6964 
 14068      7800
 14069              	.LASF98:
 14070 07e1 6D5F6F66 		.ascii	"m_off\000"
 14070      6600
 14071              	.LASF320:
 14072 07e7 72657365 		.ascii	"reset_last_value_flag\000"
 14072      745F6C61 
 14072      73745F76 
 14072      616C7565 
 14072      5F666C61 
 14073              	.LASF154:
 14074 07fd 71756174 		.ascii	"quat_value\000"
 14074      5F76616C 
 14074      756500
 14075              	.LASF124:
 14076 0808 72657374 		.ascii	"rest_pos\000"
 14076      5F706F73 
 14076      00
 14077              	.LASF40:
 14078 0811 63757272 		.ascii	"curr\000"
 14078      00
 14079              	.LASF173:
 14080 0816 57414954 		.ascii	"WAIT_QUERY\000"
 14080      5F515545 
 14080      525900
 14081              	.LASF91:
 14082 0821 696E7075 		.ascii	"input_mode\000"
 14082      745F6D6F 
 14082      646500
 14083              	.LASF36:
 14084 082c 434F4E54 		.ascii	"CONTROL_PWM\000"
 14084      524F4C5F 
 14084      50574D00 
 14085              	.LASF264:
 14086 0838 6379636C 		.ascii	"cycles_counter_update\000"
 14086      65735F63 
 14086      6F756E74 
 14086      65725F75 
 14086      70646174 
 14087              	.LASF342:
 14088 084e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14088      43313120 
 14088      352E342E 
 14088      31203230 
 14088      31363036 
 14089 0881 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14089      20726576 
 14089      6973696F 
 14089      6E203233 
 14089      37373135 
 14090 08b4 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14090      66756E63 
 14090      74696F6E 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 307


 14090      2D736563 
 14090      74696F6E 
 14091              	.LASF42:
 14092 08dc 73745F72 		.ascii	"st_ref\000"
 14092      656600
 14093              	.LASF308:
 14094 08e3 74696D65 		.ascii	"timer_value0\000"
 14094      725F7661 
 14094      6C756530 
 14094      00
 14095              	.LASF123:
 14096 08f0 73745F53 		.ascii	"st_SH_spec\000"
 14096      485F7370 
 14096      656300
 14097              	.LASF245:
 14098 08fb 765F7661 		.ascii	"v_value\000"
 14098      6C756500 
 14099              	.LASF301:
 14100 0903 63616C69 		.ascii	"calib\000"
 14100      6200
 14101              	.LASF135:
 14102 0909 73745F46 		.ascii	"st_FB_spec\000"
 14102      425F7370 
 14102      656300
 14103              	.LASF6:
 14104 0914 6C6F6E67 		.ascii	"long long int\000"
 14104      206C6F6E 
 14104      6720696E 
 14104      7400
 14105              	.LASF34:
 14106 0922 53485F63 		.ascii	"SH_control_mode\000"
 14106      6F6E7472 
 14106      6F6C5F6D 
 14106      6F646500 
 14107              	.LASF191:
 14108 0932 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14108      4E445F4D 
 14108      4F544F52 
 14108      5F494458 
 14108      00
 14109              	.LASF328:
 14110 0943 6368616E 		.ascii	"change_ext_ref_flag\000"
 14110      67655F65 
 14110      78745F72 
 14110      65665F66 
 14110      6C616700 
 14111              	.LASF19:
 14112 0957 646F7562 		.ascii	"double\000"
 14112      6C6500
 14113              	.LASF303:
 14114 095e 66696C74 		.ascii	"filt_curr_diff\000"
 14114      5F637572 
 14114      725F6469 
 14114      666600
 14115              	.LASF207:
 14116 096d 706F735F 		.ascii	"pos_sum\000"
 14116      73756D00 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 308


 14117              	.LASF210:
 14118 0975 696E7465 		.ascii	"interrupt_manager\000"
 14118      72727570 
 14118      745F6D61 
 14118      6E616765 
 14118      7200
 14119              	.LASF97:
 14120 0987 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14120      7261775F 
 14120      72656164 
 14120      5F636F6E 
 14120      6600
 14121              	.LASF208:
 14122 0999 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14122      7574655F 
 14122      536F6674 
 14122      48616E64 
 14122      5F325F6D 
 14123              	.LASF163:
 14124 09c1 72657065 		.ascii	"repetitions\000"
 14124      74697469 
 14124      6F6E7300 
 14125              	.LASF87:
 14126 09cd 6D61785F 		.ascii	"max_step_neg\000"
 14126      73746570 
 14126      5F6E6567 
 14126      00
 14127              	.LASF243:
 14128 09da 636F756E 		.ascii	"count_startup_motor\000"
 14128      745F7374 
 14128      61727475 
 14128      705F6D6F 
 14128      746F7200 
 14129              	.LASF134:
 14130 09ee 736C6176 		.ascii	"slave_ID\000"
 14130      655F4944 
 14130      00
 14131              	.LASF168:
 14132 09f7 57414954 		.ascii	"WAIT\000"
 14132      00
 14133              	.LASF18:
 14134 09fc 666C6F61 		.ascii	"float\000"
 14134      7400
 14135              	.LASF113:
 14136 0a02 494D555F 		.ascii	"IMU_conf\000"
 14136      636F6E66 
 14136      00
 14137              	.LASF257:
 14138 0a0b 636F756E 		.ascii	"count\000"
 14138      7400
 14139              	.LASF46:
 14140 0a11 73745F61 		.ascii	"st_adc_meas\000"
 14140      64635F6D 
 14140      65617300 
 14141              	.LASF288:
 14142 0a1d 6D5F6164 		.ascii	"m_addr\000"
 14142      647200
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 309


 14143              	.LASF300:
 14144 0a24 635F6D65 		.ascii	"c_mem\000"
 14144      6D00
 14145              	.LASF8:
 14146 0a2a 756E7369 		.ascii	"unsigned int\000"
 14146      676E6564 
 14146      20696E74 
 14146      00
 14147              	.LASF270:
 14148 0a37 6D61785F 		.ascii	"max_pos\000"
 14148      706F7300 
 14149              	.LASF336:
 14150 0a3f 72657374 		.ascii	"rest_pos_curr_ref\000"
 14150      5F706F73 
 14150      5F637572 
 14150      725F7265 
 14150      6600
 14151              	.LASF144:
 14152 0a51 666C6167 		.ascii	"flag\000"
 14152      00
 14153              	.LASF92:
 14154 0a56 636F6E74 		.ascii	"control_mode\000"
 14154      726F6C5F 
 14154      6D6F6465 
 14154      00
 14155              	.LASF21:
 14156 0a63 63797374 		.ascii	"cystatus\000"
 14156      61747573 
 14156      00
 14157              	.LASF26:
 14158 0a6c 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14158      545F4D4F 
 14158      44455F45 
 14158      4E434F44 
 14158      45523300 
 14159              	.LASF110:
 14160 0a80 73745F69 		.ascii	"st_imu\000"
 14160      6D7500
 14161              	.LASF202:
 14162 0a87 63757272 		.ascii	"current_emg\000"
 14162      656E745F 
 14162      656D6700 
 14163              	.LASF183:
 14164 0a93 72785F71 		.ascii	"rx_queue\000"
 14164      75657565 
 14164      00
 14165              	.LASF254:
 14166 0a9c 55445F6D 		.ascii	"UD_mean_value\000"
 14166      65616E5F 
 14166      76616C75 
 14166      6500
 14167              	.LASF228:
 14168 0aaa 6173736F 		.ascii	"assoc_motor\000"
 14168      635F6D6F 
 14168      746F7200 
 14169              	.LASF47:
 14170 0ab6 6164645F 		.ascii	"add_emg\000"
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 310


 14170      656D6700 
 14171              	.LASF215:
 14172 0abe 695F7265 		.ascii	"i_ref\000"
 14172      6600
 14173              	.LASF105:
 14174 0ac4 656D675F 		.ascii	"emg_threshold\000"
 14174      74687265 
 14174      73686F6C 
 14174      6400
 14175              	.LASF281:
 14176 0ad2 73617665 		.ascii	"save_cycles_eeprom\000"
 14176      5F637963 
 14176      6C65735F 
 14176      65657072 
 14176      6F6D00
 14177              	.LASF56:
 14178 0ae5 63757272 		.ascii	"current_hist\000"
 14178      656E745F 
 14178      68697374 
 14178      00
 14179              	.LASF37:
 14180 0af2 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14180      524F4C5F 
 14180      43555252 
 14180      454E5400 
 14181              	.LASF23:
 14182 0b02 6C6F6E67 		.ascii	"long double\000"
 14182      20646F75 
 14182      626C6500 
 14183              	.LASF166:
 14184 0b0e 44495343 		.ascii	"DISCARD\000"
 14184      41524400 
 14185              	.LASF220:
 14186 0b16 70726576 		.ascii	"prev_pos_err\000"
 14186      5F706F73 
 14186      5F657272 
 14186      00
 14187              	.LASF236:
 14188 0b23 696E6974 		.ascii	"init_rot\000"
 14188      5F726F74 
 14188      00
 14189              	.LASF261:
 14190 0b2c 6D6F745F 		.ascii	"mot_idx\000"
 14190      69647800 
 14191              	.LASF304:
 14192 0b34 66696C74 		.ascii	"filt_i\000"
 14192      5F6900
 14193              	.LASF102:
 14194 0b3b 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14194      725F6861 
 14194      6E646C65 
 14194      5F726174 
 14194      696F00
 14195              	.LASF302:
 14196 0b4e 66696C74 		.ascii	"filt_v\000"
 14196      5F7600
 14197              	.LASF325:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 311


 14198 0b55 72657374 		.ascii	"rest_enabled\000"
 14198      5F656E61 
 14198      626C6564 
 14198      00
 14199              	.LASF293:
 14200 0b62 675F7265 		.ascii	"g_refOld\000"
 14200      664F6C64 
 14200      00
 14201              	.LASF213:
 14202 0b6b 706F735F 		.ascii	"pos_error\000"
 14202      6572726F 
 14202      7200
 14203              	.LASF152:
 14204 0b75 6779726F 		.ascii	"gyro_value\000"
 14204      5F76616C 
 14204      756500
 14205              	.LASF115:
 14206 0b80 63757272 		.ascii	"curr_time\000"
 14206      5F74696D 
 14206      6500
 14207              	.LASF100:
 14208 0b8a 646F7562 		.ascii	"double_encoder_on_off\000"
 14208      6C655F65 
 14208      6E636F64 
 14208      65725F6F 
 14208      6E5F6F66 
 14209              	.LASF262:
 14210 0ba0 6D61785F 		.ascii	"max_tension\000"
 14210      74656E73 
 14210      696F6E00 
 14211              	.LASF190:
 14212 0bac 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14212      525F4944 
 14212      5800
 14213              	.LASF237:
 14214 0bb6 6C617374 		.ascii	"last_value_encoder\000"
 14214      5F76616C 
 14214      75655F65 
 14214      6E636F64 
 14214      657200
 14215              	.LASF188:
 14216 0bc9 636F756E 		.ascii	"counter_tension_func\000"
 14216      7465725F 
 14216      74656E73 
 14216      696F6E5F 
 14216      66756E63 
 14217              	.LASF309:
 14218 0bde 6379636C 		.ascii	"cycle_time\000"
 14218      655F7469 
 14218      6D6500
 14219              	.LASF209:
 14220 0be9 66736D5F 		.ascii	"fsm_state\000"
 14220      73746174 
 14220      6500
 14221              	.LASF7:
 14222 0bf3 6C6F6E67 		.ascii	"long long unsigned int\000"
 14222      206C6F6E 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 312


 14222      6720756E 
 14222      7369676E 
 14222      65642069 
 14223              	.LASF318:
 14224 0c0a 6A6F795F 		.ascii	"joy_UD_status\000"
 14224      55445F73 
 14224      74617475 
 14224      7300
 14225              	.LASF51:
 14226 0c18 6C656E67 		.ascii	"length\000"
 14226      746800
 14227              	.LASF149:
 14228 0c1f 73745F69 		.ascii	"st_imu_data\000"
 14228      6D755F64 
 14228      61746100 
 14229              	.LASF153:
 14230 0c2b 6D61675F 		.ascii	"mag_value\000"
 14230      76616C75 
 14230      6500
 14231              	.LASF41:
 14232 0c35 6F6E6F66 		.ascii	"onoff\000"
 14232      6600
 14233              	.LASF232:
 14234 0c3b 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14234      76616C75 
 14234      655F656E 
 14234      636F6465 
 14234      725F3332 
 14235              	.LASF221:
 14236 0c50 70726576 		.ascii	"prev_curr_err\000"
 14236      5F637572 
 14236      725F6572 
 14236      7200
 14237              	.LASF181:
 14238 0c5e 64617461 		.ascii	"data_packet_length\000"
 14238      5F706163 
 14238      6B65745F 
 14238      6C656E67 
 14238      746800
 14239              	.LASF72:
 14240 0c71 6B5F705F 		.ascii	"k_p_c\000"
 14240      6300
 14241              	.LASF310:
 14242 0c77 6465765F 		.ascii	"dev_tension\000"
 14242      74656E73 
 14242      696F6E00 
 14243              	.LASF83:
 14244 0c83 6D6F746F 		.ascii	"motor_driver_type\000"
 14244      725F6472 
 14244      69766572 
 14244      5F747970 
 14244      6500
 14245              	.LASF169:
 14246 0c95 57414954 		.ascii	"WAIT_EoC\000"
 14246      5F456F43 
 14246      00
 14247              	.LASF22:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 313


 14248 0c9e 72656738 		.ascii	"reg8\000"
 14248      00
 14249              	.LASF273:
 14250 0ca3 62696E5F 		.ascii	"bin_1\000"
 14250      3100
 14251              	.LASF274:
 14252 0ca9 62696E5F 		.ascii	"bin_2\000"
 14252      3200
 14253              	.LASF249:
 14254 0caf 695F6175 		.ascii	"i_aux\000"
 14254      7800
 14255              	.LASF138:
 14256 0cb5 70726F70 		.ascii	"prop_err_fb_gain\000"
 14256      5F657272 
 14256      5F66625F 
 14256      6761696E 
 14256      00
 14257              	.LASF206:
 14258 0cc6 706F735F 		.ascii	"pos_diff\000"
 14258      64696666 
 14258      00
 14259              	.LASF283:
 14260 0ccf 726F775F 		.ascii	"row_number\000"
 14260      6E756D62 
 14260      657200
 14261              	.LASF259:
 14262 0cda 6F766572 		.ascii	"overcurrent_control\000"
 14262      63757272 
 14262      656E745F 
 14262      636F6E74 
 14262      726F6C00 
 14263              	.LASF275:
 14264 0cee 63757272 		.ascii	"curr_pos\000"
 14264      5F706F73 
 14264      00
 14265              	.LASF165:
 14266 0cf7 52455345 		.ascii	"RESET\000"
 14266      5400
 14267              	.LASF133:
 14268 0cfd 736C6176 		.ascii	"slave_comm_active\000"
 14268      655F636F 
 14268      6D6D5F61 
 14268      63746976 
 14268      6500
 14269              	.LASF248:
 14270 0d0f 616E616C 		.ascii	"analog_read_end\000"
 14270      6F675F72 
 14270      6561645F 
 14270      656E6400 
 14271              	.LASF333:
 14272 0d1f 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 14272      636F6465 
 14272      725F4C69 
 14272      6E655F43 
 14272      6F6E6E65 
 14273              	.LASF69:
 14274 0d38 6465765F 		.ascii	"dev_type\000"
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 314


 14274      74797065 
 14274      00
 14275              	.LASF266:
 14276 0d41 656D675F 		.ascii	"emg_cycle_status\000"
 14276      6379636C 
 14276      655F7374 
 14276      61747573 
 14276      00
 14277              	.LASF120:
 14278 0d52 73745F75 		.ascii	"st_user\000"
 14278      73657200 
 14279              	.LASF103:
 14280 0d5a 67656172 		.ascii	"gears_params\000"
 14280      735F7061 
 14280      72616D73 
 14280      00
 14281              	.LASF114:
 14282 0d67 73745F65 		.ascii	"st_expansion\000"
 14282      7870616E 
 14282      73696F6E 
 14282      00
 14283              	.LASF108:
 14284 0d74 656D675F 		.ascii	"emg_calibration_flag\000"
 14284      63616C69 
 14284      62726174 
 14284      696F6E5F 
 14284      666C6167 
 14285              	.LASF43:
 14286 0d89 73745F6D 		.ascii	"st_meas\000"
 14286      65617300 
 14287              	.LASF285:
 14288 0d91 61646472 		.ascii	"addr_start\000"
 14288      5F737461 
 14288      727400
 14289              	.LASF289:
 14290 0d9c 70776D5F 		.ascii	"pwm_preload_values\000"
 14290      7072656C 
 14290      6F61645F 
 14290      76616C75 
 14290      657300
 14291              	.LASF130:
 14292 0daf 6A6F7973 		.ascii	"joystick_threshold\000"
 14292      7469636B 
 14292      5F746872 
 14292      6573686F 
 14292      6C6400
 14293              	.LASF32:
 14294 0dc2 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 14294      545F4D4F 
 14294      44455F45 
 14294      4D475F50 
 14294      524F504F 
 14295              	.LASF176:
 14296 0de1 636F756E 		.ascii	"counter_status\000"
 14296      7465725F 
 14296      73746174 
 14296      757300
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 315


 14297              	.LASF299:
 14298 0df0 675F6D65 		.ascii	"g_mem\000"
 14298      6D00
 14299              	.LASF250:
 14300 0df6 656D675F 		.ascii	"emg_counter_1\000"
 14300      636F756E 
 14300      7465725F 
 14300      3100
 14301              	.LASF251:
 14302 0e04 656D675F 		.ascii	"emg_counter_2\000"
 14302      636F756E 
 14302      7465725F 
 14302      3200
 14303              	.LASF240:
 14304 0e12 6F6E6C79 		.ascii	"only_first_time\000"
 14304      5F666972 
 14304      73745F74 
 14304      696D6500 
 14305              	.LASF11:
 14306 0e22 75696E74 		.ascii	"uint8\000"
 14306      3800
 14307              	.LASF128:
 14308 0e28 73745F4A 		.ascii	"st_JOY_spec\000"
 14308      4F595F73 
 14308      70656300 
 14309              	.LASF235:
 14310 0e34 76616C75 		.ascii	"value_diff\000"
 14310      655F6469 
 14310      666600
 14311              	.LASF277:
 14312 0e3f 63757272 		.ascii	"curr_ref\000"
 14312      5F726566 
 14312      00
 14313              	.LASF2:
 14314 0e48 73686F72 		.ascii	"short int\000"
 14314      7420696E 
 14314      7400
 14315              	.LASF77:
 14316 0e52 6B5F645F 		.ascii	"k_d_dl\000"
 14316      646C00
 14317              	.LASF233:
 14318 0e59 76616C75 		.ascii	"value_encoder\000"
 14318      655F656E 
 14318      636F6465 
 14318      7200
 14319              	.LASF48:
 14320 0e67 6A6F7973 		.ascii	"joystick\000"
 14320      7469636B 
 14320      00
 14321              	.LASF146:
 14322 0e70 6D6F746F 		.ascii	"motor\000"
 14322      7200
 14323              	.LASF312:
 14324 0e76 6465765F 		.ascii	"dev_pwm_sat\000"
 14324      70776D5F 
 14324      73617400 
 14325              	.LASF62:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 316


 14326 0e82 68775F6D 		.ascii	"hw_maint_date\000"
 14326      61696E74 
 14326      5F646174 
 14326      6500
 14327              	.LASF193:
 14328 0e90 66756E63 		.ascii	"function_scheduler\000"
 14328      74696F6E 
 14328      5F736368 
 14328      6564756C 
 14328      657200
 14329              	.LASF194:
 14330 0ea3 636F6D70 		.ascii	"compute_reference\000"
 14330      7574655F 
 14330      72656665 
 14330      72656E63 
 14330      6500
 14331              	.LASF222:
 14332 0eb5 70726576 		.ascii	"prev_pwm\000"
 14332      5F70776D 
 14332      00
 14333              	.LASF63:
 14334 0ebe 73746174 		.ascii	"stats_period_begin_date\000"
 14334      735F7065 
 14334      72696F64 
 14334      5F626567 
 14334      696E5F64 
 14335              	.LASF290:
 14336 0ed6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 14336      52784275 
 14336      66666572 
 14336      00
 14337              	.LASF314:
 14338 0ee3 706F775F 		.ascii	"pow_tension\000"
 14338      74656E73 
 14338      696F6E00 
 14339              	.LASF15:
 14340 0eef 696E7431 		.ascii	"int16\000"
 14340      3600
 14341              	.LASF116:
 14342 0ef5 72656164 		.ascii	"read_exp_port_flag\000"
 14342      5F657870 
 14342      5F706F72 
 14342      745F666C 
 14342      616700
 14343              	.LASF82:
 14344 0f08 61637469 		.ascii	"activate_pwm_rescaling\000"
 14344      76617465 
 14344      5F70776D 
 14344      5F726573 
 14344      63616C69 
 14345              	.LASF75:
 14346 0f1f 6B5F705F 		.ascii	"k_p_dl\000"
 14346      646C00
 14347              	.LASF44:
 14348 0f26 65737469 		.ascii	"estim_curr\000"
 14348      6D5F6375 
 14348      727200
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 317


 14349              	.LASF311:
 14350 0f31 6465765F 		.ascii	"dev_pwm_limit\000"
 14350      70776D5F 
 14350      6C696D69 
 14350      7400
 14351              	.LASF282:
 14352 0f3f 73746174 		.ascii	"status\000"
 14352      757300
 14353              	.LASF214:
 14354 0f46 63757272 		.ascii	"curr_error\000"
 14354      5F657272 
 14354      6F7200
 14355              	.LASF334:
 14356 0f51 456E636F 		.ascii	"Encoder_Value\000"
 14356      6465725F 
 14356      56616C75 
 14356      6500
 14357              	.LASF68:
 14358 0f5f 75736572 		.ascii	"user_id\000"
 14358      5F696400 
 14359              	.LASF267:
 14360 0f67 72657374 		.ascii	"rest_cycle_status\000"
 14360      5F637963 
 14360      6C655F73 
 14360      74617475 
 14360      7300
 14361              	.LASF204:
 14362 0f79 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 14362      7574655F 
 14362      536F6674 
 14362      48616E64 
 14362      5F325F6D 
 14363              	.LASF231:
 14364 0fa6 746D705F 		.ascii	"tmp_value_encoder\000"
 14364      76616C75 
 14364      655F656E 
 14364      636F6465 
 14364      7200
 14365              	.LASF178:
 14366 0fb8 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 14366      4359434C 
 14366      45535F48 
 14366      616E646C 
 14366      657200
 14367              	.LASF67:
 14368 0fcb 62617564 		.ascii	"baud_rate\000"
 14368      5F726174 
 14368      6500
 14369              	.LASF141:
 14370 0fd5 66617374 		.ascii	"fast_act_threshold\000"
 14370      5F616374 
 14370      5F746872 
 14370      6573686F 
 14370      6C6400
 14371              	.LASF112:
 14372 0fe8 5350495F 		.ascii	"SPI_read_delay\000"
 14372      72656164 
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 318


 14372      5F64656C 
 14372      617900
 14373              	.LASF3:
 14374 0ff7 73686F72 		.ascii	"short unsigned int\000"
 14374      7420756E 
 14374      7369676E 
 14374      65642069 
 14374      6E7400
 14375              	.LASF96:
 14376 100a 73745F65 		.ascii	"st_encoder\000"
 14376      6E636F64 
 14376      657200
 14377              	.LASF296:
 14378 1015 675F6164 		.ascii	"g_adc_meas\000"
 14378      635F6D65 
 14378      617300
 14379              	.LASF136:
 14380 1020 6D61785F 		.ascii	"max_residual_current\000"
 14380      72657369 
 14380      6475616C 
 14380      5F637572 
 14380      72656E74 
 14381              	.LASF201:
 14382 1035 454E435F 		.ascii	"ENC_L\000"
 14382      4C00
 14383              	.LASF143:
 14384 103b 73745F65 		.ascii	"st_eeprom\000"
 14384      6570726F 
 14384      6D00
 14385              	.LASF319:
 14386 1045 6A6F795F 		.ascii	"joy_LR_status\000"
 14386      4C525F73 
 14386      74617475 
 14386      7300
 14387              	.LASF343:
 14388 1053 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 14388      72635C69 
 14388      6E746572 
 14388      72757074 
 14388      696F6E73 
 14389              	.LASF197:
 14390 106a 73745F72 		.ascii	"st_refOld_p\000"
 14390      65664F6C 
 14390      645F7000 
 14391              	.LASF16:
 14392 1076 696E7433 		.ascii	"int32\000"
 14392      3200
 14393              	.LASF330:
 14394 107c 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 14394      4F465F41 
 14394      4E414C4F 
 14394      475F494E 
 14394      50555453 
 14395              	.LASF71:
 14396 1091 73745F6D 		.ascii	"st_motor\000"
 14396      6F746F72 
 14396      00
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 319


 14397              	.LASF341:
 14398 109a 6D617374 		.ascii	"master_mode\000"
 14398      65725F6D 
 14398      6F646500 
 14399              	.LASF39:
 14400 10a6 46535F46 		.ascii	"FS_FILE\000"
 14400      494C4500 
 14401              	.LASF84:
 14402 10ae 706F735F 		.ascii	"pos_lim_flag\000"
 14402      6C696D5F 
 14402      666C6167 
 14402      00
 14403              	.LASF255:
 14404 10bb 4C525F6D 		.ascii	"LR_mean_value\000"
 14404      65616E5F 
 14404      76616C75 
 14404      6500
 14405              	.LASF295:
 14406 10c9 675F6D65 		.ascii	"g_measOld\000"
 14406      61734F6C 
 14406      6400
 14407              	.LASF287:
 14408 10d3 726F775F 		.ascii	"row_end\000"
 14408      656E6400 
 14409              	.LASF35:
 14410 10db 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 14410      524F4C5F 
 14410      414E474C 
 14410      4500
 14411              	.LASF9:
 14412 10e9 5F5F696E 		.ascii	"__int32_t\000"
 14412      7433325F 
 14412      7400
 14413              	.LASF58:
 14414 10f3 77697265 		.ascii	"wire_disp\000"
 14414      5F646973 
 14414      7000
 14415              	.LASF324:
 14416 10fd 63616E5F 		.ascii	"can_write\000"
 14416      77726974 
 14416      6500
 14417              	.LASF106:
 14418 1107 656D675F 		.ascii	"emg_max_value\000"
 14418      6D61785F 
 14418      76616C75 
 14418      6500
 14419              	.LASF90:
 14420 1115 63757272 		.ascii	"current_limit\000"
 14420      656E745F 
 14420      6C696D69 
 14420      7400
 14421              	.LASF33:
 14422 1123 53485F69 		.ascii	"SH_input_mode\000"
 14422      6E707574 
 14422      5F6D6F64 
 14422      6500
 14423              	.LASF175:
ARM GAS  C:\Users\Cino\AppData\Local\Temp\cc6zsrSM.s 			page 320


 14424 1131 4E4F4E45 		.ascii	"NONE\000"
 14424      00
 14425              	.LASF140:
 14426 1136 61637469 		.ascii	"activation_mode\000"
 14426      76617469 
 14426      6F6E5F6D 
 14426      6F646500 
 14427              	.LASF12:
 14428 1146 75696E74 		.ascii	"uint16\000"
 14428      313600
 14429              	.LASF344:
 14430 114d 443A5C50 		.ascii	"D:\\Program Files\\Google Drive\\HapticLab\\3_Utils"
 14430      726F6772 
 14430      616D2046 
 14430      696C6573 
 14430      5C476F6F 
 14431 117c 5C716272 		.ascii	"\\qbrobotics\\qb_psoc5_firmware\\CUFF.cydsn\000"
 14431      6F626F74 
 14431      6963735C 
 14431      71625F70 
 14431      736F6335 
 14432              	.LASF125:
 14433 11a5 72657374 		.ascii	"rest_delay\000"
 14433      5F64656C 
 14433      617900
 14434              	.LASF156:
 14435 11b0 73745F66 		.ascii	"st_filter\000"
 14435      696C7465 
 14435      7200
 14436              	.LASF246:
 14437 11ba 76765F76 		.ascii	"vv_value\000"
 14437      616C7565 
 14437      00
 14438              	.LASF80:
 14439 11c3 6B5F645F 		.ascii	"k_d_c_dl\000"
 14439      635F646C 
 14439      00
 14440              	.LASF161:
 14441 11cc 64697265 		.ascii	"direction\000"
 14441      6374696F 
 14441      6E00
 14442              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
